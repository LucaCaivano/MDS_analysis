DEBUG:root:num batches:3.732, batch_size:500 epochs:10718
DEBUG:root:Training SCA Model:
DEBUG:root:Parameters:, l2_reg:0.001, learning_rate:0.0003, momentum: beta1=0.9 beta2=0.999, batch_size:500, batch_norm:True, hidden_dim:[50, 50, 50], num_of_batches:3.732, keep_prob:0.8, n_clusters:8, gamma_0:3
DEBUG:root:ITER:0, Train CI:0.45547734895365866, Clustering:0.7183769941329956,Reg:1.302905797958374, Accuracy:2004.5853271484375, Calibration:138.05389404296875, Cost:2142.63916015625
DEBUG:root: Final curr_post:[0.13253316 0.14905931], curr_lik:[0.13253316 0.14905931], K:8
DEBUG:root:pred_surv:0.5370352864265442,  emp_surv:0.29206714034080505,  km_loss:88.79354095458984, len_unique_t:420, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13253316 0.14905931]  curr_lik:[0.13253316 0.14905931], train_k:8, 

DEBUG:root:valid_calibration:237.01022221491885, best_calibration:237.01022221491885, valid_ci:0.4576035585209897,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 5 epochs:1, Train Loss: 2282.10986328125, Reg:1.303095817565918, Calibration:159.41151428222656, Accuracy:2122.6982421875,  CI:0.4615134586084307, Clustering:0.7199068069458008Valid Loss:4828.8824619391025, Reg:2.7844773398505316, Calibration:237.01022221491885, Accuracy:4590.206830929487, CI:0.4576035585209897, Clustering:1.6659097029612613, * 

DEBUG:root:pred_surv:0.15496249496936798,  emp_surv:0.2170155644416809,  km_loss:226.02049255371094, len_unique_t:409, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.14410302 0.14706032]  curr_lik:[0.14410302 0.14706032], train_k:8, 

DEBUG:root:valid_calibration:292.21454848591077, best_calibration:237.01022221491885, valid_ci:0.4159484755815031,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 10 epochs:2, Train Loss: 2149.874755859375, Reg:1.3033020496368408, Calibration:171.60324096679688, Accuracy:1978.2716064453125,  CI:0.4509522401925594, Clustering:0.718818187713623Valid Loss:4881.232889289529, Reg:2.7849236105242343, Calibration:292.21454848591077, Accuracy:4587.6104892828525, CI:0.4159484755815031, Clustering:1.4077810904918573,  

DEBUG:root:pred_surv:0.619579017162323,  emp_surv:0.3223373293876648,  km_loss:75.30928039550781, len_unique_t:416, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13743232 0.14307979]  curr_lik:[0.1374323  0.14307977], train_k:8, 

DEBUG:root:valid_calibration:311.5706810584435, best_calibration:237.01022221491885, valid_ci:0.4216940042628116,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 15 epochs:3, Train Loss: 2108.169189453125, Reg:1.3034940958023071, Calibration:105.26534271240234, Accuracy:2002.9039306640625,  CI:0.4943479579020313, Clustering:0.723176896572113Valid Loss:4899.38015407986, Reg:2.785312823760204, Calibration:311.5706810584435, Accuracy:4586.4309979300215, CI:0.4216940042628116, Clustering:1.3782534843836074,  

DEBUG:root:pred_surv:0.2403697967529297,  emp_surv:0.3028799891471863,  km_loss:202.044189453125, len_unique_t:437, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13568017 0.14774491]  curr_lik:[0.13568018 0.14774492], train_k:8, 

DEBUG:root:valid_calibration:312.75503044454456, best_calibration:237.01022221491885, valid_ci:0.42957093874525065,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 20 epochs:4, Train Loss: 2376.982421875, Reg:1.303634762763977, Calibration:182.2506103515625, Accuracy:2194.731689453125,  CI:0.4698570285737729, Clustering:0.7083085179328918Valid Loss:4899.8668703258545, Reg:2.7855919976519723, Calibration:312.75503044454456, Accuracy:4585.737701155182, CI:0.42957093874525065, Clustering:1.374501957852616,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.34135735034942627,  km_loss:294.119384765625, len_unique_t:421, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13988116 0.15969035]  curr_lik:[0.13988116 0.15969035], train_k:8, 

DEBUG:root:valid_calibration:311.76858885675415, best_calibration:237.01022221491885, valid_ci:0.42906125474932816,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 25 epochs:5, Train Loss: 2267.371826171875, Reg:1.3037309646606445, Calibration:171.9373321533203, Accuracy:2095.4345703125,  CI:0.4204938434767286, Clustering:0.7218739986419678Valid Loss:4898.6774672809825, Reg:2.785778962648832, Calibration:311.76858885675415, Accuracy:4585.537902310363, CI:0.42906125474932816, Clustering:1.371202815292228,  

DEBUG:root:pred_surv:0.18960633873939514,  emp_surv:0.27833420038223267,  km_loss:210.86981201171875, len_unique_t:426, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13254407 0.13782173]  curr_lik:[0.13254407 0.13782173], train_k:8, 

DEBUG:root:valid_calibration:313.19887210161255, best_calibration:237.01022221491885, valid_ci:0.4168751737559077,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 30 epochs:6, Train Loss: 2213.91650390625, Reg:1.3037779331207275, Calibration:239.26304626464844, Accuracy:1974.6534423828125,  CI:0.46341574882317993, Clustering:0.7124569416046143Valid Loss:4899.748451689369, Reg:2.785854869418674, Calibration:313.19887210161255, Accuracy:4585.179516392895, CI:0.4168751737559077, Clustering:1.3697242889648829,  

DEBUG:root:pred_surv:0.3326060473918915,  emp_surv:0.32983365654945374,  km_loss:143.73826599121094, len_unique_t:410, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13858879 0.1845998 ]  curr_lik:[0.13858877 0.18459979], train_k:8, 

DEBUG:root:valid_calibration:318.4154543102297, best_calibration:237.01022221491885, valid_ci:0.41835789083495506,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 35 epochs:7, Train Loss: 2213.90869140625, Reg:1.3037896156311035, Calibration:128.85775756835938, Accuracy:2085.051025390625,  CI:0.44878999885307946, Clustering:0.7173339128494263Valid Loss:4904.779417901977, Reg:2.785880596209795, Calibration:318.4154543102297, Accuracy:4584.993280916132, CI:0.41835789083495506, Clustering:1.3707708089779584,  

DEBUG:root:pred_surv:0.2668800950050354,  emp_surv:0.33360475301742554,  km_loss:183.83982849121094, len_unique_t:413, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.1307195 0.153608 ]  curr_lik:[0.1307195 0.153608 ], train_k:8, 

DEBUG:root:valid_calibration:316.00511991060694, best_calibration:237.01022221491885, valid_ci:0.41650449448614585,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 40 epochs:8, Train Loss: 2107.128662109375, Reg:1.303800106048584, Calibration:151.40049743652344, Accuracy:1955.7281494140625,  CI:0.48762293062120565, Clustering:0.7221638560295105Valid Loss:4902.230026375534, Reg:2.78590046442472, Calibration:316.00511991060694, Accuracy:4584.851908887553, CI:0.41650449448614585, Clustering:1.3730300542635794,  

DEBUG:root:pred_surv:0.24240364134311676,  emp_surv:0.31237152218818665,  km_loss:199.47386169433594, len_unique_t:427, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13865976 0.14493181]  curr_lik:[0.13865976 0.14493181], train_k:8, 

DEBUG:root:valid_calibration:315.9711462819678, best_calibration:237.01022221491885, valid_ci:0.41492910758965806,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 45 epochs:9, Train Loss: 2244.8408203125, Reg:1.3038089275360107, Calibration:134.80238342285156, Accuracy:2110.038330078125,  CI:0.4964985845341734, Clustering:0.7117711305618286Valid Loss:4901.872162126068, Reg:2.7859177854326034, Calibration:315.9711462819678, Accuracy:4584.523258046207, CI:0.41492910758965806, Clustering:1.3775952860840364,  

DEBUG:root:pred_surv:0.3693406581878662,  emp_surv:0.2806726098060608,  km_loss:145.08128356933594, len_unique_t:417, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13274778 0.14157903]  curr_lik:[0.13274778 0.14157903], train_k:8, 

DEBUG:root:valid_calibration:316.60644009581995, best_calibration:237.01022221491885, valid_ci:0.4209063108145677,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 50 epochs:10, Train Loss: 2205.431884765625, Reg:1.3038198947906494, Calibration:131.04017639160156, Accuracy:2074.3916015625,  CI:0.4331845685104922, Clustering:0.709571897983551Valid Loss:4902.224809695513, Reg:2.785945549989358, Calibration:316.60644009581995, Accuracy:4584.250947349092, CI:0.4209063108145677, Clustering:1.3680205895350528,  

DEBUG:root:pred_surv:0.4988193213939667,  emp_surv:0.36530935764312744,  km_loss:98.52738189697266, len_unique_t:414, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.14141388 0.15538491]  curr_lik:[0.1414139  0.15538493], train_k:8, 

DEBUG:root:valid_calibration:315.64076741536456, best_calibration:237.01022221491885, valid_ci:0.4197016031878417,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 55 epochs:11, Train Loss: 2090.643310546875, Reg:1.3038294315338135, Calibration:84.03663635253906, Accuracy:2006.6065673828125,  CI:0.40906150263089797, Clustering:0.722578227519989Valid Loss:4900.834042801816, Reg:2.7859643993214664, Calibration:315.64076741536456, Accuracy:4583.817962907318, CI:0.4197016031878417, Clustering:1.3749033976823855,  

DEBUG:root:pred_surv:0.2988000214099884,  emp_surv:0.26002413034439087,  km_loss:167.439697265625, len_unique_t:409, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13866423 0.13938615]  curr_lik:[0.13866423 0.13938615], train_k:8, 

DEBUG:root:valid_calibration:315.84043584318243, best_calibration:237.01022221491885, valid_ci:0.42345473079418033,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 60 epochs:12, Train Loss: 2174.766357421875, Reg:1.3038415908813477, Calibration:217.61874389648438, Accuracy:1957.147705078125,  CI:0.4407030044969694, Clustering:0.7048436403274536Valid Loss:4901.039579994658, Reg:2.7859903808332915, Calibration:315.84043584318243, Accuracy:4583.835699619391, CI:0.42345473079418033, Clustering:1.3636467803237784,  

DEBUG:root:pred_surv:0.45186200737953186,  emp_surv:0.26657575368881226,  km_loss:119.00322723388672, len_unique_t:431, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.1408446  0.14380786]  curr_lik:[0.1408446  0.14380786], train_k:8, 

DEBUG:root:valid_calibration:310.20707350510816, best_calibration:237.01022221491885, valid_ci:0.4283198962098045,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 65 epochs:13, Train Loss: 2366.262451171875, Reg:1.3038522005081177, Calibration:188.82298278808594, Accuracy:2177.439453125,  CI:0.4153323325827704, Clustering:0.707367479801178Valid Loss:4895.255325186966, Reg:2.7860145793001876, Calibration:310.20707350510816, Accuracy:4583.681807558761, CI:0.4283198962098045, Clustering:1.3669347151731832,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.3054021894931793,  km_loss:209.1898956298828, len_unique_t:419, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13048361 0.15993482]  curr_lik:[0.13048361 0.15993482], train_k:8, 

DEBUG:root:valid_calibration:305.22824148846485, best_calibration:237.01022221491885, valid_ci:0.4162728199425447,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 70 epochs:14, Train Loss: 2226.57275390625, Reg:1.3038668632507324, Calibration:200.30511474609375, Accuracy:2026.267578125,  CI:0.46146357980276803, Clustering:0.7152643799781799Valid Loss:4889.961438301282, Reg:2.7860436174604626, Calibration:305.22824148846485, Accuracy:4583.364633413461, CI:0.4162728199425447, Clustering:1.368827290005154,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.4192061126232147,  km_loss:255.52047729492188, len_unique_t:411, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.1329242  0.16194117]  curr_lik:[0.1329242  0.16194117], train_k:8, 

DEBUG:root:valid_calibration:309.18365869766626, best_calibration:237.01022221491885, valid_ci:0.4308219812806969,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 75 epochs:15, Train Loss: 2292.123291015625, Reg:1.3038756847381592, Calibration:247.10389709472656, Accuracy:2045.019287109375,  CI:0.45200096238671905, Clustering:0.7106186747550964Valid Loss:4893.817608173076, Reg:2.786065778161725, Calibration:309.18365869766626, Accuracy:4583.269689837072, CI:0.4308219812806969, Clustering:1.3641763446677444,  

DEBUG:root:pred_surv:0.20224866271018982,  emp_surv:0.3110349774360657,  km_loss:206.05787658691406, len_unique_t:421, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.14314899 0.14537004]  curr_lik:[0.14314899 0.14537004], train_k:8, 

DEBUG:root:valid_calibration:314.55475244766626, best_calibration:237.01022221491885, valid_ci:0.41909924937447873,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 80 epochs:16, Train Loss: 2355.65283203125, Reg:1.3038904666900635, Calibration:153.3054962158203, Accuracy:2202.347412109375,  CI:0.4581459976051151, Clustering:0.716588020324707Valid Loss:4898.973774706196, Reg:2.7860973635290422, Calibration:314.55475244766626, Accuracy:4583.058414296207, CI:0.41909924937447873, Clustering:1.3606680764092338,  

DEBUG:root:pred_surv:0.22248470783233643,  emp_surv:0.2695366442203522,  km_loss:191.3225555419922, len_unique_t:407, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13573135 0.14597467]  curr_lik:[0.13573135 0.14597467], train_k:8, 

DEBUG:root:valid_calibration:311.28598074627735, best_calibration:237.01022221491885, valid_ci:0.42132332499304975,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 85 epochs:17, Train Loss: 2231.3388671875, Reg:1.3039071559906006, Calibration:202.98573303222656, Accuracy:2028.3531494140625,  CI:0.44467874794069195, Clustering:0.7097659111022949Valid Loss:4894.92458767361, Reg:2.7861312413826966, Calibration:311.28598074627735, Accuracy:4582.272782284989, CI:0.42132332499304975, Clustering:1.3658368689382177,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.2817339301109314,  km_loss:246.05368041992188, len_unique_t:426, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13817133 0.15798885]  curr_lik:[0.13817133 0.15798885], train_k:8, 

DEBUG:root:valid_calibration:309.37667585845685, best_calibration:237.01022221491885, valid_ci:0.42414975442498376,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 90 epochs:18, Train Loss: 2201.446044921875, Reg:1.303918480873108, Calibration:153.79708862304688, Accuracy:2047.64892578125,  CI:0.4778939644102, Clustering:0.7172008752822876Valid Loss:4893.034062833867, Reg:2.786157477615226, Calibration:309.37667585845685, Accuracy:4582.292084001068, CI:0.42414975442498376, Clustering:1.365345640060229,  

DEBUG:root:pred_surv:0.4427040219306946,  emp_surv:0.287013441324234,  km_loss:123.24867248535156, len_unique_t:416, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13329838 0.17551184]  curr_lik:[0.13329837 0.17551182], train_k:8, 

DEBUG:root:valid_calibration:311.4937024238782, best_calibration:237.01022221491885, valid_ci:0.4233620609767399,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 95 epochs:19, Train Loss: 2205.6015625, Reg:1.3039226531982422, Calibration:136.94944763183594, Accuracy:2068.652099609375,  CI:0.41565967069465054, Clustering:0.713671863079071Valid Loss:4894.0382737379805, Reg:2.786155185128888, Calibration:311.4937024238782, Accuracy:4581.171019464477, CI:0.4233620609767399, Clustering:1.3729732515465498,  

DEBUG:root:pred_surv:0.16710107028484344,  emp_surv:0.41805389523506165,  km_loss:226.37652587890625, len_unique_t:422, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13330282 0.13600509]  curr_lik:[0.13330281 0.13600507], train_k:8, 

DEBUG:root:valid_calibration:310.05380092523035, best_calibration:237.01022221491885, valid_ci:0.4188675748308776,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 100 epochs:20, Train Loss: 2417.67431640625, Reg:1.303918480873108, Calibration:238.89981079101562, Accuracy:2178.7744140625,  CI:0.4424536628420124, Clustering:0.7152786254882812Valid Loss:4892.778967180822, Reg:2.7861511095976215, Calibration:310.05380092523035, Accuracy:4581.370296641292, CI:0.4188675748308776, Clustering:1.3542109065585666,  

DEBUG:root:ITER:100, Train CI:0.46276452421912245, Clustering:0.7170085906982422,Reg:1.303918719291687, Accuracy:2080.93896484375, Calibration:133.692626953125, Cost:2214.631591796875
DEBUG:root:pred_surv:0.4126806855201721,  emp_surv:0.2648407518863678,  km_loss:130.7883758544922, len_unique_t:425, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.14476518 0.1548135 ]  curr_lik:[0.14476518 0.1548135 ], train_k:8, 

DEBUG:root:valid_calibration:308.6325490576589, best_calibration:237.01022221491885, valid_ci:0.420767306088407,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 105 epochs:21, Train Loss: 2224.479736328125, Reg:1.3039213418960571, Calibration:168.75198364257812, Accuracy:2055.727783203125,  CI:0.47424235892572314, Clustering:0.7181267142295837Valid Loss:4890.7721103766025, Reg:2.7861590059394508, Calibration:308.6325490576589, Accuracy:4580.78133346688, CI:0.420767306088407, Clustering:1.357754071553548,  

DEBUG:root:pred_surv:0.16200685501098633,  emp_surv:0.38333919644355774,  km_loss:186.1712188720703, len_unique_t:411, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13934329 0.1459308 ]  curr_lik:[0.13934329 0.1459308 ], train_k:8, 

DEBUG:root:valid_calibration:311.6512461605235, best_calibration:237.01022221491885, valid_ci:0.4196089333704013,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 110 epochs:22, Train Loss: 2248.457763671875, Reg:1.303938865661621, Calibration:179.26231384277344, Accuracy:2069.195556640625,  CI:0.40844351855788447, Clustering:0.7030460238456726Valid Loss:4893.399230435363, Reg:2.786206383990426, Calibration:311.6512461605235, Accuracy:4580.396864149306, CI:0.4196089333704013, Clustering:1.351142795676859,  

DEBUG:root:pred_surv:0.2684462368488312,  emp_surv:0.3963263928890228,  km_loss:185.25665283203125, len_unique_t:413, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.12839545 0.13252768]  curr_lik:[0.12839544 0.13252766], train_k:8, 

DEBUG:root:valid_calibration:311.105711847289, best_calibration:237.01022221491885, valid_ci:0.4212306551756093,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 115 epochs:23, Train Loss: 2235.320068359375, Reg:1.3039700984954834, Calibration:213.17396545410156, Accuracy:2022.14599609375,  CI:0.387601906713592, Clustering:0.7129268646240234Valid Loss:4892.38771617922, Reg:2.7862672622387223, Calibration:311.105711847289, Accuracy:4579.933101295405, CI:0.4212306551756093, Clustering:1.34874740217486,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.39060086011886597,  km_loss:257.61224365234375, len_unique_t:412, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13388471 0.13545331]  curr_lik:[0.13388471 0.13545331], train_k:8, 

DEBUG:root:valid_calibration:304.23397488064234, best_calibration:237.01022221491885, valid_ci:0.421972013715133,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 120 epochs:24, Train Loss: 2083.40576171875, Reg:1.304006814956665, Calibration:184.5948486328125, Accuracy:1898.810791015625,  CI:0.4107536920726532, Clustering:0.7247511148452759Valid Loss:4885.273729634081, Reg:2.7863556503230686, Calibration:304.23397488064234, Accuracy:4579.678527310363, CI:0.421972013715133, Clustering:1.3614863666713746,  

DEBUG:root:pred_surv:0.21689336001873016,  emp_surv:0.3020232021808624,  km_loss:198.7423858642578, len_unique_t:414, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.14301866 0.14840688]  curr_lik:[0.14301866 0.14840688], train_k:8, 

DEBUG:root:valid_calibration:306.82490422175476, best_calibration:237.01022221491885, valid_ci:0.4237327402465017,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 125 epochs:25, Train Loss: 2138.516357421875, Reg:1.3040516376495361, Calibration:190.87741088867188, Accuracy:1947.638916015625,  CI:0.42645449187505263, Clustering:0.7120521068572998Valid Loss:4887.520032051282, Reg:2.786457283884032, Calibration:306.82490422175476, Accuracy:4579.331618088942, CI:0.4237327402465017, Clustering:1.3628872031839485,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.3119916319847107,  km_loss:231.49197387695312, len_unique_t:422, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13436171 0.14217922]  curr_lik:[0.13436171 0.14217922], train_k:8, 

DEBUG:root:valid_calibration:307.41996439094214, best_calibration:237.01022221491885, valid_ci:0.4135853952367714,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 130 epochs:26, Train Loss: 2299.623779296875, Reg:1.3040940761566162, Calibration:207.89959716796875, Accuracy:2091.72412109375,  CI:0.4202190869217639, Clustering:0.7102559804916382Valid Loss:4888.52789463141, Reg:2.7865349736988034, Calibration:307.41996439094214, Accuracy:4579.75573417468, CI:0.4135853952367714, Clustering:1.352360997444544,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.3341558575630188,  km_loss:258.6172790527344, len_unique_t:411, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.14347039 0.15855087]  curr_lik:[0.14347039 0.15855087], train_k:8, 

DEBUG:root:valid_calibration:307.52821050138556, best_calibration:237.01022221491885, valid_ci:0.42410341951626357,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 135 epochs:27, Train Loss: 2180.156005859375, Reg:1.3041125535964966, Calibration:194.9832305908203, Accuracy:1985.1727294921875,  CI:0.4352657858689408, Clustering:0.7135376930236816Valid Loss:4888.206025474092, Reg:2.786567832669641, Calibration:307.52821050138556, Accuracy:4579.324314736912, CI:0.42410341951626357, Clustering:1.35321138251541,  

DEBUG:root:pred_surv:0.316939115524292,  emp_surv:0.3136291801929474,  km_loss:149.5458984375, len_unique_t:422, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13236813 0.134533  ]  curr_lik:[0.13236813 0.134533  ], train_k:8, 

DEBUG:root:valid_calibration:308.16510192349426, best_calibration:237.01022221491885, valid_ci:0.4229450467982578,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 140 epochs:28, Train Loss: 2300.25732421875, Reg:1.3041267395019531, Calibration:167.4610137939453, Accuracy:2132.79638671875,  CI:0.43344166912884385, Clustering:0.7030503153800964Valid Loss:4888.397477630876, Reg:2.7866034935682245, Calibration:308.16510192349426, Accuracy:4578.8829836071045, CI:0.4229450467982578, Clustering:1.3497088454727433,  

DEBUG:root:pred_surv:0.22762975096702576,  emp_surv:0.41407373547554016,  km_loss:199.99069213867188, len_unique_t:419, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.1356645  0.13880007]  curr_lik:[0.1356645  0.13880007], train_k:8, 

DEBUG:root:valid_calibration:308.5187276204427, best_calibration:237.01022221491885, valid_ci:0.41882123992215736,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 145 epochs:29, Train Loss: 2219.394775390625, Reg:1.3041404485702515, Calibration:161.04283142089844, Accuracy:2058.35205078125,  CI:0.46972279150037755, Clustering:0.7171648740768433Valid Loss:4888.373480902777, Reg:2.786623871224558, Calibration:308.5187276204427, Accuracy:4578.511555989583, CI:0.41882123992215736, Clustering:1.3438920434723551,  

DEBUG:root:pred_surv:0.3288988471031189,  emp_surv:0.35567688941955566,  km_loss:155.3934783935547, len_unique_t:413, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.14411068 0.14952064]  curr_lik:[0.14411068 0.14952064], train_k:8, 

DEBUG:root:valid_calibration:299.8951968983707, best_calibration:237.01022221491885, valid_ci:0.4260494856825132,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 150 epochs:30, Train Loss: 2262.135986328125, Reg:1.3041375875473022, Calibration:182.74691772460938, Accuracy:2079.38916015625,  CI:0.44027253045803794, Clustering:0.7014252543449402Valid Loss:4879.246899205395, Reg:2.786617757927658, Calibration:299.8951968983707, Accuracy:4577.999799679487, CI:0.4260494856825132, Clustering:1.3514603050346048,  

DEBUG:root:pred_surv:0.5518262386322021,  emp_surv:0.3484719693660736,  km_loss:82.00222778320312, len_unique_t:409, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.1373982  0.13901426]  curr_lik:[0.1373982  0.13901426], train_k:8, 

DEBUG:root:valid_calibration:299.68936626727765, best_calibration:237.01022221491885, valid_ci:0.4269761838569178,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 155 epochs:31, Train Loss: 2362.62255859375, Reg:1.3041373491287231, Calibration:132.24600219726562, Accuracy:2230.37646484375,  CI:0.4817064382630896, Clustering:0.719115138053894Valid Loss:4877.9249924879805, Reg:2.7866152107206164, Calibration:299.68936626727765, Accuracy:4576.878213474893, CI:0.4269761838569178, Clustering:1.3580675053800273,  

DEBUG:root:pred_surv:0.2320854514837265,  emp_surv:0.3250431716442108,  km_loss:199.6653594970703, len_unique_t:422, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.12654522 0.15932964]  curr_lik:[0.1265452  0.15932962], train_k:8, 

DEBUG:root:valid_calibration:302.1874060997596, best_calibration:237.01022221491885, valid_ci:0.4178482068390325,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 160 epochs:32, Train Loss: 2177.621337890625, Reg:1.304128885269165, Calibration:175.08750915527344, Accuracy:2002.533935546875,  CI:0.41757848336354075, Clustering:0.7189493775367737Valid Loss:4880.411783854166, Reg:2.7865971255506206, Calibration:302.1874060997596, Accuracy:4576.873518462874, CI:0.4178482068390325, Clustering:1.3512096598617032,  

DEBUG:root:pred_surv:0.30341923236846924,  emp_surv:0.2504732012748718,  km_loss:159.76402282714844, len_unique_t:410, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.12988028 0.13119806]  curr_lik:[0.12988028 0.13119806], train_k:8, 

DEBUG:root:valid_calibration:304.67083922818176, best_calibration:237.01022221491885, valid_ci:0.42845890093596517,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 165 epochs:33, Train Loss: 2201.092041015625, Reg:1.3041179180145264, Calibration:137.31427001953125, Accuracy:2063.77783203125,  CI:0.44253380364491474, Clustering:0.7226575016975403Valid Loss:4881.4749432425215, Reg:2.786570889318091, Calibration:304.67083922818176, Accuracy:4575.451451489049, CI:0.42845890093596517, Clustering:1.3528019189834595,  

DEBUG:root:pred_surv:0.30519598722457886,  emp_surv:0.3796907663345337,  km_loss:171.262939453125, len_unique_t:425, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13723703 0.1539883 ]  curr_lik:[0.13723703 0.1539883 ], train_k:8, 

DEBUG:root:valid_calibration:297.394287891877, best_calibration:237.01022221491885, valid_ci:0.41933092391807986,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 170 epochs:34, Train Loss: 2309.05615234375, Reg:1.3041024208068848, Calibration:152.02523803710938, Accuracy:2157.031005859375,  CI:0.4381072216836156, Clustering:0.7096457481384277Valid Loss:4874.071430956196, Reg:2.7865365020230284, Calibration:297.394287891877, Accuracy:4575.331467848558, CI:0.41933092391807986, Clustering:1.3455162700424845,  

DEBUG:root:pred_surv:0.30478012561798096,  emp_surv:0.3793402910232544,  km_loss:164.84791564941406, len_unique_t:430, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13525058 0.16512254]  curr_lik:[0.13525058 0.16512254], train_k:8, 

DEBUG:root:valid_calibration:302.93864062708667, best_calibration:237.01022221491885, valid_ci:0.4221573533500139,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 175 epochs:35, Train Loss: 2301.137939453125, Reg:1.3040846586227417, Calibration:180.60475158691406, Accuracy:2120.533203125,  CI:0.41498971081988517, Clustering:0.7098695635795593Valid Loss:4879.471738114316, Reg:2.7865306434468327, Calibration:302.93864062708667, Accuracy:4575.187487479968, CI:0.4221573533500139, Clustering:1.3447890424320839,  

DEBUG:root:pred_surv:0.19994552433490753,  emp_surv:0.32410064339637756,  km_loss:181.6127166748047, len_unique_t:429, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.12898727 0.1296913 ]  curr_lik:[0.12898727 0.1296913 ], train_k:8, 

DEBUG:root:valid_calibration:302.71654047517694, best_calibration:237.01022221491885, valid_ci:0.42109165044944863,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 180 epochs:36, Train Loss: 2368.800048828125, Reg:1.3041353225708008, Calibration:229.7372283935547, Accuracy:2139.062744140625,  CI:0.4260049404895576, Clustering:0.7147502303123474Valid Loss:4879.055968716613, Reg:2.7866350789355416, Calibration:302.71654047517694, Accuracy:4574.989775307158, CI:0.42109165044944863, Clustering:1.3500370531000643,  

DEBUG:root:pred_surv:0.16321438550949097,  emp_surv:0.3682612180709839,  km_loss:176.92889404296875, len_unique_t:422, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13744132 0.14168943]  curr_lik:[0.13744132 0.14168943], train_k:8, 

DEBUG:root:valid_calibration:295.59489193125665, best_calibration:237.01022221491885, valid_ci:0.42799555184876287,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 185 epochs:37, Train Loss: 2369.22119140625, Reg:1.3041760921478271, Calibration:208.6354217529297, Accuracy:2160.585693359375,  CI:0.41149364912615793, Clustering:0.7104592323303223Valid Loss:4871.152176816239, Reg:2.7867214292542544, Calibration:295.59489193125665, Accuracy:4574.201013287927, CI:0.42799555184876287, Clustering:1.35631935718732,  

DEBUG:root:pred_surv:0.17921559512615204,  emp_surv:0.26725852489471436,  km_loss:200.5040740966797, len_unique_t:425, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.1417178  0.15010649]  curr_lik:[0.1417178  0.15010649], train_k:8, 

DEBUG:root:valid_calibration:302.16927813668536, best_calibration:237.01022221491885, valid_ci:0.4229450467982578,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 190 epochs:38, Train Loss: 2130.73974609375, Reg:1.3042131662368774, Calibration:199.88621520996094, Accuracy:1930.853515625,  CI:0.47613795638886974, Clustering:0.7150333523750305Valid Loss:4877.923427483974, Reg:2.7868065059694467, Calibration:302.16927813668536, Accuracy:4574.403942140758, CI:0.4229450467982578, Clustering:1.3501054456091335,  

DEBUG:root:pred_surv:0.2862875461578369,  emp_surv:0.373545378446579,  km_loss:168.45458984375, len_unique_t:427, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.14564517 0.15195334]  curr_lik:[0.14564516 0.15195332], train_k:8, 

DEBUG:root:valid_calibration:296.36617807241583, best_calibration:237.01022221491885, valid_ci:0.4209063108145677,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 195 epochs:39, Train Loss: 2213.44091796875, Reg:1.3042782545089722, Calibration:188.37789916992188, Accuracy:2025.06298828125,  CI:0.48082278602569767, Clustering:0.7194598913192749Valid Loss:4872.32436481704, Reg:2.786944564591106, Calibration:296.36617807241583, Accuracy:4574.604784321581, CI:0.4209063108145677, Clustering:1.3530835127219174,  

DEBUG:root:pred_surv:0.17077435553073883,  emp_surv:0.2780976891517639,  km_loss:149.01426696777344, len_unique_t:410, curr_pop_nk, min:0.125, max:0.125, sum:1.0, curr_post:[0.13341476 0.14405061]  curr_lik:[0.13341476 0.14405061], train_k:8, 

DEBUG:root:valid_calibration:304.4393490522336, best_calibration:237.01022221491885, valid_ci:0.4163191548512649,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 200 epochs:40, Train Loss: 2230.1181640625, Reg:1.3043330907821655, Calibration:143.90428161621094, Accuracy:2086.2138671875,  CI:0.4565045060080107, Clustering:0.717359721660614Valid Loss:4879.854642427885, Reg:2.787057915304461, Calibration:304.4393490522336, Accuracy:4574.059641259348, CI:0.4163191548512649, Clustering:1.3557681415834997,  

DEBUG:root:ITER:200, Train CI:0.43852531701693714, Clustering:0.7301309108734131,Reg:1.3043431043624878, Accuracy:2011.4097900390625, Calibration:179.03050231933594, Cost:2191.17041015625
DEBUG:root:pred_surv:0.44722455739974976,  emp_surv:0.37895509600639343,  km_loss:120.96305084228516, len_unique_t:420, curr_pop_nk, min:0.10490123182535172, max:0.1462123543024063, sum:0.9999998807907104, curr_post:[0.2094682  0.23200011]  curr_lik:[0.2009705  0.20640405], train_k:8, 

DEBUG:root:valid_calibration:305.30629606328455, best_calibration:237.01022221491885, valid_ci:0.4313316652766194,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 205 epochs:41, Train Loss: 1938.4542236328125, Reg:1.350841999053955, Calibration:125.57384490966797, Accuracy:1812.13720703125,  CI:0.42757266116398157, Clustering:0.743131160736084Valid Loss:4881.086822248932, Reg:2.886356451572516, Calibration:305.30629606328455, Accuracy:4573.567708333333, CI:0.4313316652766194, Clustering:2.2128690511752396,  

DEBUG:root:pred_surv:0.1979144811630249,  emp_surv:0.365336537361145,  km_loss:200.70281982421875, len_unique_t:419, curr_pop_nk, min:0.08516918122768402, max:0.1659996211528778, sum:0.9999998211860657, curr_post:[0.19948328 0.3745171 ]  curr_lik:[0.19406039 0.3266309 ], train_k:8, 

DEBUG:root:valid_calibration:302.82442793886884, best_calibration:237.01022221491885, valid_ci:0.41182466870540263,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 210 epochs:42, Train Loss: 2230.42724609375, Reg:1.3506585359573364, Calibration:172.06369018554688, Accuracy:2057.3486328125,  CI:0.4368255096149576, Clustering:1.0148502588272095Valid Loss:4879.130567240919, Reg:2.8859234263754296, Calibration:302.82442793886884, Accuracy:4573.307917668269, CI:0.41182466870540263, Clustering:2.9981867370442448,  

DEBUG:root:pred_surv:0.32668381929397583,  emp_surv:0.39630094170570374,  km_loss:163.10086059570312, len_unique_t:411, curr_pop_nk, min:0.07384195923805237, max:0.17712880671024323, sum:0.9999998807907104, curr_post:[0.19738412 0.3348959 ]  curr_lik:[0.16671382 0.3033317 ], train_k:8, 

DEBUG:root:valid_calibration:305.76741797292334, best_calibration:237.01022221491885, valid_ci:0.4169215086646279,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 215 epochs:43, Train Loss: 2196.602783203125, Reg:1.3504176139831543, Calibration:206.13958740234375, Accuracy:1989.19580078125,  CI:0.42607236390449793, Clustering:1.2672144174575806Valid Loss:4882.514627570779, Reg:2.8854037961389265, Calibration:305.76741797292334, Accuracy:4573.099772135416, CI:0.4169215086646279, Clustering:3.647423452801174,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.3779245615005493,  km_loss:189.12875366210938, len_unique_t:421, curr_pop_nk, min:0.06674738973379135, max:0.18398813903331757, sum:0.9999997615814209, curr_post:[0.1837661  0.25260425]  curr_lik:[0.2028104  0.21647863], train_k:8, 

DEBUG:root:valid_calibration:301.34546654856103, best_calibration:237.01022221491885, valid_ci:0.4164118246687054,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 220 epochs:44, Train Loss: 2194.022705078125, Reg:1.3501653671264648, Calibration:173.4187774658203, Accuracy:2019.169677734375,  CI:0.3979517705233062, Clustering:1.4342827796936035Valid Loss:4877.79561882345, Reg:2.8848645524082017, Calibration:301.34546654856103, Accuracy:4572.303706764155, CI:0.4164118246687054, Clustering:4.146476077218341,  

DEBUG:root:pred_surv:0.3289245069026947,  emp_surv:0.3626796007156372,  km_loss:159.39407348632812, len_unique_t:431, curr_pop_nk, min:0.06303395330905914, max:0.18805615603923798, sum:0.9999997615814209, curr_post:[0.27684522 0.3140715 ]  curr_lik:[0.2160613  0.29285854], train_k:8, 

DEBUG:root:valid_calibration:297.51681466387885, best_calibration:237.01022221491885, valid_ci:0.4210453155407284,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 225 epochs:45, Train Loss: 2250.777099609375, Reg:1.3499269485473633, Calibration:145.04420471191406, Accuracy:2104.197265625,  CI:0.4358386711327888, Clustering:1.5357422828674316Valid Loss:4874.2634047809825, Reg:2.884365299828032, Calibration:297.51681466387885, Accuracy:4572.299533420139, CI:0.4210453155407284, Clustering:4.446930355495876,  

DEBUG:root:pred_surv:0.322589635848999,  emp_surv:0.2521020770072937,  km_loss:158.9371337890625, len_unique_t:423, curr_pop_nk, min:0.060715265572071075, max:0.1899580955505371, sum:0.9999997615814209, curr_post:[0.3332374  0.34382093]  curr_lik:[0.26992026 0.3222412 ], train_k:7, 

DEBUG:root:valid_calibration:302.1636049971621, best_calibration:237.01022221491885, valid_ci:0.41664349921230653,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 230 epochs:46, Train Loss: 2241.39208984375, Reg:1.3497103452682495, Calibration:159.8788604736328, Accuracy:2079.8291015625,  CI:0.43588843378193876, Clustering:1.6840629577636719Valid Loss:4878.92346504407, Reg:2.8839096044882746, Calibration:302.1636049971621, Accuracy:4572.145641359508, CI:0.41664349921230653, Clustering:4.614611976167075,  

DEBUG:root:pred_surv:0.29721924662590027,  emp_surv:0.37976598739624023,  km_loss:162.25064086914062, len_unique_t:422, curr_pop_nk, min:0.05942872539162636, max:0.19052597880363464, sum:0.9999997019767761, curr_post:[0.1870703  0.19297127]  curr_lik:[0.15263513 0.18583338], train_k:8, 

DEBUG:root:valid_calibration:298.2230227217715, best_calibration:237.01022221491885, valid_ci:0.42720785840051895,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 235 epochs:47, Train Loss: 2195.197265625, Reg:1.3495147228240967, Calibration:185.53143310546875, Accuracy:2008.040771484375,  CI:0.45255685335754675, Clustering:1.6250290870666504Valid Loss:4874.2023696247325, Reg:2.883497975830339, Calibration:298.2230227217715, Accuracy:4571.324014256143, CI:0.42720785840051895, Clustering:4.6552689666422005,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.2621394395828247,  km_loss:196.70587158203125, len_unique_t:422, curr_pop_nk, min:0.058786407113075256, max:0.1915181279182434, sum:0.9999997615814209, curr_post:[0.2099879  0.26879677]  curr_lik:[0.21737121 0.22319302], train_k:7, 

DEBUG:root:valid_calibration:308.41732840252735, best_calibration:237.01022221491885, valid_ci:0.41122231489203964,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 240 epochs:48, Train Loss: 2139.841552734375, Reg:1.3493356704711914, Calibration:177.41444396972656, Accuracy:1960.805419921875,  CI:0.4170579357759705, Clustering:1.6216528415679932Valid Loss:4882.918920272436, Reg:2.883125064719436, Calibration:308.41732840252735, Accuracy:4569.852388822115, CI:0.41122231489203964, Clustering:4.648740984435774,  

DEBUG:root:pred_surv:0.20158156752586365,  emp_surv:0.41019535064697266,  km_loss:195.67196655273438, len_unique_t:419, curr_pop_nk, min:0.05871986225247383, max:0.19137448072433472, sum:0.9999997615814209, curr_post:[0.19346623 0.26088798]  curr_lik:[0.2218783 0.2487879], train_k:6, 

DEBUG:root:valid_calibration:304.3524587256276, best_calibration:237.01022221491885, valid_ci:0.4209063108145677,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 245 epochs:49, Train Loss: 2117.1533203125, Reg:1.3491690158843994, Calibration:181.50949096679688, Accuracy:1934.0538330078125,  CI:0.40607838380273925, Clustering:1.590146780014038Valid Loss:4878.855648203792, Reg:2.88277329542698, Calibration:304.3524587256276, Accuracy:4569.8701255341875, CI:0.4209063108145677, Clustering:4.633273833837264,  

DEBUG:root:pred_surv:0.19181759655475616,  emp_surv:0.3484836220741272,  km_loss:209.33929443359375, len_unique_t:419, curr_pop_nk, min:0.058768630027770996, max:0.1912476271390915, sum:0.9999997615814209, curr_post:[0.21311052 0.3791509 ]  curr_lik:[0.20889886 0.30531907], train_k:8, 

DEBUG:root:valid_calibration:298.3166295239049, best_calibration:237.01022221491885, valid_ci:0.4196089333704013,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 250 epochs:50, Train Loss: 2111.27685546875, Reg:1.3490291833877563, Calibration:186.23548889160156, Accuracy:1923.43017578125,  CI:0.4402554313244251, Clustering:1.61100172996521Valid Loss:4872.521033653846, Reg:2.882493102652395, Calibration:298.3166295239049, Accuracy:4569.608248197115, CI:0.4196089333704013, Clustering:4.596345445029756,  

DEBUG:root:pred_surv:0.3686950206756592,  emp_surv:0.3607729971408844,  km_loss:143.7655792236328, len_unique_t:415, curr_pop_nk, min:0.05855468288064003, max:0.19167247414588928, sum:0.9999997615814209, curr_post:[0.18903185 0.32754   ]  curr_lik:[0.16325867 0.28995982], train_k:7, 

DEBUG:root:valid_calibration:301.29388662484973, best_calibration:237.01022221491885, valid_ci:0.41988694282272265,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 255 epochs:51, Train Loss: 2330.931396484375, Reg:1.348924160003662, Calibration:175.59080505371094, Accuracy:2153.73291015625,  CI:0.4266300060850556, Clustering:1.6077824831008911Valid Loss:4875.159108740651, Reg:2.882273023963993, Calibration:301.29388662484973, Accuracy:4569.316114115919, CI:0.41988694282272265, Clustering:4.548706560053377,  

DEBUG:root:pred_surv:0.25571149587631226,  emp_surv:0.32029274106025696,  km_loss:186.63714599609375, len_unique_t:422, curr_pop_nk, min:0.05895445868372917, max:0.191095232963562, sum:0.9999997615814209, curr_post:[0.27633575 0.30890697]  curr_lik:[0.21283773 0.2915429 ], train_k:7, 

DEBUG:root:valid_calibration:302.7754563551683, best_calibration:237.01022221491885, valid_ci:0.42781021221388194,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 260 epochs:52, Train Loss: 2216.712890625, Reg:1.3488413095474243, Calibration:158.42623901367188, Accuracy:2056.78466796875,  CI:0.4360445205479452, Clustering:1.5019737482070923Valid Loss:4877.176398904914, Reg:2.8821074555062838, Calibration:302.7754563551683, Accuracy:4569.9316823584395, CI:0.42781021221388194, Clustering:4.468881166898287,  

DEBUG:root:pred_surv:0.35597628355026245,  emp_surv:0.4816941022872925,  km_loss:148.3478240966797, len_unique_t:411, curr_pop_nk, min:0.05911162495613098, max:0.19076858460903168, sum:0.9999997019767761, curr_post:[0.24261153 0.28472206]  curr_lik:[0.24751218 0.25124988], train_k:8, 

DEBUG:root:valid_calibration:284.7513378175915, best_calibration:237.01022221491885, valid_ci:0.42252803261977573,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 265 epochs:53, Train Loss: 2257.913330078125, Reg:1.3488056659698486, Calibration:181.66079711914062, Accuracy:2074.717041015625,  CI:0.47772376053923293, Clustering:1.535456657409668Valid Loss:4860.072991786858, Reg:2.8820990497230463, Calibration:284.7513378175915, Accuracy:4570.927024906517, CI:0.42252803261977573, Clustering:4.39443292780819,  

DEBUG:root:pred_surv:0.34511426091194153,  emp_surv:0.32676658034324646,  km_loss:152.99813842773438, len_unique_t:418, curr_pop_nk, min:0.05929127708077431, max:0.19012528657913208, sum:0.9999997615814209, curr_post:[0.21570648 0.23511553]  curr_lik:[0.17284219 0.2619155 ], train_k:8, 

DEBUG:root:valid_calibration:287.3111627040765, best_calibration:237.01022221491885, valid_ci:0.4266518394958762,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 270 epochs:54, Train Loss: 2287.271240234375, Reg:1.3489023447036743, Calibration:196.81373596191406, Accuracy:2088.92724609375,  CI:0.4271931475903614, Clustering:1.5301605463027954Valid Loss:4864.0595786591875, Reg:2.8823125056731396, Calibration:287.3111627040765, Accuracy:4572.452903812767, CI:0.4266518394958762, Clustering:4.295584483024402,  

DEBUG:root:pred_surv:0.2009321004152298,  emp_surv:0.3241291046142578,  km_loss:201.92156982421875, len_unique_t:428, curr_pop_nk, min:0.05917153134942055, max:0.18973900377750397, sum:0.9999998211860657, curr_post:[0.17299487 0.186642  ]  curr_lik:[0.16137515 0.21487008], train_k:8, 

DEBUG:root:valid_calibration:291.3340381068042, best_calibration:237.01022221491885, valid_ci:0.42623482531739415,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 275 epochs:55, Train Loss: 2435.633056640625, Reg:1.348991870880127, Calibration:221.00863647460938, Accuracy:2213.14599609375,  CI:0.43481221832749123, Clustering:1.4786337614059448Valid Loss:4866.8703258547, Reg:2.8824984517871823, Calibration:291.3340381068042, Accuracy:4571.2739341279375, CI:0.42623482531739415, Clustering:4.262134560153015,  

DEBUG:root:pred_surv:0.15819454193115234,  emp_surv:0.40246549248695374,  km_loss:193.77133178710938, len_unique_t:423, curr_pop_nk, min:0.05952080711722374, max:0.18900062143802643, sum:0.9999998211860657, curr_post:[0.22132291 0.22874053]  curr_lik:[0.16974275 0.23610558], train_k:8, 

DEBUG:root:valid_calibration:291.7048788478232, best_calibration:237.01022221491885, valid_ci:0.41872857010471687,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 280 epochs:56, Train Loss: 2300.404296875, Reg:1.3490644693374634, Calibration:173.25851440429688, Accuracy:2125.70703125,  CI:0.4806894818414108, Clustering:1.4386475086212158Valid Loss:4866.858849158653, Reg:2.882640331219404, Calibration:291.7048788478232, Accuracy:4570.984408386752, CI:0.41872857010471687, Clustering:4.169869117247752,  

DEBUG:root:pred_surv:0.38703030347824097,  emp_surv:0.23772041499614716,  km_loss:136.06781005859375, len_unique_t:418, curr_pop_nk, min:0.05962572991847992, max:0.1891147345304489, sum:0.9999997615814209, curr_post:[0.19016878 0.2854249 ]  curr_lik:[0.14311077 0.2522876 ], train_k:6, 

DEBUG:root:valid_calibration:289.74552643604767, best_calibration:237.01022221491885, valid_ci:0.42002594754888334,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 285 epochs:57, Train Loss: 2124.192138671875, Reg:1.3491318225860596, Calibration:177.6837921142578, Accuracy:1945.171142578125,  CI:0.40783659482369916, Clustering:1.3371546268463135Valid Loss:4864.613590077457, Reg:2.8827929089212008, Calibration:289.74552643604767, Accuracy:4570.737137753739, CI:0.42002594754888334, Clustering:4.130813046398326,  

DEBUG:root:pred_surv:0.18540921807289124,  emp_surv:0.3171049952507019,  km_loss:201.1155242919922, len_unique_t:416, curr_pop_nk, min:0.059889841824769974, max:0.1882697343826294, sum:0.9999997019767761, curr_post:[0.27411315 0.31674594]  curr_lik:[0.21509077 0.3046709 ], train_k:8, 

DEBUG:root:valid_calibration:282.65830798026843, best_calibration:237.01022221491885, valid_ci:0.4269761838569178,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 290 epochs:58, Train Loss: 2261.302490234375, Reg:1.3491982221603394, Calibration:242.8444366455078, Accuracy:2017.037841796875,  CI:0.415494103294022, Clustering:1.420170545578003Valid Loss:4856.149526742788, Reg:2.8829274014530015, Calibration:282.65830798026843, Accuracy:4569.412101028312, CI:0.4269761838569178, Clustering:4.078757559132372,  

DEBUG:root:pred_surv:0.13571108877658844,  emp_surv:0.356594443321228,  km_loss:207.01182556152344, len_unique_t:406, curr_pop_nk, min:0.060050118714571, max:0.18806205689907074, sum:0.9999997019767761, curr_post:[0.22914259 0.37027445]  curr_lik:[0.20963386 0.2977    ], train_k:7, 

DEBUG:root:valid_calibration:285.739507430639, best_calibration:237.01022221491885, valid_ci:0.41956259846168104,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 295 epochs:59, Train Loss: 2020.11474609375, Reg:1.3492728471755981, Calibration:212.86253356933594, Accuracy:1805.85888671875,  CI:0.41486946651532347, Clustering:1.3932642936706543Valid Loss:4858.328533987713, Reg:2.883102139856061, Calibration:285.739507430639, Accuracy:4568.585257244925, CI:0.41956259846168104, Clustering:4.004456039167876,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.338723361492157,  km_loss:245.0332489013672, len_unique_t:411, curr_pop_nk, min:0.060152582824230194, max:0.18796685338020325, sum:0.9999997615814209, curr_post:[0.19579116 0.21266828]  curr_lik:[0.1665366  0.20068689], train_k:7, 

DEBUG:root:valid_calibration:289.4574352818676, best_calibration:237.01022221491885, valid_ci:0.41789454174775276,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 300 epochs:60, Train Loss: 2216.341064453125, Reg:1.3493716716766357, Calibration:228.62838745117188, Accuracy:1986.428955078125,  CI:0.4662752427776198, Clustering:1.283572793006897Valid Loss:4861.95569160657, Reg:2.8833140674819293, Calibration:289.4574352818676, Accuracy:4568.538828792734, CI:0.41789454174775276, Clustering:3.959578836066091,  

DEBUG:root:ITER:300, Train CI:0.43836434185653167, Clustering:1.3983232975006104,Reg:1.3493911027908325, Accuracy:2011.19287109375, Calibration:218.94728088378906, Cost:2231.53857421875
DEBUG:root:pred_surv:0.2658112645149231,  emp_surv:0.4513225257396698,  km_loss:186.196533203125, len_unique_t:423, curr_pop_nk, min:0.06040515750646591, max:0.18721331655979156, sum:0.9999997615814209, curr_post:[0.20088509 0.21444045]  curr_lik:[0.18251927 0.26093814], train_k:6, 

DEBUG:root:valid_calibration:286.92943214351294, best_calibration:237.01022221491885, valid_ci:0.4226670373459364,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 305 epochs:61, Train Loss: 2150.854736328125, Reg:1.3494597673416138, Calibration:233.091064453125, Accuracy:1916.417724609375,  CI:0.42768656206590305, Clustering:1.3458632230758667Valid Loss:4858.951405582265, Reg:2.8834974663889303, Calibration:286.92943214351294, Accuracy:4568.106366018964, CI:0.4226670373459364, Clustering:3.915345057463034,  

DEBUG:root:pred_surv:0.0646182969212532,  emp_surv:0.4259217381477356,  km_loss:222.92884826660156, len_unique_t:416, curr_pop_nk, min:0.06030511111021042, max:0.1875908076763153, sum:0.9999997615814209, curr_post:[0.22198331 0.36998278]  curr_lik:[0.22117466 0.30023983], train_k:7, 

DEBUG:root:valid_calibration:286.9894891722589, best_calibration:237.01022221491885, valid_ci:0.41321471596700954,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 310 epochs:62, Train Loss: 1980.6807861328125, Reg:1.3495367765426636, Calibration:169.3556365966797, Accuracy:1809.95751953125,  CI:0.43044241415005174, Clustering:1.3676837682724Valid Loss:4858.598236344818, Reg:2.883654629063402, Calibration:286.9894891722589, Accuracy:4567.740155081464, CI:0.41321471596700954, Clustering:3.8680887629843164,  

DEBUG:root:pred_surv:0.17538779973983765,  emp_surv:0.2617783546447754,  km_loss:212.79319763183594, len_unique_t:418, curr_pop_nk, min:0.060448531061410904, max:0.18693317472934723, sum:0.9999996423721313, curr_post:[0.25912142 0.2614909 ]  curr_lik:[0.20049888 0.24992782], train_k:8, 

DEBUG:root:valid_calibration:289.73003941723425, best_calibration:237.01022221491885, valid_ci:0.41428041886757483,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 315 epochs:63, Train Loss: 2364.16015625, Reg:1.3495986461639404, Calibration:213.7388458251953, Accuracy:2149.08740234375,  CI:0.4538229713137627, Clustering:1.3341034650802612Valid Loss:4860.503889556624, Reg:2.8837758761185865, Calibration:289.73003941723425, Accuracy:4566.937829694177, CI:0.41428041886757483, Clustering:3.836041077589377,  

DEBUG:root:pred_surv:0.20833787322044373,  emp_surv:0.3001544773578644,  km_loss:193.2285919189453, len_unique_t:425, curr_pop_nk, min:0.060650914907455444, max:0.18673890829086304, sum:0.9999996423721313, curr_post:[0.19340354 0.29485208]  curr_lik:[0.17751472 0.26577637], train_k:7, 

DEBUG:root:valid_calibration:292.54222119975293, best_calibration:237.01022221491885, valid_ci:0.4099712723565935,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 320 epochs:64, Train Loss: 2319.128173828125, Reg:1.3496410846710205, Calibration:185.59254455566406, Accuracy:2132.2138671875,  CI:0.449704843412911, Clustering:1.3217828273773193Valid Loss:4861.827361278045, Reg:2.8838691038963122, Calibration:292.54222119975293, Accuracy:4565.493330996261, CI:0.4099712723565935, Clustering:3.792121114893856,  

DEBUG:root:pred_surv:0.2647652328014374,  emp_surv:0.32995912432670593,  km_loss:159.981689453125, len_unique_t:421, curr_pop_nk, min:0.06074576452374458, max:0.1868237406015396, sum:0.9999997019767761, curr_post:[0.21686594 0.45473552]  curr_lik:[0.20693304 0.3804181 ], train_k:8, 

DEBUG:root:valid_calibration:290.6146579318576, best_calibration:237.01022221491885, valid_ci:0.4165508293948661,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 325 epochs:65, Train Loss: 2154.041259765625, Reg:1.3496958017349243, Calibration:181.83828735351562, Accuracy:1970.890869140625,  CI:0.4380163623906823, Clustering:1.3120144605636597Valid Loss:4859.669742421207, Reg:2.883990350951496, Calibration:290.6146579318576, Accuracy:4565.306052183493, CI:0.4165508293948661, Clustering:3.7488575674529767,  

DEBUG:root:pred_surv:0.36829936504364014,  emp_surv:0.3292401432991028,  km_loss:135.4879608154297, len_unique_t:405, curr_pop_nk, min:0.06116276979446411, max:0.18591538071632385, sum:0.9999998211860657, curr_post:[0.25886542 0.27015415]  curr_lik:[0.20950496 0.24760255], train_k:8, 

DEBUG:root:valid_calibration:294.96683626093414, best_calibration:237.01022221491885, valid_ci:0.4131683810582893,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 330 epochs:66, Train Loss: 2182.797119140625, Reg:1.3497570753097534, Calibration:211.4258575439453, Accuracy:1970.1346435546875,  CI:0.423963133640553, Clustering:1.236489176750183Valid Loss:4862.595778245192, Reg:2.8841253529247055, Calibration:294.96683626093414, Accuracy:4563.945542033921, CI:0.4131683810582893, Clustering:3.683485027052398,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.3499595522880554,  km_loss:176.478515625, len_unique_t:401, curr_pop_nk, min:0.06115904077887535, max:0.1858072727918625, sum:0.9999997615814209, curr_post:[0.19810964 0.20943554]  curr_lik:[0.15212691 0.22098763], train_k:8, 

DEBUG:root:valid_calibration:292.2484243017995, best_calibration:237.01022221491885, valid_ci:0.4148827726809378,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 335 epochs:67, Train Loss: 2129.242919921875, Reg:1.3498289585113525, Calibration:189.3505096435547, Accuracy:1938.668701171875,  CI:0.41703041954087977, Clustering:1.223699927330017Valid Loss:4859.186156183227, Reg:2.8842845533648105, Calibration:292.2484243017995, Accuracy:4563.263721955128, CI:0.4148827726809378, Clustering:3.6736512795472755,  

DEBUG:root:pred_surv:0.16768676042556763,  emp_surv:0.37668362259864807,  km_loss:190.89537048339844, len_unique_t:417, curr_pop_nk, min:0.06125835329294205, max:0.1850789189338684, sum:0.9999998807907104, curr_post:[0.18580018 0.23423226]  curr_lik:[0.18878794 0.20660967], train_k:7, 

DEBUG:root:valid_calibration:298.2281741932926, best_calibration:237.01022221491885, valid_ci:0.4131220461495691,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 340 epochs:68, Train Loss: 2264.083740234375, Reg:1.3499200344085693, Calibration:164.80674743652344, Accuracy:2098.0322265625,  CI:0.4517018365739397, Clustering:1.2449589967727661Valid Loss:4863.55721237313, Reg:2.8844901129730744, Calibration:298.2281741932926, Accuracy:4561.702891292734, CI:0.4131220461495691, Clustering:3.6261150470146766,  

DEBUG:root:pred_surv:0.11430193483829498,  emp_surv:0.32012537121772766,  km_loss:219.01397705078125, len_unique_t:420, curr_pop_nk, min:0.06138450652360916, max:0.1855800598859787, sum:0.9999998211860657, curr_post:[0.25980142 0.4139677 ]  curr_lik:[0.2471678  0.34449232], train_k:8, 

DEBUG:root:valid_calibration:297.8113288553352, best_calibration:237.01022221491885, valid_ci:0.4136317301454916,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 345 epochs:69, Train Loss: 2295.30810546875, Reg:1.350036382675171, Calibration:251.53225708007812, Accuracy:2042.580322265625,  CI:0.45483091288450017, Clustering:1.1955116987228394Valid Loss:4861.820057926015, Reg:2.884743305353018, Calibration:297.8113288553352, Accuracy:4560.431064703525, CI:0.4136317301454916, Clustering:3.577505676155416,  

DEBUG:root:pred_surv:0.15235871076583862,  emp_surv:0.29974570870399475,  km_loss:166.7796630859375, len_unique_t:405, curr_pop_nk, min:0.06166153773665428, max:0.18550169467926025, sum:0.9999997615814209, curr_post:[0.19459668 0.1953159 ]  curr_lik:[0.16633093 0.251332  ], train_k:7, 

DEBUG:root:valid_calibration:293.4341756706564, best_calibration:237.01022221491885, valid_ci:0.4109906403484385,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 350 epochs:70, Train Loss: 2217.440185546875, Reg:1.3501522541046143, Calibration:190.76040649414062, Accuracy:2025.428955078125,  CI:0.41939927130542964, Clustering:1.250789761543274Valid Loss:4855.878259381677, Reg:2.8849906391567655, Calibration:293.4341756706564, Accuracy:4558.913010817308, CI:0.4109906403484385, Clustering:3.531511013324444,  

DEBUG:root:pred_surv:0.16657015681266785,  emp_surv:0.3904265761375427,  km_loss:193.17843627929688, len_unique_t:421, curr_pop_nk, min:0.0618409588932991, max:0.18431691825389862, sum:0.9999998807907104, curr_post:[0.23486929 0.35400876]  curr_lik:[0.21522982 0.28450137], train_k:7, 

DEBUG:root:valid_calibration:299.4062309591179, best_calibration:237.01022221491885, valid_ci:0.41284403669724773,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 355 epochs:71, Train Loss: 2035.827392578125, Reg:1.3502675294876099, Calibration:201.31692504882812, Accuracy:1833.341796875,  CI:0.4547656953000623, Clustering:1.1687272787094116Valid Loss:4860.108986879006, Reg:2.8852389918433294, Calibration:299.4062309591179, Accuracy:4557.212373130342, CI:0.41284403669724773, Clustering:3.4903975633474493,  

DEBUG:root:pred_surv:0.1283838152885437,  emp_surv:0.36428067088127136,  km_loss:204.458740234375, len_unique_t:410, curr_pop_nk, min:0.062108784914016724, max:0.1839875876903534, sum:0.9999998211860657, curr_post:[0.16929694 0.18120089]  curr_lik:[0.16939235 0.17705995], train_k:7, 

DEBUG:root:valid_calibration:301.780276828342, best_calibration:237.01022221491885, valid_ci:0.41085163562227783,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 360 epochs:72, Train Loss: 2209.865966796875, Reg:1.3503903150558472, Calibration:218.2387237548828, Accuracy:1990.420166015625,  CI:0.4001375831231369, Clustering:1.2069576978683472Valid Loss:4859.82937282986, Reg:2.885507722186227, Calibration:301.780276828342, Accuracy:4554.594121427617, CI:0.41085163562227783, Clustering:3.455099132325914,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.1848427951335907,  km_loss:244.3043212890625, len_unique_t:415, curr_pop_nk, min:0.062289364635944366, max:0.18425585329532623, sum:0.9999997615814209, curr_post:[0.22832267 0.3566641 ]  curr_lik:[0.17788373 0.34208876], train_k:7, 

DEBUG:root:valid_calibration:302.7825966859475, best_calibration:237.01022221491885, valid_ci:0.4086275600037068,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 365 epochs:73, Train Loss: 2207.60400390625, Reg:1.3505194187164307, Calibration:239.79942321777344, Accuracy:1966.657958984375,  CI:0.41701743173854594, Clustering:1.1466403007507324Valid Loss:4859.181982839209, Reg:2.885778490294758, Calibration:302.7825966859475, Accuracy:4552.984253973023, CI:0.4086275600037068, Clustering:3.4152974939753866,  

DEBUG:root:pred_surv:0.09699000418186188,  emp_surv:0.3140605688095093,  km_loss:213.09225463867188, len_unique_t:410, curr_pop_nk, min:0.06245192140340805, max:0.18415988981723785, sum:0.9999997615814209, curr_post:[0.23712903 0.2840848 ]  curr_lik:[0.2395429 0.2452039], train_k:7, 

DEBUG:root:valid_calibration:304.88615769606366, best_calibration:237.01022221491885, valid_ci:0.4138170697803725,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 370 epochs:74, Train Loss: 2103.52197265625, Reg:1.3506479263305664, Calibration:244.01123046875, Accuracy:1858.357421875,  CI:0.4350245692972589, Clustering:1.1534006595611572Valid Loss:4857.688969017094, Reg:2.8860528244931474, Calibration:304.88615769606366, Accuracy:4549.4233481904375, CI:0.4138170697803725, Clustering:3.3793174303494964,  

DEBUG:root:pred_surv:0.22155268490314484,  emp_surv:0.35799017548561096,  km_loss:189.85755920410156, len_unique_t:410, curr_pop_nk, min:0.06255017966032028, max:0.18370279669761658, sum:0.9999997615814209, curr_post:[0.20084836 0.40240827]  curr_lik:[0.18902543 0.33156002], train_k:7, 

DEBUG:root:valid_calibration:304.42311213566705, best_calibration:237.01022221491885, valid_ci:0.4215086646279307,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 375 epochs:75, Train Loss: 2253.9462890625, Reg:1.3507813215255737, Calibration:170.26638793945312, Accuracy:2082.552734375,  CI:0.4310304559043348, Clustering:1.1270934343338013Valid Loss:4855.937729533921, Reg:2.8863391305646324, Calibration:304.42311213566705, Accuracy:4548.141088241186, CI:0.4215086646279307, Clustering:3.372932601178813,  

DEBUG:root:pred_surv:0.18715570867061615,  emp_surv:0.4037765860557556,  km_loss:157.5304412841797, len_unique_t:423, curr_pop_nk, min:0.062494341284036636, max:0.18383313715457916, sum:0.9999997615814209, curr_post:[0.18652081 0.23729472]  curr_lik:[0.2029883  0.24245611], train_k:8, 

DEBUG:root:valid_calibration:302.53966241820245, best_calibration:237.01022221491885, valid_ci:0.41492910758965806,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 380 epochs:76, Train Loss: 2379.920166015625, Reg:1.3509200811386108, Calibration:169.82391357421875, Accuracy:2208.956787109375,  CI:0.44408580901565553, Clustering:1.1393742561340332Valid Loss:4851.031963641826, Reg:2.886668739155826, Calibration:302.53966241820245, Accuracy:4545.138367220887, CI:0.41492910758965806, Clustering:3.3539696636362972,  

DEBUG:root:pred_surv:0.2851933538913727,  emp_surv:0.33759447932243347,  km_loss:159.05079650878906, len_unique_t:407, curr_pop_nk, min:0.06253248453140259, max:0.18402312695980072, sum:0.9999997615814209, curr_post:[0.2061945  0.41423118]  curr_lik:[0.19547562 0.34284687], train_k:7, 

DEBUG:root:valid_calibration:301.4092078575721, best_calibration:237.01022221491885, valid_ci:0.4135853952367714,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 385 epochs:77, Train Loss: 2112.686767578125, Reg:1.3511170148849487, Calibration:141.80653381347656, Accuracy:1969.7772216796875,  CI:0.4245370585232283, Clustering:1.10311758518219Valid Loss:4848.258776542468, Reg:2.8870869905520706, Calibration:301.4092078575721, Accuracy:4543.535803118322, CI:0.4135853952367714, Clustering:3.313435703261286,  

DEBUG:root:pred_surv:0.14284323155879974,  emp_surv:0.4080382287502289,  km_loss:211.39794921875, len_unique_t:416, curr_pop_nk, min:0.06266570091247559, max:0.18304091691970825, sum:0.9999998211860657, curr_post:[0.1953481  0.29276705]  curr_lik:[0.14647783 0.2700281 ], train_k:7, 

DEBUG:root:valid_calibration:298.1993846404247, best_calibration:237.01022221491885, valid_ci:0.41428041886757483,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 390 epochs:78, Train Loss: 2188.997802734375, Reg:1.3513147830963135, Calibration:193.70703125, Accuracy:1994.171875,  CI:0.4417321163234982, Clustering:1.1189919710159302Valid Loss:4845.248752170139, Reg:2.8875042230654984, Calibration:298.1993846404247, Accuracy:4543.771597055288, CI:0.41428041886757483, Clustering:3.2779984494559784,  

DEBUG:root:pred_surv:0.10479708760976791,  emp_surv:0.2696771025657654,  km_loss:200.3086700439453, len_unique_t:406, curr_pop_nk, min:0.06274322420358658, max:0.18267954885959625, sum:0.9999998807907104, curr_post:[0.22159939 0.2588823 ]  curr_lik:[0.18779567 0.2653135 ], train_k:7, 

DEBUG:root:valid_calibration:292.1969095865885, best_calibration:237.01022221491885, valid_ci:0.4255861365953109,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 395 epochs:79, Train Loss: 2126.8154296875, Reg:1.351516604423523, Calibration:219.97076416015625, Accuracy:1905.754150390625,  CI:0.4029186962130109, Clustering:1.0905113220214844Valid Loss:4838.169717381143, Reg:2.887946672928639, Calibration:292.1969095865885, Accuracy:4542.736607739049, CI:0.4255861365953109, Clustering:3.236585447930882,  

DEBUG:root:pred_surv:0.160135418176651,  emp_surv:0.36773017048835754,  km_loss:207.19219970703125, len_unique_t:421, curr_pop_nk, min:0.06282173097133636, max:0.18231737613677979, sum:0.9999997615814209, curr_post:[0.18509601 0.20829847]  curr_lik:[0.15501077 0.19019885], train_k:8, 

DEBUG:root:valid_calibration:294.4744142711672, best_calibration:237.01022221491885, valid_ci:0.41729218793438977,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 400 epochs:80, Train Loss: 2341.748046875, Reg:1.3517194986343384, Calibration:205.02267456054688, Accuracy:2135.62548828125,  CI:0.4307232044543245, Clustering:1.0999534130096436Valid Loss:4838.601658486912, Reg:2.888373584828825, Calibration:294.4744142711672, Accuracy:4540.921724759615, CI:0.41729218793438977, Clustering:3.2057963375352383,  

DEBUG:root:ITER:400, Train CI:0.4470549377958824, Clustering:1.0580962896347046,Reg:1.3517588376998901, Accuracy:2012.464111328125, Calibration:189.3616485595703, Cost:2202.8837890625
DEBUG:root:pred_surv:0.20433558523654938,  emp_surv:0.4187147915363312,  km_loss:181.82164001464844, len_unique_t:416, curr_pop_nk, min:0.06295879185199738, max:0.1817295104265213, sum:0.9999997615814209, curr_post:[0.18869616 0.23339255]  curr_lik:[0.17964444 0.1978536 ], train_k:8, 

DEBUG:root:valid_calibration:292.662596091246, best_calibration:237.01022221491885, valid_ci:0.4228060420720971,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 405 epochs:81, Train Loss: 2191.207275390625, Reg:1.3519467115402222, Calibration:202.90394592285156, Accuracy:1987.220703125,  CI:0.42274011629264646, Clustering:1.0825930833816528Valid Loss:4837.187938201121, Reg:2.888882262075049, Calibration:292.662596091246, Accuracy:4541.349492521367, CI:0.4228060420720971, Clustering:3.176107365860898,  

DEBUG:root:pred_surv:0.16543211042881012,  emp_surv:0.30746567249298096,  km_loss:195.87095642089844, len_unique_t:412, curr_pop_nk, min:0.06318565458059311, max:0.18164417147636414, sum:0.9999997615814209, curr_post:[0.23921023 0.3872949 ]  curr_lik:[0.22704905 0.32145992], train_k:6, 

DEBUG:root:valid_calibration:293.1029164892995, best_calibration:237.01022221491885, valid_ci:0.43017329255861364,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 410 epochs:82, Train Loss: 2274.6806640625, Reg:1.3522018194198608, Calibration:164.4359130859375, Accuracy:2109.16943359375,  CI:0.4615659139124056, Clustering:1.0752849578857422Valid Loss:4837.347568609775, Reg:2.8894431570656276, Calibration:293.1029164892995, Accuracy:4541.125175280448, CI:0.43017329255861364, Clustering:3.119535935230744,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.3012692630290985,  km_loss:225.6710968017578, len_unique_t:419, curr_pop_nk, min:0.06332755088806152, max:0.18158696591854095, sum:0.9999997615814209, curr_post:[0.23399512 0.2798738 ]  curr_lik:[0.22053583 0.22682875], train_k:7, 

DEBUG:root:valid_calibration:293.18439451038324, best_calibration:237.01022221491885, valid_ci:0.43026596237605413,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 415 epochs:83, Train Loss: 2305.547607421875, Reg:1.3525019884109497, Calibration:222.36270141601562, Accuracy:2082.100830078125,  CI:0.41523738503604274, Clustering:1.0838944911956787Valid Loss:4837.513980702457, Reg:2.8901148555625196, Calibration:293.18439451038324, Accuracy:4541.222205528846, CI:0.43026596237605413, Clustering:3.1076779222895956,  

DEBUG:root:pred_surv:0.07546863704919815,  emp_surv:0.2597477436065674,  km_loss:195.6273956298828, len_unique_t:417, curr_pop_nk, min:0.06365958601236343, max:0.18088029325008392, sum:0.9999997019767761, curr_post:[0.1855252  0.19446729]  curr_lik:[0.15127167 0.19565763], train_k:8, 

DEBUG:root:valid_calibration:289.4061814006577, best_calibration:237.01022221491885, valid_ci:0.42896858493188766,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 420 epochs:84, Train Loss: 2250.984619140625, Reg:1.3528372049331665, Calibration:208.08319091796875, Accuracy:2041.875,  CI:0.4685189649630344, Clustering:1.0263102054595947Valid Loss:4833.442883613782, Reg:2.890807186436449, Calibration:289.4061814006577, Accuracy:4540.985889923878, CI:0.42896858493188766, Clustering:3.050379264049041,  

DEBUG:root:pred_surv:0.25822851061820984,  emp_surv:0.3741872012615204,  km_loss:169.84939575195312, len_unique_t:414, curr_pop_nk, min:0.06378253549337387, max:0.18041275441646576, sum:0.9999997019767761, curr_post:[0.22938871 0.2783022 ]  curr_lik:[0.20179015 0.27858618], train_k:7, 

DEBUG:root:valid_calibration:287.020267584385, best_calibration:237.01022221491885, valid_ci:0.43156333982022055,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 425 epochs:85, Train Loss: 2120.48681640625, Reg:1.3531253337860107, Calibration:175.0758056640625, Accuracy:1944.3909912109375,  CI:0.4715737255499228, Clustering:1.020110845565796Valid Loss:4829.526721921741, Reg:2.891414695315891, Calibration:287.020267584385, Accuracy:4539.487659421741, CI:0.43156333982022055, Clustering:3.0185862993582697,  

DEBUG:root:pred_surv:0.29604682326316833,  emp_surv:0.3894594609737396,  km_loss:155.822265625, len_unique_t:418, curr_pop_nk, min:0.06413612514734268, max:0.17950551211833954, sum:0.9999997615814209, curr_post:[0.15835366 0.18808317]  curr_lik:[0.14293842 0.17339717], train_k:7, 

DEBUG:root:valid_calibration:288.85536519890155, best_calibration:237.01022221491885, valid_ci:0.4314706700027801,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 430 epochs:86, Train Loss: 2155.503173828125, Reg:1.3534079790115356, Calibration:162.3319854736328, Accuracy:1992.146240234375,  CI:0.4584450402144772, Clustering:1.0249850749969482Valid Loss:4829.126080896101, Reg:2.8920168550605445, Calibration:288.85536519890155, Accuracy:4537.2877854567305, CI:0.4314706700027801, Clustering:2.982374439891587,  

DEBUG:root:pred_surv:0.18511007726192474,  emp_surv:0.43786779046058655,  km_loss:209.23043823242188, len_unique_t:412, curr_pop_nk, min:0.06430873274803162, max:0.17912530899047852, sum:0.9999998211860657, curr_post:[0.15047854 0.38219717]  curr_lik:[0.13516834 0.35092875], train_k:7, 

DEBUG:root:valid_calibration:284.50504531208264, best_calibration:237.01022221491885, valid_ci:0.4314706700027801,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 435 epochs:87, Train Loss: 2082.42578125, Reg:1.353684902191162, Calibration:172.70379638671875, Accuracy:1908.7305908203125,  CI:0.4158261624492506, Clustering:0.9913554787635803Valid Loss:4822.663136017628, Reg:2.8926070429321027, Calibration:284.50504531208264, Accuracy:4535.205808460203, CI:0.4314706700027801, Clustering:2.9524928993648953,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.20247745513916016,  km_loss:178.82493591308594, len_unique_t:418, curr_pop_nk, min:0.06420188397169113, max:0.17912377417087555, sum:0.9999997615814209, curr_post:[0.17209277 0.18401591]  curr_lik:[0.16753916 0.20549983], train_k:8, 

DEBUG:root:valid_calibration:289.79166144998663, best_calibration:237.01022221491885, valid_ci:0.4305439718283755,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 440 epochs:88, Train Loss: 2291.1826171875, Reg:1.3539917469024658, Calibration:176.57989501953125, Accuracy:2113.59814453125,  CI:0.4657345862938345, Clustering:1.0047147274017334Valid Loss:4826.040414663461, Reg:2.8932998832474404, Calibration:289.79166144998663, Accuracy:4533.334585336538, CI:0.4305439718283755, Clustering:2.9141525936941814,  

DEBUG:root:pred_surv:0.21966639161109924,  emp_surv:0.407670259475708,  km_loss:168.3917694091797, len_unique_t:407, curr_pop_nk, min:0.06441545486450195, max:0.17909790575504303, sum:0.9999998211860657, curr_post:[0.16422357 0.17629214]  curr_lik:[0.17385478 0.19170624], train_k:7, 

DEBUG:root:valid_calibration:283.8887271718082, best_calibration:237.01022221491885, valid_ci:0.43601149105736264,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 445 epochs:89, Train Loss: 2068.35595703125, Reg:1.3543610572814941, Calibration:166.7661895751953, Accuracy:1900.5855712890625,  CI:0.447024416182922, Clustering:1.004209041595459Valid Loss:4820.041754306891, Reg:2.894090536313179, Calibration:283.8887271718082, Accuracy:4533.270941840277, CI:0.43601149105736264, Clustering:2.881977802667862,  

DEBUG:root:pred_surv:0.254228413105011,  emp_surv:0.3927818238735199,  km_loss:186.9879150390625, len_unique_t:420, curr_pop_nk, min:0.06453002244234085, max:0.17836110293865204, sum:0.9999998211860657, curr_post:[0.26679644 0.34583867]  curr_lik:[0.22040826 0.32429218], train_k:8, 

DEBUG:root:valid_calibration:276.48143279246796, best_calibration:237.01022221491885, valid_ci:0.43902326012417753,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 450 epochs:90, Train Loss: 2238.072265625, Reg:1.354712963104248, Calibration:191.5657958984375, Accuracy:2045.541015625,  CI:0.39244312834285977, Clustering:0.9653820991516113Valid Loss:4810.423239683493, Reg:2.8948361038142796, Calibration:276.48143279246796, Accuracy:4531.08150123531, CI:0.43902326012417753, Clustering:2.860132190916273,  

DEBUG:root:pred_surv:0.34370675683021545,  emp_surv:0.3309766352176666,  km_loss:152.02377319335938, len_unique_t:428, curr_pop_nk, min:0.06473970413208008, max:0.17758527398109436, sum:0.9999998807907104, curr_post:[0.18431449 0.19145945]  curr_lik:[0.16892855 0.19114408], train_k:7, 

DEBUG:root:valid_calibration:276.84552445370923, best_calibration:237.01022221491885, valid_ci:0.439718283754981,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 455 epochs:91, Train Loss: 2122.5146484375, Reg:1.3550454378128052, Calibration:160.98255920410156, Accuracy:1960.589599609375,  CI:0.4688372742506051, Clustering:0.9422748684883118Valid Loss:4810.858310797275, Reg:2.8955274158053927, Calibration:276.84552445370923, Accuracy:4531.190529847756, CI:0.439718283754981, Clustering:2.8222758545834794,  

DEBUG:root:pred_surv:0.20130865275859833,  emp_surv:0.26684850454330444,  km_loss:182.31439208984375, len_unique_t:422, curr_pop_nk, min:0.06478193402290344, max:0.1774226725101471, sum:0.9999997615814209, curr_post:[0.16570924 0.32530302]  curr_lik:[0.1401467  0.32449818], train_k:8, 

DEBUG:root:valid_calibration:281.2862233218984, best_calibration:237.01022221491885, valid_ci:0.43559447687888053,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 460 epochs:92, Train Loss: 2056.127685546875, Reg:1.3553599119186401, Calibration:164.08677673339844, Accuracy:1891.108154296875,  CI:0.44574066302979437, Clustering:0.9327659010887146Valid Loss:4813.040969718216, Reg:2.896199369022989, Calibration:281.2862233218984, Accuracy:4528.954660790598, CI:0.43559447687888053, Clustering:2.800286325634035,  

DEBUG:root:pred_surv:0.1412663757801056,  emp_surv:0.32259616255760193,  km_loss:154.16094970703125, len_unique_t:414, curr_pop_nk, min:0.06506790965795517, max:0.17729128897190094, sum:0.9999997615814209, curr_post:[0.21494536 0.29090157]  curr_lik:[0.2094445  0.23353513], train_k:7, 

DEBUG:root:valid_calibration:275.11120657635547, best_calibration:237.01022221491885, valid_ci:0.4344361041608748,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 465 epochs:93, Train Loss: 2056.07470703125, Reg:1.3556785583496094, Calibration:140.9562530517578, Accuracy:1914.173828125,  CI:0.487453258389972, Clustering:0.9446650743484497Valid Loss:4802.636823083601, Reg:2.8968891526898766, Calibration:275.11120657635547, Accuracy:4524.7552333733975, CI:0.4344361041608748, Clustering:2.770651100028274,  

DEBUG:root:pred_surv:0.0853702649474144,  emp_surv:0.1855880171060562,  km_loss:194.66331481933594, len_unique_t:409, curr_pop_nk, min:0.06505228579044342, max:0.1767043173313141, sum:0.9999998211860657, curr_post:[0.18372236 0.3389874 ]  curr_lik:[0.142985  0.3192792], train_k:7, 

DEBUG:root:valid_calibration:268.5684953999315, best_calibration:237.01022221491885, valid_ci:0.44384209063108143,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 470 epochs:94, Train Loss: 2130.79638671875, Reg:1.355995774269104, Calibration:185.80418395996094, Accuracy:1944.0667724609375,  CI:0.40364238410596026, Clustering:0.9254257678985596Valid Loss:4793.7580336872325, Reg:2.8975580492590227, Calibration:268.5684953999315, Accuracy:4522.437984107905, CI:0.44384209063108143, Clustering:2.751477253742707,  

DEBUG:root:pred_surv:0.13807976245880127,  emp_surv:0.266811728477478,  km_loss:159.69696044921875, len_unique_t:417, curr_pop_nk, min:0.06503241509199142, max:0.17664861679077148, sum:0.9999997615814209, curr_post:[0.1731882  0.25570676]  curr_lik:[0.14615782 0.24696359], train_k:8, 

DEBUG:root:valid_calibration:271.01451515132544, best_calibration:237.01022221491885, valid_ci:0.4342044296172737,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 475 epochs:95, Train Loss: 2190.314453125, Reg:1.356311321258545, Calibration:185.21922302246094, Accuracy:2004.171875,  CI:0.4485791610284168, Clustering:0.9232634902000427Valid Loss:4793.639615050748, Reg:2.8982417196290102, Calibration:271.01451515132544, Accuracy:4519.904764289529, CI:0.4342044296172737, Clustering:2.720415082752195,  

DEBUG:root:pred_surv:0.1940065175294876,  emp_surv:0.2746589183807373,  km_loss:177.4021759033203, len_unique_t:412, curr_pop_nk, min:0.06555547565221786, max:0.17600516974925995, sum:0.9999997615814209, curr_post:[0.20872217 0.31050682]  curr_lik:[0.18964107 0.28122866], train_k:8, 

DEBUG:root:valid_calibration:268.3840857611762, best_calibration:237.01022221491885, valid_ci:0.4327680474469465,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 480 epochs:96, Train Loss: 2173.077880859375, Reg:1.3566395044326782, Calibration:146.11550903320312, Accuracy:2026.094482421875,  CI:0.4587332493414271, Clustering:0.8680306077003479Valid Loss:4791.471041165865, Reg:2.898941692124065, Calibration:268.3840857611762, Accuracy:4520.39565387954, CI:0.4327680474469465, Clustering:2.6910623424073568,  

DEBUG:root:pred_surv:0.18242593109607697,  emp_surv:0.2284519076347351,  km_loss:179.1171417236328, len_unique_t:413, curr_pop_nk, min:0.06542687863111496, max:0.17619995772838593, sum:0.9999997615814209, curr_post:[0.21912016 0.29083118]  curr_lik:[0.21255973 0.23663542], train_k:8, 

DEBUG:root:valid_calibration:267.64400188739484, best_calibration:237.01022221491885, valid_ci:0.4371698637753684,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 485 epochs:97, Train Loss: 2101.47265625, Reg:1.3569653034210205, Calibration:176.37254333496094, Accuracy:1924.221923828125,  CI:0.44113083951042925, Clustering:0.878071129322052Valid Loss:4785.145816639957, Reg:2.899639372132782, Calibration:267.64400188739484, Accuracy:4514.8164145966875, CI:0.4371698637753684, Clustering:2.6852605689285145,  

DEBUG:root:pred_surv:0.2388448715209961,  emp_surv:0.3370216190814972,  km_loss:170.31166076660156, len_unique_t:416, curr_pop_nk, min:0.06562881916761398, max:0.17589989304542542, sum:0.9999997615814209, curr_post:[0.1579298  0.22942732]  curr_lik:[0.18458831 0.20456553], train_k:8, 

DEBUG:root:valid_calibration:270.15633868356036, best_calibration:237.01022221491885, valid_ci:0.4374015383189695,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 490 epochs:98, Train Loss: 2132.583984375, Reg:1.3572964668273926, Calibration:165.73243713378906, Accuracy:1965.934814453125,  CI:0.4398712700045975, Clustering:0.916688084602356Valid Loss:4784.93401943109, Reg:2.9003528448251576, Calibration:270.15633868356036, Accuracy:4512.119912693643, CI:0.4374015383189695, Clustering:2.658644547829261,  

DEBUG:root:pred_surv:0.18838374316692352,  emp_surv:0.3680473268032074,  km_loss:176.11090087890625, len_unique_t:428, curr_pop_nk, min:0.06588137149810791, max:0.17547446489334106, sum:0.9999998211860657, curr_post:[0.2334303  0.27304667]  curr_lik:[0.18414195 0.26277447], train_k:8, 

DEBUG:root:valid_calibration:263.2512801732772, best_calibration:237.01022221491885, valid_ci:0.43346307107774995,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 495 epochs:99, Train Loss: 2216.63330078125, Reg:1.3576587438583374, Calibration:186.7497100830078, Accuracy:2029.0350341796875,  CI:0.43474384757323825, Clustering:0.8487323522567749Valid Loss:4775.25655632345, Reg:2.901151903674134, Calibration:263.2512801732772, Accuracy:4509.389502370459, CI:0.43346307107774995, Clustering:2.6156273153093124,  

DEBUG:root:pred_surv:0.12976960837841034,  emp_surv:0.40713685750961304,  km_loss:173.2786102294922, len_unique_t:420, curr_pop_nk, min:0.06588642299175262, max:0.17480941116809845, sum:0.9999998807907104, curr_post:[0.21026327 0.24000317]  curr_lik:[0.18377884 0.19596036], train_k:6, 

DEBUG:root:valid_calibration:261.85296539567474, best_calibration:237.01022221491885, valid_ci:0.4352237976091187,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 500 epochs:100, Train Loss: 2249.183837890625, Reg:1.3580455780029297, Calibration:166.3369903564453, Accuracy:2082.009765625,  CI:0.43034925732637497, Clustering:0.8370585441589355Valid Loss:4768.671019464477, Reg:2.901980510124793, Calibration:261.85296539567474, Accuracy:4504.22864082532, CI:0.4352237976091187, Clustering:2.5888811319302287,  

DEBUG:root:ITER:500, Train CI:0.426771841284349, Clustering:0.8680899143218994,Reg:1.3581269979476929, Accuracy:2002.22705078125, Calibration:168.42745971679688, Cost:2171.522705078125
DEBUG:root:pred_surv:0.24721136689186096,  emp_surv:0.39170682430267334,  km_loss:166.4207000732422, len_unique_t:421, curr_pop_nk, min:0.06602760404348373, max:0.17457816004753113, sum:0.9999998211860657, curr_post:[0.19138534 0.29802936]  curr_lik:[0.15062681 0.28322116], train_k:6, 

DEBUG:root:valid_calibration:258.4815718169905, best_calibration:237.01022221491885, valid_ci:0.4346677787044759,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 505 epochs:101, Train Loss: 2294.1025390625, Reg:1.3584948778152466, Calibration:155.0189208984375, Accuracy:2138.23583984375,  CI:0.44152921900600767, Clustering:0.8477132320404053Valid Loss:4760.855389456464, Reg:2.9029708642225995, Calibration:258.4815718169905, Accuracy:4499.808547843216, CI:0.4346677787044759, Clustering:2.5648298936012464,  

DEBUG:root:pred_surv:0.09157781302928925,  emp_surv:0.449432373046875,  km_loss:172.37969970703125, len_unique_t:408, curr_pop_nk, min:0.06610505282878876, max:0.17388832569122314, sum:0.9999997615814209, curr_post:[0.2672662  0.34103292]  curr_lik:[0.2557587  0.28896296], train_k:8, 

DEBUG:root:valid_calibration:260.6512216421274, best_calibration:237.01022221491885, valid_ci:0.43142433509405986,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 510 epochs:102, Train Loss: 1985.3232421875, Reg:1.3589820861816406, Calibration:159.21359252929688, Accuracy:1825.264892578125,  CI:0.4052259632697155, Clustering:0.8447872996330261Valid Loss:4758.422329894498, Reg:2.9040057944436355, Calibration:260.6512216421274, Accuracy:4495.2444744925215, CI:0.43142433509405986, Clustering:2.5265677871867123,  

DEBUG:root:pred_surv:0.24844519793987274,  emp_surv:0.27313894033432007,  km_loss:165.94190979003906, len_unique_t:411, curr_pop_nk, min:0.06627125293016434, max:0.1739930659532547, sum:0.9999997615814209, curr_post:[0.17370926 0.24426961]  curr_lik:[0.17402744 0.19560243], train_k:8, 

DEBUG:root:valid_calibration:262.5021486200838, best_calibration:237.01022221491885, valid_ci:0.43670651468816607,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 515 epochs:103, Train Loss: 2110.03271484375, Reg:1.359441876411438, Calibration:175.14012145996094, Accuracy:1934.074951171875,  CI:0.4460060690410459, Clustering:0.8177069425582886Valid Loss:4755.149384849092, Reg:2.904988252199613, Calibration:262.5021486200838, Accuracy:4490.152994791666, CI:0.43670651468816607, Clustering:2.4936563438839383,  

DEBUG:root:pred_surv:0.1257384717464447,  emp_surv:0.2826511859893799,  km_loss:156.6822052001953, len_unique_t:412, curr_pop_nk, min:0.06611635535955429, max:0.1736535131931305, sum:0.9999998211860657, curr_post:[0.17053498 0.27579245]  curr_lik:[0.16463849 0.22168922], train_k:8, 

DEBUG:root:valid_calibration:258.9449923262637, best_calibration:237.01022221491885, valid_ci:0.43758687795385043,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 520 epochs:104, Train Loss: 2050.296630859375, Reg:1.3599023818969727, Calibration:152.33676147460938, Accuracy:1897.10009765625,  CI:0.4591540012406948, Clustering:0.8597678542137146Valid Loss:4744.975815471421, Reg:2.9059676533071404, Calibration:258.9449923262637, Accuracy:4483.557546240651, CI:0.43758687795385043, Clustering:2.4734679450336685,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.3402738571166992,  km_loss:160.1070556640625, len_unique_t:420, curr_pop_nk, min:0.06625787168741226, max:0.1732383370399475, sum:0.9999998211860657, curr_post:[0.2010697 0.3065925]  curr_lik:[0.19688734 0.25583577], train_k:8, 

DEBUG:root:valid_calibration:265.67550398345685, best_calibration:237.01022221491885, valid_ci:0.4323046983597442,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 525 epochs:105, Train Loss: 2068.97705078125, Reg:1.360448956489563, Calibration:163.86871337890625, Accuracy:1904.274658203125,  CI:0.4517395594935646, Clustering:0.8338527083396912Valid Loss:4749.759511051015, Reg:2.90717452000349, Calibration:265.67550398345685, Accuracy:4481.65032802484, CI:0.4323046983597442, Clustering:2.4335369085654235,  

DEBUG:root:pred_surv:0.1810082048177719,  emp_surv:0.30455881357192993,  km_loss:168.612548828125, len_unique_t:416, curr_pop_nk, min:0.06627430766820908, max:0.17257200181484222, sum:0.9999998807907104, curr_post:[0.20028462 0.25243053]  curr_lik:[0.1927396  0.20273042], train_k:8, 

DEBUG:root:valid_calibration:258.9099590594952, best_calibration:237.01022221491885, valid_ci:0.43767954777129087,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 530 epochs:106, Train Loss: 2152.29541015625, Reg:1.3610023260116577, Calibration:186.31776428222656, Accuracy:1965.15966796875,  CI:0.4318224839625618, Clustering:0.8178853392601013Valid Loss:4736.0182542067305, Reg:2.90836432041266, Calibration:258.9099590594952, Accuracy:4474.694406884348, CI:0.43767954777129087, Clustering:2.414290466879168,  

DEBUG:root:pred_surv:0.25915977358818054,  emp_surv:0.1684931367635727,  km_loss:159.63275146484375, len_unique_t:417, curr_pop_nk, min:0.06689867377281189, max:0.1718224287033081, sum:0.9999997615814209, curr_post:[0.18986115 0.30547246]  curr_lik:[0.17951839 0.2554146 ], train_k:8, 

DEBUG:root:valid_calibration:260.97726414346283, best_calibration:237.01022221491885, valid_ci:0.43577981651376146,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 535 epochs:107, Train Loss: 2215.56689453125, Reg:1.3615453243255615, Calibration:155.20021057128906, Accuracy:2059.546875,  CI:0.44613104486888344, Clustering:0.8199225068092346Valid Loss:4728.391468015491, Reg:2.90950521444663, Calibration:260.97726414346283, Accuracy:4465.064937232905, CI:0.43577981651376146, Clustering:2.349817090564304,  

DEBUG:root:pred_surv:0.3170381784439087,  emp_surv:0.37232059240341187,  km_loss:139.7436065673828, len_unique_t:416, curr_pop_nk, min:0.06719530373811722, max:0.1711987406015396, sum:0.9999998211860657, curr_post:[0.1876983 0.3372751]  curr_lik:[0.17878589 0.28434977], train_k:8, 

DEBUG:root:valid_calibration:257.7281365027794, best_calibration:237.01022221491885, valid_ci:0.44333240663515894,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 540 epochs:108, Train Loss: 2120.59765625, Reg:1.362053394317627, Calibration:162.71046447753906, Accuracy:1957.09765625,  CI:0.4802968874015917, Clustering:0.7895068526268005Valid Loss:4717.948196280716, Reg:2.9105875227186413, Calibration:257.7281365027794, Accuracy:4457.893045539529, CI:0.44333240663515894, Clustering:2.326462003919813,  

DEBUG:root:pred_surv:0.0,  emp_surv:0.2692413628101349,  km_loss:160.9824981689453, len_unique_t:410, curr_pop_nk, min:0.06720631569623947, max:0.1714068055152893, sum:0.9999997615814209, curr_post:[0.18089874 0.20641293]  curr_lik:[0.17356335 0.17792857], train_k:7, 

DEBUG:root:valid_calibration:256.397214710203, best_calibration:237.01022221491885, valid_ci:0.4459271615234918,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 545 epochs:109, Train Loss: 1979.703125, Reg:1.362578272819519, Calibration:158.58755493164062, Accuracy:1820.3367919921875,  CI:0.4548909098672132, Clustering:0.7788154482841492Valid Loss:4714.711767995459, Reg:2.911729180914724, Calibration:256.397214710203, Accuracy:4455.997825687767, CI:0.4459271615234918, Clustering:2.3166674834031324,  

DEBUG:root:pred_surv:0.1154995784163475,  emp_surv:0.2515745759010315,  km_loss:157.2987060546875, len_unique_t:422, curr_pop_nk, min:0.06752139329910278, max:0.1707179844379425, sum:0.9999997615814209, curr_post:[0.20352682 0.2345608 ]  curr_lik:[0.17484763 0.21516943], train_k:7, 

DEBUG:root:valid_calibration:240.00089596479364, best_calibration:237.01022221491885, valid_ci:0.4511630062088778,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 550 epochs:110, Train Loss: 2179.185546875, Reg:1.363142490386963, Calibration:147.88218688964844, Accuracy:2030.54638671875,  CI:0.42640146738507395, Clustering:0.7569838762283325Valid Loss:4685.51296657986, Reg:2.9129396137009316, Calibration:240.00089596479364, Accuracy:4443.243043035523, CI:0.4511630062088778, Clustering:2.269281790806697,  

DEBUG:root:pred_surv:0.3089841902256012,  emp_surv:0.40379998087882996,  km_loss:133.3872528076172, len_unique_t:423, curr_pop_nk, min:0.0678444504737854, max:0.17001454532146454, sum:0.9999997615814209, curr_post:[0.22666627 0.263169  ]  curr_lik:[0.21816763 0.22604497], train_k:8, 

DEBUG:root:valid_calibration:234.90985642131577, best_calibration:237.01022221491885, valid_ci:0.45297006764896675,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 555 epochs:111, Train Loss: 2072.1328125, Reg:1.36368727684021, Calibration:133.31069946289062, Accuracy:1938.092041015625,  CI:0.47038256789677885, Clustering:0.7299928665161133Valid Loss:4674.63879707532, Reg:2.9140919701665893, Calibration:234.90985642131577, Accuracy:4437.491131643964, CI:0.45297006764896675, Clustering:2.238026032081017,  

DEBUG:root:pred_surv:0.0861581489443779,  emp_surv:0.32941463589668274,  km_loss:156.27886962890625, len_unique_t:415, curr_pop_nk, min:0.06780271232128143, max:0.16952374577522278, sum:0.9999997615814209, curr_post:[0.18679342 0.24031466]  curr_lik:[0.18092501 0.19723237], train_k:7, 

DEBUG:root:valid_calibration:228.68506928794403, best_calibration:237.01022221491885, valid_ci:0.45343341673616905,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 560 epochs:112, Train Loss: 2035.697021484375, Reg:1.364257574081421, Calibration:144.38365173339844, Accuracy:1890.5732421875,  CI:0.45155077240776775, Clustering:0.7401647567749023Valid Loss:4653.754861945779, Reg:2.915312846501668, Calibration:228.68506928794403, Accuracy:4422.844780815972, CI:0.45343341673616905, Clustering:2.2253236200055504,  

DEBUG:root:pred_surv:0.31367459893226624,  emp_surv:0.4161786437034607,  km_loss:139.84576416015625, len_unique_t:428, curr_pop_nk, min:0.06789583712816238, max:0.1694105714559555, sum:0.9999997615814209, curr_post:[0.18042417 0.20335633]  curr_lik:[0.16077201 0.1903512 ], train_k:8, 

DEBUG:root:valid_calibration:226.0479071201422, best_calibration:237.01022221491885, valid_ci:0.45176536002224077,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 565 epochs:113, Train Loss: 2072.2685546875, Reg:1.3648159503936768, Calibration:119.35594177246094, Accuracy:1952.1875,  CI:0.4728538503575926, Clustering:0.7251683473587036Valid Loss:4641.058506109775, Reg:2.9165197131980176, Calibration:226.0479071201422, Accuracy:4412.817278478899, CI:0.45176536002224077, Clustering:2.1934213801326914,  

DEBUG:root:pred_surv:0.34885311126708984,  emp_surv:0.48624229431152344,  km_loss:123.12911224365234, len_unique_t:412, curr_pop_nk, min:0.0680675208568573, max:0.1690739542245865, sum:0.9999997615814209, curr_post:[0.23810124 0.36535302]  curr_lik:[0.23223084 0.31589144], train_k:7, 

DEBUG:root:valid_calibration:217.1076424101479, best_calibration:237.01022221491885, valid_ci:0.4519506996571217,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 570 epochs:114, Train Loss: 2058.730712890625, Reg:1.3653860092163086, Calibration:129.74400329589844, Accuracy:1928.23046875,  CI:0.44529022117435724, Clustering:0.7562348246574402Valid Loss:4621.12087673611, Reg:2.917728617660001, Calibration:217.1076424101479, Accuracy:4401.841383713942, CI:0.4519506996571217, Clustering:2.172272938948411,  

DEBUG:root:pred_surv:0.27065712213516235,  emp_surv:0.37787681818008423,  km_loss:137.2377471923828, len_unique_t:417, curr_pop_nk, min:0.06829121708869934, max:0.1684713512659073, sum:0.9999998211860657, curr_post:[0.17292473 0.2542128 ]  curr_lik:[0.14720722 0.23898822], train_k:7, 

DEBUG:root:valid_calibration:213.44108255500467, best_calibration:237.01022221491885, valid_ci:0.45347975164488924,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 575 epochs:115, Train Loss: 1912.7581787109375, Reg:1.3659536838531494, Calibration:121.64183044433594, Accuracy:1790.401611328125,  CI:0.49335910193675725, Clustering:0.7147741913795471Valid Loss:4607.265374599358, Reg:2.9189464373466296, Calibration:213.44108255500467, Accuracy:4391.692332732371, CI:0.45347975164488924, Clustering:2.132146913781125,  

DEBUG:root:pred_surv:0.42418718338012695,  emp_surv:0.3888305425643921,  km_loss:98.63019561767578, len_unique_t:411, curr_pop_nk, min:0.06848099827766418, max:0.16797217726707458, sum:0.9999998211860657, curr_post:[0.14737074 0.22152424]  curr_lik:[0.1966656 0.1985701], train_k:7, 

DEBUG:root:valid_calibration:204.54414889343784, best_calibration:237.01022221491885, valid_ci:0.4575108887035493,best_ci:0.4576035585209897, best_epoch:1 
 
DEBUG:root:Iteration: 580 epochs:116, Train Loss: 1933.322021484375, Reg:1.3665190935134888, Calibration:95.63594818115234, Accuracy:1836.9688720703125,  CI:0.5083977538841186, Clustering:0.717161238193512Valid Loss:4581.136589376335, Reg:2.920149228511712, Calibration:204.54414889343784, Accuracy:4374.481462005876, CI:0.4575108887035493, Clustering:2.1112538301027737,  

DEBUG:root: Final curr_post:[0.16596389 0.23102677], curr_lik:[0.14469084 0.20922177], K:8
DEBUG:root:pred_surv:0.29139184951782227,  emp_surv:0.20585238933563232,  km_loss:129.22625732421875, len_unique_t:407, curr_pop_nk, min:0.06849139928817749, max:0.1679384559392929, sum:0.9999998211860657, curr_post:[0.16596389 0.23102677]  curr_lik:[0.14469084 0.20922177], train_k:8, 

DEBUG:root:valid_calibration:192.51574002779446, best_calibration:192.51574002779446, valid_ci:0.46168103048836995,best_ci:0.46168103048836995, best_epoch:117 
 
DEBUG:root:Iteration: 585 epochs:117, Train Loss: 2151.091552734375, Reg:1.367103099822998, Calibration:122.61473083496094, Accuracy:2027.79150390625,  CI:0.4584497206703911, Clustering:0.6851968765258789Valid Loss:4545.674641927083, Reg:2.9214207942669206, Calibration:192.51574002779446, Accuracy:4351.061698717948, CI:0.46168103048836995, Clustering:2.097867620296967, * 

DEBUG:root: Final curr_post:[0.15041871 0.18708527], curr_lik:[0.15488555 0.21776591], K:7
DEBUG:root:pred_surv:0.24773916602134705,  emp_surv:0.36274001002311707,  km_loss:135.23873901367188, len_unique_t:425, curr_pop_nk, min:0.0685700997710228, max:0.16777226328849792, sum:0.9999998211860657, curr_post:[0.15041871 0.18708527]  curr_lik:[0.15488555 0.21776591], train_k:7, 

DEBUG:root:valid_calibration:185.47868321084567, best_calibration:185.47868321084567, valid_ci:0.4676582337132796,best_ci:0.4676582337132796, best_epoch:118 
 
DEBUG:root:Iteration: 590 epochs:118, Train Loss: 2045.99658203125, Reg:1.3676975965499878, Calibration:127.70983123779297, Accuracy:1917.5582275390625,  CI:0.46365675361355707, Clustering:0.7285547852516174Valid Loss:4514.123117821848, Reg:2.922681916473258, Calibration:185.47868321084567, Accuracy:4326.571211855636, CI:0.4676582337132796, Clustering:2.0726831295551396, * 

DEBUG:root: Final curr_post:[0.1504935 0.1702668], curr_lik:[0.13905968 0.20429154], K:7
DEBUG:root:pred_surv:0.175275981426239,  emp_surv:0.3029109537601471,  km_loss:142.2814483642578, len_unique_t:418, curr_pop_nk, min:0.06848987191915512, max:0.1675807535648346, sum:0.9999998211860657, curr_post:[0.1504935 0.1702668]  curr_lik:[0.13905968 0.20429154], train_k:7, 

DEBUG:root:valid_calibration:179.7326894906851, best_calibration:179.7326894906851, valid_ci:0.4691872857010472,best_ci:0.4691872857010472, best_epoch:119 
 
DEBUG:root:Iteration: 595 epochs:119, Train Loss: 2139.218994140625, Reg:1.3682937622070312, Calibration:139.0807647705078, Accuracy:1999.4326171875,  CI:0.4521573549140953, Clustering:0.7056310176849365Valid Loss:4483.136560162927, Reg:2.923975642929729, Calibration:179.7326894906851, Accuracy:4301.342043102297, CI:0.4691872857010472, Clustering:2.0614601353294826, * 

DEBUG:root:pred_surv:0.38255950808525085,  emp_surv:0.3489070236682892,  km_loss:106.20756530761719, len_unique_t:416, curr_pop_nk, min:0.06855864077806473, max:0.166993647813797, sum:0.9999997615814209, curr_post:[0.15674685 0.23653811]  curr_lik:[0.20048027 0.21104127], train_k:7, 

DEBUG:root:valid_calibration:173.04340590778577, best_calibration:179.7326894906851, valid_ci:0.46909461588360674,best_ci:0.4691872857010472, best_epoch:119 
 
DEBUG:root:Iteration: 600 epochs:120, Train Loss: 2069.154296875, Reg:1.3689004182815552, Calibration:118.05513000488281, Accuracy:1950.380615234375,  CI:0.4523709521609475, Clustering:0.718573808670044Valid Loss:4443.604037293002, Reg:2.925242623712262, Calibration:173.04340590778577, Accuracy:4268.523909087874, CI:0.46909461588360674, Clustering:2.0366826882729163,  

DEBUG:root:ITER:600, Train CI:0.45059883203009005, Clustering:0.6960033774375916,Reg:1.3690135478973389, Accuracy:1846.374755859375, Calibration:124.69039916992188, Cost:1971.76123046875
DEBUG:root:pred_surv:0.22140425443649292,  emp_surv:0.33115559816360474,  km_loss:106.5459976196289, len_unique_t:415, curr_pop_nk, min:0.06884731352329254, max:0.1664649099111557, sum:0.9999998211860657, curr_post:[0.18871993 0.2662169 ]  curr_lik:[0.17625727 0.22211982], train_k:8, 

DEBUG:root:valid_calibration:161.17642068455362, best_calibration:179.7326894906851, valid_ci:0.46793624316560095,best_ci:0.4691872857010472, best_epoch:119 
 
DEBUG:root:Iteration: 605 epochs:121, Train Loss: 1995.0999755859375, Reg:1.3694849014282227, Calibration:103.73223876953125, Accuracy:1890.6815185546875,  CI:0.4765719400313269, Clustering:0.6862055063247681Valid Loss:4411.853757678953, Reg:2.92651291586395, Calibration:161.17642068455362, Accuracy:4248.689309144631, CI:0.46793624316560095, Clustering:1.9878545123287754,  

DEBUG:root: Final curr_post:[0.20226225 0.23445196], curr_lik:[0.16313842 0.20636307], K:8
DEBUG:root:pred_surv:0.3141631782054901,  emp_surv:0.44084033370018005,  km_loss:99.69831085205078, len_unique_t:410, curr_pop_nk, min:0.06906253099441528, max:0.16600684821605682, sum:0.9999998211860657, curr_post:[0.20226225 0.23445196]  curr_lik:[0.16313842 0.20636307], train_k:8, 

DEBUG:root:valid_calibration:159.11888057350092, best_calibration:159.11888057350092, valid_ci:0.47650820127884347,best_ci:0.47650820127884347, best_epoch:122 
 
DEBUG:root:Iteration: 610 epochs:122, Train Loss: 1936.3094482421875, Reg:1.3700720071792603, Calibration:108.0252456665039, Accuracy:1827.6263427734375,  CI:0.4488735933112345, Clustering:0.6578037738800049Valid Loss:4383.560050247062, Reg:2.9277439810271955, Calibration:159.11888057350092, Accuracy:4222.486968733307, CI:0.47650820127884347, Clustering:1.9540064609967744, * 

DEBUG:root: Final curr_post:[0.18123305 0.27679983], curr_lik:[0.16792868 0.23077747], K:8
DEBUG:root:pred_surv:0.19573357701301575,  emp_surv:0.3011539876461029,  km_loss:112.84075927734375, len_unique_t:416, curr_pop_nk, min:0.0693325623869896, max:0.16583198308944702, sum:0.9999998211860657, curr_post:[0.18123305 0.27679983]  curr_lik:[0.16792868 0.23077747], train_k:8, 

DEBUG:root:valid_calibration:146.3706839797843, best_calibration:146.3706839797843, valid_ci:0.4818367157816699,best_ci:0.4818367157816699, best_epoch:123 
 
DEBUG:root:Iteration: 615 epochs:123, Train Loss: 1961.445068359375, Reg:1.3706517219543457, Calibration:111.63109588623047, Accuracy:1849.164306640625,  CI:0.45291608760243446, Clustering:0.6496703624725342Valid Loss:4335.693881043002, Reg:2.929000772981562, Calibration:146.3706839797843, Accuracy:4187.401143913595, CI:0.4818367157816699, Clustering:1.9217837824780715, * 

DEBUG:root: Final curr_post:[0.19592032 0.20887312], curr_lik:[0.17911226 0.19497597], K:7
DEBUG:root:pred_surv:0.2960352599620819,  emp_surv:0.33905214071273804,  km_loss:91.8891830444336, len_unique_t:410, curr_pop_nk, min:0.06921950727701187, max:0.1658882051706314, sum:0.9999997615814209, curr_post:[0.19592032 0.20887312]  curr_lik:[0.17911226 0.19497597], train_k:7, 

DEBUG:root:valid_calibration:138.01708384456796, best_calibration:138.01708384456796, valid_ci:0.48651654156241314,best_ci:0.48651654156241314, best_epoch:124 
 
DEBUG:root:Iteration: 620 epochs:124, Train Loss: 1820.5701904296875, Reg:1.3712486028671265, Calibration:94.19405364990234, Accuracy:1725.693115234375,  CI:0.4743074645802495, Clustering:0.682995617389679Valid Loss:4276.589939736912, Reg:2.930270555691841, Calibration:138.01708384456796, Accuracy:4136.663453191773, CI:0.48651654156241314, Clustering:1.9099548076971982, * 

DEBUG:root:pred_surv:0.31671276688575745,  emp_surv:0.4786442518234253,  km_loss:88.89676666259766, len_unique_t:418, curr_pop_nk, min:0.06942079961299896, max:0.16520032286643982, sum:0.9999997615814209, curr_post:[0.20893864 0.23844178]  curr_lik:[0.1743204  0.23118792], train_k:8, 

DEBUG:root:valid_calibration:131.49660061567258, best_calibration:138.01708384456796, valid_ci:0.48596052265777034,best_ci:0.48651654156241314, best_epoch:124 
 
DEBUG:root:Iteration: 625 epochs:125, Train Loss: 1868.9437255859375, Reg:1.3718454837799072, Calibration:95.95668029785156, Accuracy:1772.32275390625,  CI:0.44354235174056017, Clustering:0.6642991304397583Valid Loss:4231.26977121728, Reg:2.9315357534294453, Calibration:131.49660061567258, Accuracy:4097.881349742922, CI:0.48596052265777034, Clustering:1.8916985927483974,  

DEBUG:root: Final curr_post:[0.15421867 0.2630179 ], curr_lik:[0.13632081 0.23644069], K:8
DEBUG:root:pred_surv:0.29468581080436707,  emp_surv:0.27232635021209717,  km_loss:84.6995849609375, len_unique_t:414, curr_pop_nk, min:0.06956681609153748, max:0.16513116657733917, sum:0.9999997615814209, curr_post:[0.15421867 0.2630179 ]  curr_lik:[0.13632081 0.23644069], train_k:8, 

DEBUG:root:valid_calibration:126.64888659094133, best_calibration:126.64888659094133, valid_ci:0.4900379946251506,best_ci:0.4900379946251506, best_epoch:126 
 
DEBUG:root:Iteration: 630 epochs:126, Train Loss: 1850.75, Reg:1.372362732887268, Calibration:90.95512390136719, Accuracy:1759.14208984375,  CI:0.4804678604699307, Clustering:0.6528563499450684Valid Loss:4209.918160723824, Reg:2.9325997218107562, Calibration:126.64888659094133, Accuracy:4081.4002925514155, CI:0.4900379946251506, Clustering:1.8692370663341293, * 

DEBUG:root: Final curr_post:[0.18733437 0.32728556], curr_lik:[0.18055084 0.28283396], K:6
DEBUG:root:pred_surv:0.2857896089553833,  emp_surv:0.36412468552589417,  km_loss:86.51554870605469, len_unique_t:408, curr_pop_nk, min:0.06967085599899292, max:0.16483089327812195, sum:0.9999998211860657, curr_post:[0.18733437 0.32728556]  curr_lik:[0.18055084 0.28283396], train_k:6, 

DEBUG:root:valid_calibration:124.41743540967632, best_calibration:124.41743540967632, valid_ci:0.49277175423964414,best_ci:0.49277175423964414, best_epoch:127 
 
DEBUG:root:Iteration: 635 epochs:127, Train Loss: 1758.882568359375, Reg:1.3728148937225342, Calibration:82.78952026367188, Accuracy:1675.4493408203125,  CI:0.4494439802018384, Clustering:0.6436677575111389Valid Loss:4193.774101061698, Reg:2.9335513583615294, Calibration:124.41743540967632, Accuracy:4067.5082736545137, CI:0.49277175423964414, Clustering:1.8481510317223702, * 

DEBUG:root: Final curr_post:[0.21158949 0.2854974 ], curr_lik:[0.20304644 0.24567598], K:8
DEBUG:root:pred_surv:0.3055552542209625,  emp_surv:0.32686424255371094,  km_loss:77.82345581054688, len_unique_t:407, curr_pop_nk, min:0.06970357149839401, max:0.16486729681491852, sum:0.9999997615814209, curr_post:[0.21158949 0.2854974 ]  curr_lik:[0.20304644 0.24567598], train_k:8, 

DEBUG:root:valid_calibration:123.07762080787593, best_calibration:123.07762080787593, valid_ci:0.5048651654156241,best_ci:0.5048651654156241, best_epoch:128 
 
DEBUG:root:Iteration: 640 epochs:128, Train Loss: 1839.3028564453125, Reg:1.3732671737670898, Calibration:80.60274505615234, Accuracy:1758.054443359375,  CI:0.47944166287361556, Clustering:0.6456636190414429Valid Loss:4166.038317558093, Reg:2.934531523631169, Calibration:123.07762080787593, Accuracy:4041.126740284455, CI:0.5048651654156241, Clustering:1.83367563618554, * 

DEBUG:root:pred_surv:0.352604478597641,  emp_surv:0.32044148445129395,  km_loss:85.60663604736328, len_unique_t:431, curr_pop_nk, min:0.06966595351696014, max:0.16537611186504364, sum:0.9999997615814209, curr_post:[0.17667125 0.2473356 ]  curr_lik:[0.14248143 0.23487917], train_k:8, 

DEBUG:root:valid_calibration:120.21627996721837, best_calibration:123.07762080787593, valid_ci:0.5003243443610416,best_ci:0.5048651654156241, best_epoch:128 
 
DEBUG:root:Iteration: 645 epochs:129, Train Loss: 1897.0401611328125, Reg:1.373725414276123, Calibration:82.15777587890625, Accuracy:1814.247802734375,  CI:0.5069267067838434, Clustering:0.6346202492713928Valid Loss:4155.956822582799, Reg:2.935532830719255, Calibration:120.21627996721837, Accuracy:4033.9115501469014, CI:0.5003243443610416, Clustering:1.828744243352841,  

DEBUG:root:pred_surv:0.22432845830917358,  emp_surv:0.36350125074386597,  km_loss:77.13115692138672, len_unique_t:416, curr_pop_nk, min:0.06995765119791031, max:0.1645607203245163, sum:0.9999996423721313, curr_post:[0.15436251 0.3312542 ]  curr_lik:[0.13036843 0.3180621 ], train_k:7, 

DEBUG:root:valid_calibration:114.7167254716922, best_calibration:123.07762080787593, valid_ci:0.5002780094523214,best_ci:0.5048651654156241, best_epoch:128 
 
DEBUG:root:Iteration: 650 epochs:130, Train Loss: 1671.510009765625, Reg:1.3742502927780151, Calibration:71.7054443359375, Accuracy:1599.178955078125,  CI:0.4643909795051066, Clustering:0.6256263852119446Valid Loss:4109.517676198584, Reg:2.9366390827374578, Calibration:114.7167254716922, Accuracy:3993.00547542735, CI:0.5002780094523214, Clustering:1.7952526736463237,  

DEBUG:root: Final curr_post:[0.16364945 0.22164229], curr_lik:[0.15241483 0.19789751], K:7
DEBUG:root:pred_surv:0.2737548053264618,  emp_surv:0.31788089871406555,  km_loss:68.71318817138672, len_unique_t:411, curr_pop_nk, min:0.07046429812908173, max:0.16453123092651367, sum:0.9999997615814209, curr_post:[0.16364945 0.22164229]  curr_lik:[0.15241483 0.19789751], train_k:7, 

DEBUG:root:valid_calibration:109.80525383582481, best_calibration:109.80525383582481, valid_ci:0.505838198498749,best_ci:0.505838198498749, best_epoch:131 
 
DEBUG:root:Iteration: 655 epochs:131, Train Loss: 1894.7779541015625, Reg:1.3747111558914185, Calibration:73.61785888671875, Accuracy:1820.5579833984375,  CI:0.4638998619770596, Clustering:0.6022332310676575Valid Loss:4049.8678093282583, Reg:2.937593775936681, Calibration:109.80525383582481, Accuracy:3938.2926745292466, CI:0.505838198498749, Clustering:1.7698826188715093, * 

DEBUG:root:pred_surv:0.24068351089954376,  emp_surv:0.3004327118396759,  km_loss:67.93779754638672, len_unique_t:432, curr_pop_nk, min:0.07046869397163391, max:0.16420575976371765, sum:0.9999997615814209, curr_post:[0.20138943 0.24712014]  curr_lik:[0.1916377  0.20938733], train_k:8, 

DEBUG:root:valid_calibration:105.55646358392177, best_calibration:109.80525383582481, valid_ci:0.5029654341580947,best_ci:0.505838198498749, best_epoch:131 
 
DEBUG:root:Iteration: 660 epochs:132, Train Loss: 1716.443603515625, Reg:1.3751298189163208, Calibration:70.39217376708984, Accuracy:1645.43896484375,  CI:0.4717347317999752, Clustering:0.6124862432479858Valid Loss:4019.8844192374463, Reg:2.9384799492664824, Calibration:105.55646358392177, Accuracy:3912.572094517895, CI:0.5029654341580947, Clustering:1.756470682274582,  

DEBUG:root: Final curr_post:[0.18820794 0.19858769], curr_lik:[0.17600256 0.18759058], K:8
DEBUG:root:pred_surv:0.2267516851425171,  emp_surv:0.2738637626171112,  km_loss:72.36190795898438, len_unique_t:412, curr_pop_nk, min:0.07072106748819351, max:0.16466324031352997, sum:0.9999996423721313, curr_post:[0.18820794 0.19858769]  curr_lik:[0.17600256 0.18759058], train_k:8, 

DEBUG:root:valid_calibration:103.15881223760098, best_calibration:103.15881223760098, valid_ci:0.5091743119266054,best_ci:0.5091743119266054, best_epoch:133 
 
DEBUG:root:Iteration: 665 epochs:133, Train Loss: 1845.63427734375, Reg:1.375487208366394, Calibration:72.14948272705078, Accuracy:1772.8665771484375,  CI:0.45702023552827997, Clustering:0.6181766390800476Valid Loss:3994.1854884481836, Reg:2.939223988443358, Calibration:103.15881223760098, Accuracy:3889.2968332665596, CI:0.5091743119266054, Clustering:1.7292541571152515, * 

DEBUG:root: Final curr_post:[0.18165405 0.19413957], curr_lik:[0.15245086 0.1557449 ], K:7
DEBUG:root:pred_surv:0.3483435809612274,  emp_surv:0.36933407187461853,  km_loss:66.1229248046875, len_unique_t:415, curr_pop_nk, min:0.07068480551242828, max:0.16508622467517853, sum:0.9999996423721313, curr_post:[0.18165405 0.19413957]  curr_lik:[0.15245086 0.1557449 ], train_k:7, 

DEBUG:root:valid_calibration:101.4456789717715, best_calibration:101.4456789717715, valid_ci:0.5151515151515151,best_ci:0.5151515151515151, best_epoch:134 
 
DEBUG:root:Iteration: 670 epochs:134, Train Loss: 1831.4267578125, Reg:1.375801920890808, Calibration:65.04600524902344, Accuracy:1765.762939453125,  CI:0.4698109199065222, Clustering:0.6178432106971741Valid Loss:3964.318691155849, Reg:2.9398526391412454, Calibration:101.4456789717715, Accuracy:3861.1424111912393, CI:0.5151515151515151, Clustering:1.7302419640060163, * 

DEBUG:root:pred_surv:0.3418442904949188,  emp_surv:0.4049832820892334,  km_loss:70.19622802734375, len_unique_t:435, curr_pop_nk, min:0.0710950717329979, max:0.16426637768745422, sum:0.9999997019767761, curr_post:[0.23122321 0.2584441 ]  curr_lik:[0.21996106 0.22073953], train_k:7, 

DEBUG:root:valid_calibration:100.37040710449219, best_calibration:101.4456789717715, valid_ci:0.511491057362617,best_ci:0.5151515151515151, best_epoch:134 
 
DEBUG:root:Iteration: 675 epochs:135, Train Loss: 1888.0499267578125, Reg:1.3760430812835693, Calibration:62.88541793823242, Accuracy:1824.57421875,  CI:0.47809865297024906, Clustering:0.5902760624885559Valid Loss:3956.486628605769, Reg:2.9403429764967695, Calibration:100.37040710449219, Accuracy:3854.4178498096953, CI:0.511491057362617, Clustering:1.6985847654505672,  

DEBUG:root: Final curr_post:[0.19427258 0.29248574], curr_lik:[0.1761123  0.26728994], K:8
DEBUG:root:pred_surv:0.2570425570011139,  emp_surv:0.2374403327703476,  km_loss:71.72816467285156, len_unique_t:415, curr_pop_nk, min:0.07097747921943665, max:0.16445310413837433, sum:0.9999997615814209, curr_post:[0.19427258 0.29248574]  curr_lik:[0.1761123  0.26728994], train_k:8, 

DEBUG:root:valid_calibration:100.25321927844968, best_calibration:100.25321927844968, valid_ci:0.5156148642387175,best_ci:0.5156148642387175, best_epoch:136 
 
DEBUG:root:Iteration: 680 epochs:136, Train Loss: 1748.15283203125, Reg:1.3762152194976807, Calibration:77.45004272460938, Accuracy:1670.131103515625,  CI:0.4816870593955109, Clustering:0.5716833472251892Valid Loss:3965.1546641292734, Reg:2.940707991265843, Calibration:100.25321927844968, Accuracy:3863.210042317708, CI:0.5156148642387175, Clustering:1.6911465388077955, * 

DEBUG:root: Final curr_post:[0.17174451 0.2235516 ], curr_lik:[0.18620975 0.24722105], K:7
DEBUG:root:pred_surv:0.30792438983917236,  emp_surv:0.34541231393814087,  km_loss:74.44263458251953, len_unique_t:425, curr_pop_nk, min:0.07091087102890015, max:0.1648864895105362, sum:0.9999997615814209, curr_post:[0.17174451 0.2235516 ]  curr_lik:[0.18620975 0.24722105], train_k:7, 

DEBUG:root:valid_calibration:100.18394339797842, best_calibration:100.18394339797842, valid_ci:0.5156148642387175,best_ci:0.5156148642387175, best_epoch:137 
 
DEBUG:root:Iteration: 685 epochs:137, Train Loss: 1930.3177490234375, Reg:1.3763785362243652, Calibration:73.83712005615234, Accuracy:1855.88671875,  CI:0.44973238490233786, Clustering:0.5938742756843567Valid Loss:3974.514953091613, Reg:2.9410633266481576, Calibration:100.18394339797842, Accuracy:3872.65145065438, CI:0.5156148642387175, Clustering:1.6795811999557364, * 

DEBUG:root:pred_surv:0.2883874773979187,  emp_surv:0.15944798290729523,  km_loss:72.31627655029297, len_unique_t:427, curr_pop_nk, min:0.07108090817928314, max:0.16454564034938812, sum:0.9999998211860657, curr_post:[0.18687522 0.25401342]  curr_lik:[0.17139414 0.21450782], train_k:6, 

DEBUG:root:valid_calibration:102.66649621164696, best_calibration:100.18394339797842, valid_ci:0.516726902048003,best_ci:0.5156148642387175, best_epoch:137 
 
DEBUG:root:Iteration: 690 epochs:138, Train Loss: 1801.0780029296875, Reg:1.3766200542449951, Calibration:73.85102081298828, Accuracy:1726.62939453125,  CI:0.5163565050488191, Clustering:0.5975301861763Valid Loss:3985.2315788595083, Reg:2.9416214197109904, Calibration:102.66649621164696, Accuracy:3880.9091942942036, CI:0.516726902048003, Clustering:1.6561440932445035,  

DEBUG:root:pred_surv:0.363028347492218,  emp_surv:0.36658522486686707,  km_loss:66.56637573242188, len_unique_t:401, curr_pop_nk, min:0.07126489281654358, max:0.1648642122745514, sum:0.9999997615814209, curr_post:[0.19322267 0.19447935]  curr_lik:[0.15325731 0.16740844], train_k:7, 

DEBUG:root:valid_calibration:103.78338740422176, best_calibration:100.18394339797842, valid_ci:0.521175053285145,best_ci:0.5156148642387175, best_epoch:137 
 
DEBUG:root:Iteration: 695 epochs:139, Train Loss: 1667.3072509765625, Reg:1.3769328594207764, Calibration:69.6364974975586, Accuracy:1597.06787109375,  CI:0.4944164955895955, Clustering:0.6028763651847839Valid Loss:3999.5769272502666, Reg:2.9423022881532326, Calibration:103.78338740422176, Accuracy:3894.1647782284986, CI:0.521175053285145, Clustering:1.6290624426980302,  

DEBUG:root:pred_surv:0.2692537307739258,  emp_surv:0.33008915185928345,  km_loss:74.14757537841797, len_unique_t:431, curr_pop_nk, min:0.07143980264663696, max:0.1645115613937378, sum:0.9999997615814209, curr_post:[0.16565455 0.20080623]  curr_lik:[0.14773028 0.19293928], train_k:8, 

DEBUG:root:valid_calibration:101.37179774096887, best_calibration:100.18394339797842, valid_ci:0.5224260958205912,best_ci:0.5156148642387175, best_epoch:137 
 
DEBUG:root:Iteration: 700 epochs:140, Train Loss: 1720.523681640625, Reg:1.3772426843643188, Calibration:82.80902099609375, Accuracy:1637.1376953125,  CI:0.5367884588374566, Clustering:0.576918363571167Valid Loss:3979.4807108039527, Reg:2.942998949279133, Calibration:101.37179774096887, Accuracy:3876.4992738381407, CI:0.5224260958205912, Clustering:1.609578473955138,  

DEBUG:root:ITER:700, Train CI:0.4801170561620522, Clustering:0.5806681513786316,Reg:1.3773233890533447, Accuracy:1609.76171875, Calibration:80.21218872070312, Cost:1690.5545654296875
DEBUG:root: Final curr_post:[0.14711757 0.17575271], curr_lik:[0.14821805 0.1711992 ], K:7
DEBUG:root:pred_surv:0.28876471519470215,  emp_surv:0.3460231125354767,  km_loss:64.89911651611328, len_unique_t:420, curr_pop_nk, min:0.07135605812072754, max:0.16435332596302032, sum:0.9999998211860657, curr_post:[0.14711757 0.17575271]  curr_lik:[0.14821805 0.1711992 ], train_k:7, 

DEBUG:root:valid_calibration:101.14372286022218, best_calibration:100.18394339797842, valid_ci:0.5238161430821981,best_ci:0.5238161430821981, best_epoch:141 
 
DEBUG:root:Iteration: 705 epochs:141, Train Loss: 1714.3765869140625, Reg:1.3776605129241943, Calibration:69.42375946044922, Accuracy:1644.4095458984375,  CI:0.4965305083961697, Clustering:0.5433548092842102Valid Loss:3975.02201438969, Reg:2.9439169626969557, Calibration:101.14372286022218, Accuracy:3872.273241352831, CI:0.5238161430821981, Clustering:1.6052051741852718, * 

DEBUG:root: Final curr_post:[0.22138081 0.23772989], curr_lik:[0.19874361 0.2245298 ], K:8
DEBUG:root:pred_surv:0.4151749908924103,  emp_surv:0.3288734257221222,  km_loss:57.486202239990234, len_unique_t:414, curr_pop_nk, min:0.07179192453622818, max:0.16412974894046783, sum:0.9999997615814209, curr_post:[0.22138081 0.23772989]  curr_lik:[0.19874361 0.2245298 ], train_k:8, 

DEBUG:root:valid_calibration:97.75701343503772, best_calibration:97.75701343503772, valid_ci:0.5270595866926142,best_ci:0.5270595866926142, best_epoch:142 
 
DEBUG:root:Iteration: 710 epochs:142, Train Loss: 1891.0550537109375, Reg:1.3780771493911743, Calibration:60.38655471801758, Accuracy:1830.1114501953125,  CI:0.533918389375132, Clustering:0.556987464427948Valid Loss:3933.5963583400103, Reg:2.944783013091128, Calibration:97.75701343503772, Accuracy:3834.259815705128, CI:0.5270595866926142, Clustering:1.5795150628456702, * 

DEBUG:root: Final curr_post:[0.21377654 0.22106043], curr_lik:[0.17788386 0.2235855 ], K:7
DEBUG:root:pred_surv:0.32715263962745667,  emp_surv:0.3196220397949219,  km_loss:61.91742706298828, len_unique_t:429, curr_pop_nk, min:0.07176188379526138, max:0.16439197957515717, sum:0.9999997615814209, curr_post:[0.21377654 0.22106043]  curr_lik:[0.17788386 0.2235855 ], train_k:7, 

DEBUG:root:valid_calibration:93.17195109831981, best_calibration:93.17195109831981, valid_ci:0.5310907237512742,best_ci:0.5310907237512742, best_epoch:143 
 
DEBUG:root:Iteration: 715 epochs:143, Train Loss: 1698.3240966796875, Reg:1.3784797191619873, Calibration:59.92254638671875, Accuracy:1637.82568359375,  CI:0.49487070792708776, Clustering:0.5758530497550964Valid Loss:3879.1451739449785, Reg:2.945633016080938, Calibration:93.17195109831981, Accuracy:3784.3909630408652, CI:0.5310907237512742, Clustering:1.582568399926536, * 

DEBUG:root: Final curr_post:[0.20997846 0.21278885], curr_lik:[0.17188789 0.18771008], K:7
DEBUG:root:pred_surv:0.3617643713951111,  emp_surv:0.3883558213710785,  km_loss:48.65099334716797, len_unique_t:410, curr_pop_nk, min:0.0719897672533989, max:0.1641925871372223, sum:0.9999997615814209, curr_post:[0.20997846 0.21278885]  curr_lik:[0.17188789 0.18771008], train_k:7, 

DEBUG:root:valid_calibration:92.33608408870859, best_calibration:92.33608408870859, valid_ci:0.5388286535075526,best_ci:0.5388286535075526, best_epoch:144 
 
DEBUG:root:Iteration: 720 epochs:144, Train Loss: 1652.4874267578125, Reg:1.3788460493087769, Calibration:55.894683837890625, Accuracy:1596.04638671875,  CI:0.5212933939808159, Clustering:0.5463517904281616Valid Loss:3866.864065838675, Reg:2.9464119519942846, Calibration:92.33608408870859, Accuracy:3772.979997162126, CI:0.5388286535075526, Clustering:1.5473998764641264, * 

DEBUG:root: Final curr_post:[0.14956503 0.21327627], curr_lik:[0.19178282 0.1979795 ], K:7
DEBUG:root:pred_surv:0.2837512493133545,  emp_surv:0.3802697956562042,  km_loss:60.12579345703125, len_unique_t:414, curr_pop_nk, min:0.07193225622177124, max:0.16444005072116852, sum:0.9999997019767761, curr_post:[0.14956503 0.21327627]  curr_lik:[0.19178282 0.1979795 ], train_k:7, 

DEBUG:root:valid_calibration:92.56786770290798, best_calibration:92.33608408870859, valid_ci:0.5405430451302011,best_ci:0.5405430451302011, best_epoch:145 
 
DEBUG:root:Iteration: 725 epochs:145, Train Loss: 1651.0052490234375, Reg:1.379193663597107, Calibration:54.1866455078125, Accuracy:1596.252685546875,  CI:0.5251846877098724, Clustering:0.5658801198005676Valid Loss:3868.470281617254, Reg:2.9471246605245476, Calibration:92.56786770290798, Accuracy:3774.3720682258277, CI:0.5405430451302011, Clustering:1.5306780990372355, * 

DEBUG:root: Final curr_post:[0.20174362 0.35067672], curr_lik:[0.19637482 0.3080893 ], K:8
DEBUG:root:pred_surv:0.29448550939559937,  emp_surv:0.32441145181655884,  km_loss:51.767269134521484, len_unique_t:413, curr_pop_nk, min:0.07221592217683792, max:0.16431070864200592, sum:0.9999997615814209, curr_post:[0.20174362 0.35067672]  curr_lik:[0.19637482 0.3080893 ], train_k:8, 

DEBUG:root:valid_calibration:93.02200415195563, best_calibration:92.33608408870859, valid_ci:0.5416550829394866,best_ci:0.5416550829394866, best_epoch:146 
 
DEBUG:root:Iteration: 730 epochs:146, Train Loss: 1714.7301025390625, Reg:1.3795479536056519, Calibration:55.499080657958984, Accuracy:1658.673095703125,  CI:0.5406318254486501, Clustering:0.5579902529716492Valid Loss:3870.4440125033384, Reg:2.947925757139157, Calibration:93.02200415195563, Accuracy:3775.91072799813, CI:0.5416550829394866, Clustering:1.5113060800438252, * 

DEBUG:root: Final curr_post:[0.20205784 0.26663798], curr_lik:[0.1769347  0.24919333], K:7
DEBUG:root:pred_surv:0.30702388286590576,  emp_surv:0.32783210277557373,  km_loss:61.526710510253906, len_unique_t:420, curr_pop_nk, min:0.07227937132120132, max:0.1638222336769104, sum:0.9999997615814209, curr_post:[0.20205784 0.26663798]  curr_lik:[0.1769347  0.24919333], train_k:7, 

DEBUG:root:valid_calibration:91.18891169882228, best_calibration:91.18891169882228, valid_ci:0.5442961727365397,best_ci:0.5442961727365397, best_epoch:147 
 
DEBUG:root:Iteration: 735 epochs:147, Train Loss: 1689.937255859375, Reg:1.3799645900726318, Calibration:61.17879104614258, Accuracy:1628.2308349609375,  CI:0.5449632643147732, Clustering:0.5275711417198181Valid Loss:3836.2270257411856, Reg:2.948844789439796, Calibration:91.18891169882228, Accuracy:3743.5328817775103, CI:0.5442961727365397, Clustering:1.5053745263662093, * 

DEBUG:root: Final curr_post:[0.17716858 0.2571353 ], curr_lik:[0.14797111 0.25766698], K:8
DEBUG:root:pred_surv:0.3158688247203827,  emp_surv:0.3780907988548279,  km_loss:47.403987884521484, len_unique_t:411, curr_pop_nk, min:0.07245476543903351, max:0.16392701864242554, sum:0.9999997615814209, curr_post:[0.17716858 0.2571353 ]  curr_lik:[0.14797111 0.25766698], train_k:8, 

DEBUG:root:valid_calibration:87.85773546267778, best_calibration:87.85773546267778, valid_ci:0.5469372625335928,best_ci:0.5469372625335928, best_epoch:148 
 
DEBUG:root:Iteration: 740 epochs:148, Train Loss: 1690.2137451171875, Reg:1.3804144859313965, Calibration:50.71866226196289, Accuracy:1638.949951171875,  CI:0.5079268292682927, Clustering:0.5451533198356628Valid Loss:3804.963201539129, Reg:2.949770699199448, Calibration:87.85773546267778, Accuracy:3715.6215569911856, CI:0.5469372625335928, Clustering:1.4841681362217307, * 

DEBUG:root: Final curr_post:[0.16920845 0.17224173], curr_lik:[0.12860827 0.27653426], K:7
DEBUG:root:pred_surv:0.28658396005630493,  emp_surv:0.33880579471588135,  km_loss:53.53506088256836, len_unique_t:412, curr_pop_nk, min:0.0725376084446907, max:0.16420169174671173, sum:0.9999998211860657, curr_post:[0.16920845 0.17224173]  curr_lik:[0.12860827 0.27653426], train_k:7, 

DEBUG:root:valid_calibration:83.9459997975928, best_calibration:83.9459997975928, valid_ci:0.5536558242980262,best_ci:0.5536558242980262, best_epoch:149 
 
DEBUG:root:Iteration: 745 epochs:149, Train Loss: 1774.589111328125, Reg:1.3808132410049438, Calibration:53.53013229370117, Accuracy:1720.5244140625,  CI:0.5233858284680182, Clustering:0.5346065163612366Valid Loss:3770.6823104467144, Reg:2.950616371937287, Calibration:83.9459997975928, Accuracy:3685.26621761485, CI:0.5536558242980262, Clustering:1.4701111194414969, * 

DEBUG:root:pred_surv:0.27714890241622925,  emp_surv:0.26827535033226013,  km_loss:47.24113845825195, len_unique_t:407, curr_pop_nk, min:0.07262866199016571, max:0.16417884826660156, sum:0.9999997615814209, curr_post:[0.19383852 0.26494065]  curr_lik:[0.173708   0.22208679], train_k:7, 

DEBUG:root:valid_calibration:83.25954176421858, best_calibration:83.9459997975928, valid_ci:0.5519877675840978,best_ci:0.5536558242980262, best_epoch:149 
 
DEBUG:root:Iteration: 750 epochs:150, Train Loss: 1540.3817138671875, Reg:1.3811715841293335, Calibration:43.811344146728516, Accuracy:1496.0469970703125,  CI:0.5735423833465644, Clustering:0.5233259201049805Valid Loss:3767.4354488014155, Reg:2.951376458518525, Calibration:83.25954176421858, Accuracy:3682.713956914396, CI:0.5519877675840978, Clustering:1.4622419053672724,  

DEBUG:root: Final curr_post:[0.17309567 0.2905187 ], curr_lik:[0.15700759 0.24596097], K:5
DEBUG:root:pred_surv:0.3043142259120941,  emp_surv:0.2585394084453583,  km_loss:49.99802780151367, len_unique_t:413, curr_pop_nk, min:0.07289706915616989, max:0.16448968648910522, sum:0.9999997615814209, curr_post:[0.17309567 0.2905187 ]  curr_lik:[0.15700759 0.24596097], train_k:5, 

DEBUG:root:valid_calibration:80.13594863761185, best_calibration:80.13594863761185, valid_ci:0.5590306737095728,best_ci:0.5590306737095728, best_epoch:151 
 
DEBUG:root:Iteration: 755 epochs:151, Train Loss: 1601.4483642578125, Reg:1.3814764022827148, Calibration:49.488426208496094, Accuracy:1551.42822265625,  CI:0.4919136878814298, Clustering:0.531689465045929Valid Loss:3729.3875930655713, Reg:2.951984476839375, Calibration:80.13594863761185, Accuracy:3647.7981958633814, CI:0.5590306737095728, Clustering:1.4537805930162087, * 

DEBUG:root:pred_surv:0.34056419134140015,  emp_surv:0.3058398962020874,  km_loss:50.51822280883789, len_unique_t:411, curr_pop_nk, min:0.07308566570281982, max:0.16421200335025787, sum:0.9999997615814209, curr_post:[0.19221444 0.21090294]  curr_lik:[0.16715561 0.17163168], train_k:7, 

DEBUG:root:valid_calibration:81.55414385673326, best_calibration:80.13594863761185, valid_ci:0.5564822537299602,best_ci:0.5590306737095728, best_epoch:151 
 
DEBUG:root:Iteration: 760 epochs:152, Train Loss: 1623.052490234375, Reg:1.3817307949066162, Calibration:44.70392990112305, Accuracy:1577.81298828125,  CI:0.5597775125735232, Clustering:0.535541296005249Valid Loss:3734.3901283720616, Reg:2.952553522892487, Calibration:81.55414385673326, Accuracy:3651.3922275641025, CI:0.5564822537299602, Clustering:1.4437839516207702,  

DEBUG:root: Final curr_post:[0.17067097 0.17196079], curr_lik:[0.15051073 0.17592186], K:7
DEBUG:root:pred_surv:0.29026874899864197,  emp_surv:0.3346883952617645,  km_loss:49.54395294189453, len_unique_t:419, curr_pop_nk, min:0.07312693446874619, max:0.1645088791847229, sum:0.9999997615814209, curr_post:[0.17067097 0.17196079]  curr_lik:[0.15051073 0.17592186], train_k:7, 

DEBUG:root:valid_calibration:79.72987085326105, best_calibration:79.72987085326105, valid_ci:0.5653322212955241,best_ci:0.5653322212955241, best_epoch:153 
 
DEBUG:root:Iteration: 765 epochs:153, Train Loss: 1575.870361328125, Reg:1.3820602893829346, Calibration:51.40431213378906, Accuracy:1523.9534912109375,  CI:0.558785779769787, Clustering:0.5126209855079651Valid Loss:3729.133540748531, Reg:2.9532606275672584, Calibration:79.72987085326105, Accuracy:3647.976867154113, CI:0.5653322212955241, Clustering:1.4269464036338348, * 

DEBUG:root: Final curr_post:[0.16871142 0.217776  ], curr_lik:[0.17409056 0.175265  ], K:7
DEBUG:root:pred_surv:0.3135806620121002,  emp_surv:0.3254213333129883,  km_loss:46.982295989990234, len_unique_t:413, curr_pop_nk, min:0.07310550659894943, max:0.1645723581314087, sum:0.9999997615814209, curr_post:[0.16871142 0.217776  ]  curr_lik:[0.17409056 0.175265  ], train_k:7, 

DEBUG:root:valid_calibration:76.63035596537793, best_calibration:76.63035596537793, valid_ci:0.5685756649059401,best_ci:0.5685756649059401, best_epoch:154 
 
DEBUG:root:Iteration: 770 epochs:154, Train Loss: 1626.4671630859375, Reg:1.3823878765106201, Calibration:48.9547233581543, Accuracy:1576.9903564453125,  CI:0.5171774861577364, Clustering:0.5221054553985596Valid Loss:3694.866473858173, Reg:2.953949901792738, Calibration:76.63035596537793, Accuracy:3616.822332398504, CI:0.5685756649059401, Clustering:1.4135180375514886, * 

DEBUG:root: Final curr_post:[0.17415363 0.20519805], curr_lik:[0.14991687 0.17732468], K:8
DEBUG:root:pred_surv:0.3809819519519806,  emp_surv:0.32491540908813477,  km_loss:38.88249969482422, len_unique_t:419, curr_pop_nk, min:0.07315737754106522, max:0.16454806923866272, sum:0.9999998807907104, curr_post:[0.17415363 0.20519805]  curr_lik:[0.14991687 0.17732468], train_k:8, 

DEBUG:root:valid_calibration:76.68846489017845, best_calibration:76.63035596537793, valid_ci:0.5732554906866834,best_ci:0.5732554906866834, best_epoch:155 
 
DEBUG:root:Iteration: 775 epochs:155, Train Loss: 1593.58544921875, Reg:1.3827202320098877, Calibration:46.20331954956055, Accuracy:1546.8592529296875,  CI:0.5485819387361203, Clustering:0.5228793621063232Valid Loss:3703.5240760216343, Reg:2.9546926673660927, Calibration:76.68846489017845, Accuracy:3625.4290719317573, CI:0.5732554906866834, Clustering:1.406455269226661, * 

DEBUG:root: Final curr_post:[0.1741198  0.30560085], curr_lik:[0.15960774 0.28131875], K:6
DEBUG:root:pred_surv:0.3212117552757263,  emp_surv:0.36436641216278076,  km_loss:44.35025405883789, len_unique_t:411, curr_pop_nk, min:0.07337486743927002, max:0.16448713839054108, sum:0.9999998807907104, curr_post:[0.1741198  0.30560085]  curr_lik:[0.15960774 0.28131875], train_k:6, 

DEBUG:root:valid_calibration:73.5171880477514, best_calibration:73.5171880477514, valid_ci:0.5765916041145399,best_ci:0.5765916041145399, best_epoch:156 
 
DEBUG:root:Iteration: 780 epochs:156, Train Loss: 1433.1319580078125, Reg:1.3830654621124268, Calibration:45.667240142822266, Accuracy:1386.94189453125,  CI:0.5466577712736195, Clustering:0.5228247046470642Valid Loss:3665.6880174946577, Reg:2.955411489193256, Calibration:73.5171880477514, Accuracy:3590.7806657318374, CI:0.5765916041145399, Clustering:1.3905483433324046, * 

DEBUG:root: Final curr_post:[0.19095343 0.23407768], curr_lik:[0.15548001 0.24197108], K:7
DEBUG:root:pred_surv:0.34806951880455017,  emp_surv:0.34199291467666626,  km_loss:47.77834701538086, len_unique_t:438, curr_pop_nk, min:0.07347948849201202, max:0.1645556539297104, sum:0.9999997615814209, curr_post:[0.19095343 0.23407768]  curr_lik:[0.15548001 0.24197108], train_k:7, 

DEBUG:root:valid_calibration:71.91321381136902, best_calibration:71.91321381136902, valid_ci:0.5771939579279028,best_ci:0.5771939579279028, best_epoch:157 
 
DEBUG:root:Iteration: 785 epochs:157, Train Loss: 1617.740478515625, Reg:1.3834360837936401, Calibration:45.43970489501953, Accuracy:1571.77392578125,  CI:0.5475873691679971, Clustering:0.5268840789794922Valid Loss:3641.8102297008545, Reg:2.956227104888003, Calibration:71.91321381136902, Accuracy:3568.4997036925747, CI:0.5771939579279028, Clustering:1.3978960167648444, * 

DEBUG:root: Final curr_post:[0.17991588 0.19159243], curr_lik:[0.16174269 0.16339737], K:8
DEBUG:root:pred_surv:0.29944998025894165,  emp_surv:0.31399449706077576,  km_loss:41.38804244995117, len_unique_t:416, curr_pop_nk, min:0.07377053797245026, max:0.16437150537967682, sum:0.9999998211860657, curr_post:[0.17991588 0.19159243]  curr_lik:[0.16174269 0.16339737], train_k:8, 

DEBUG:root:valid_calibration:69.74380036704561, best_calibration:69.74380036704561, valid_ci:0.5815031044388843,best_ci:0.5815031044388843, best_epoch:158 
 
DEBUG:root:Iteration: 790 epochs:158, Train Loss: 1576.82763671875, Reg:1.3838152885437012, Calibration:44.69430160522461, Accuracy:1531.6212158203125,  CI:0.5736644492511122, Clustering:0.5120775699615479Valid Loss:3629.787868923611, Reg:2.957022852367825, Calibration:69.74380036704561, Accuracy:3558.660262670272, CI:0.5815031044388843, Clustering:1.3841598207115107, * 

DEBUG:root: Final curr_post:[0.2079408  0.23511247], curr_lik:[0.18444389 0.1969637 ], K:7
DEBUG:root:pred_surv:0.3057183027267456,  emp_surv:0.3317107856273651,  km_loss:42.687049865722656, len_unique_t:415, curr_pop_nk, min:0.07348980009555817, max:0.16429102420806885, sum:0.9999998211860657, curr_post:[0.2079408  0.23511247]  curr_lik:[0.18444389 0.1969637 ], train_k:7, 

DEBUG:root:valid_calibration:70.088256118644, best_calibration:69.74380036704561, valid_ci:0.5815031044388843,best_ci:0.5815031044388843, best_epoch:159 
 
DEBUG:root:Iteration: 795 epochs:159, Train Loss: 1774.14990234375, Reg:1.384149193763733, Calibration:42.48724365234375, Accuracy:1731.1365966796875,  CI:0.5323741007194245, Clustering:0.5260691046714783Valid Loss:3624.772291917067, Reg:2.9577016830444336, Calibration:70.088256118644, Accuracy:3553.3019497863247, CI:0.5815031044388843, Clustering:1.3823730823321219, * 

DEBUG:root: Final curr_post:[0.16366231 0.2502148 ], curr_lik:[0.14379807 0.25253388], K:6
DEBUG:root:pred_surv:0.32837310433387756,  emp_surv:0.34895241260528564,  km_loss:36.318790435791016, len_unique_t:419, curr_pop_nk, min:0.07366958260536194, max:0.16412557661533356, sum:0.9999998807907104, curr_post:[0.16366231 0.2502148 ]  curr_lik:[0.14379807 0.25253388], train_k:6, 

DEBUG:root:valid_calibration:68.13980982853816, best_calibration:68.13980982853816, valid_ci:0.585673246223705,best_ci:0.585673246223705, best_epoch:160 
 
DEBUG:root:Iteration: 800 epochs:160, Train Loss: 1586.7376708984375, Reg:1.3844081163406372, Calibration:37.34061050415039, Accuracy:1548.903564453125,  CI:0.5649376669634907, Clustering:0.49358636140823364Valid Loss:3604.01120960203, Reg:2.958232266271216, Calibration:68.13980982853816, Accuracy:3534.496600811298, CI:0.585673246223705, Clustering:1.3744329285417867, * 

DEBUG:root:ITER:800, Train CI:0.5684844780159805, Clustering:0.5025413036346436,Reg:1.3844527006149292, Accuracy:1528.47705078125, Calibration:38.222652435302734, Cost:1567.2022705078125
DEBUG:root: Final curr_post:[0.18027021 0.23707172], curr_lik:[0.17769174 0.19811398], K:6
DEBUG:root:pred_surv:0.3955989181995392,  emp_surv:0.37928009033203125,  km_loss:38.438568115234375, len_unique_t:415, curr_pop_nk, min:0.07389815151691437, max:0.16460229456424713, sum:0.9999997615814209, curr_post:[0.18027021 0.23707172]  curr_lik:[0.17769174 0.19811398], train_k:6, 

DEBUG:root:valid_calibration:68.02996203430698, best_calibration:68.02996203430698, valid_ci:0.5897507181910852,best_ci:0.5897507181910852, best_epoch:161 
 
DEBUG:root:Iteration: 805 epochs:161, Train Loss: 1536.8468017578125, Reg:1.3846379518508911, Calibration:38.5785026550293, Accuracy:1497.75732421875,  CI:0.5673609908193313, Clustering:0.5109368562698364Valid Loss:3606.5037393162393, Reg:2.9587424718416653, Calibration:68.02996203430698, Accuracy:3537.1041583199785, CI:0.5897507181910852, Clustering:1.3697570205753684, * 

DEBUG:root: Final curr_post:[0.16272737 0.2026133 ], curr_lik:[0.14064224 0.16622303], K:7
DEBUG:root:pred_surv:0.4015117287635803,  emp_surv:0.3148801922798157,  km_loss:40.08451843261719, len_unique_t:411, curr_pop_nk, min:0.0741053968667984, max:0.16452233493328094, sum:0.9999997615814209, curr_post:[0.16272737 0.2026133 ]  curr_lik:[0.14064224 0.16622303], train_k:7, 

DEBUG:root:valid_calibration:66.325318100106, best_calibration:66.325318100106, valid_ci:0.5927624872579002,best_ci:0.5927624872579002, best_epoch:162 
 
DEBUG:root:Iteration: 810 epochs:162, Train Loss: 1712.1661376953125, Reg:1.3849081993103027, Calibration:38.27167892456055, Accuracy:1673.404296875,  CI:0.5512568399452804, Clustering:0.4901508092880249Valid Loss:3584.8122621193907, Reg:2.9593104990119605, Calibration:66.325318100106, Accuracy:3517.129490518162, CI:0.5927624872579002, Clustering:1.3571852802211402, * 

DEBUG:root: Final curr_post:[0.22186452 0.23109807], curr_lik:[0.19282967 0.21100901], K:7
DEBUG:root:pred_surv:0.2555203139781952,  emp_surv:0.35331666469573975,  km_loss:39.31917953491211, len_unique_t:411, curr_pop_nk, min:0.0742759183049202, max:0.16381345689296722, sum:0.9999997615814209, curr_post:[0.22186452 0.23109807]  curr_lik:[0.19282967 0.21100901], train_k:7, 

DEBUG:root:valid_calibration:65.55736981905423, best_calibration:65.55736981905423, valid_ci:0.5934111759799833,best_ci:0.5934111759799833, best_epoch:163 
 
DEBUG:root:Iteration: 815 epochs:163, Train Loss: 1581.58447265625, Reg:1.385178804397583, Calibration:35.047035217285156, Accuracy:1546.0537109375,  CI:0.5878234580424448, Clustering:0.4837256669998169Valid Loss:3555.61033069578, Reg:2.9599164795671773, Calibration:65.55736981905423, Accuracy:3488.713712773771, CI:0.5934111759799833, Clustering:1.3392119326143181, * 

DEBUG:root: Final curr_post:[0.16444038 0.22690013], curr_lik:[0.14247215 0.19820233], K:7
DEBUG:root:pred_surv:0.34038349986076355,  emp_surv:0.3872376084327698,  km_loss:38.076053619384766, len_unique_t:434, curr_pop_nk, min:0.07416076958179474, max:0.1638890951871872, sum:0.9999997615814209, curr_post:[0.16444038 0.22690013]  curr_lik:[0.14247215 0.19820233], train_k:7, 

DEBUG:root:valid_calibration:64.0113537128155, best_calibration:64.0113537128155, valid_ci:0.5954035770549532,best_ci:0.5954035770549532, best_epoch:164 
 
DEBUG:root:Iteration: 820 epochs:164, Train Loss: 1594.6529541015625, Reg:1.3854577541351318, Calibration:37.758148193359375, Accuracy:1556.40478515625,  CI:0.5482675746044462, Clustering:0.4900129735469818Valid Loss:3553.5813030014688, Reg:2.9604952050070477, Calibration:64.0113537128155, Accuracy:3488.243950737847, CI:0.5954035770549532, Clustering:1.326434505291474, * 

DEBUG:root: Final curr_post:[0.19678396 0.34426233], curr_lik:[0.18171293 0.30192214], K:7
DEBUG:root:pred_surv:0.44454675912857056,  emp_surv:0.3928035795688629,  km_loss:34.26659393310547, len_unique_t:422, curr_pop_nk, min:0.0740826353430748, max:0.16411030292510986, sum:0.9999998211860657, curr_post:[0.19678396 0.34426233]  curr_lik:[0.18171293 0.30192214], train_k:7, 

DEBUG:root:valid_calibration:60.737585410093644, best_calibration:60.737585410093644, valid_ci:0.5981373366694468,best_ci:0.5981373366694468, best_epoch:165 
 
DEBUG:root:Iteration: 825 epochs:165, Train Loss: 1538.37255859375, Reg:1.3856761455535889, Calibration:34.09478759765625, Accuracy:1503.7763671875,  CI:0.5962050386523841, Clustering:0.5014277696609497Valid Loss:3511.9654989650103, Reg:2.9609081072685046, Calibration:60.737585410093644, Accuracy:3449.9031784188032, CI:0.5981373366694468, Clustering:1.324652097164056, * 

DEBUG:root: Final curr_post:[0.17586702 0.24378727], curr_lik:[0.14397767 0.22191386], K:7
DEBUG:root:pred_surv:0.3243395984172821,  emp_surv:0.30462390184402466,  km_loss:33.88032913208008, len_unique_t:413, curr_pop_nk, min:0.07429052144289017, max:0.1644061952829361, sum:0.9999997615814209, curr_post:[0.17586702 0.24378727]  curr_lik:[0.14397767 0.22191386], train_k:7, 

DEBUG:root:valid_calibration:60.06521241277711, best_calibration:60.06521241277711, valid_ci:0.6056899267908442,best_ci:0.6056899267908442, best_epoch:166 
 
DEBUG:root:Iteration: 830 epochs:166, Train Loss: 1501.94384765625, Reg:1.3858816623687744, Calibration:37.33330154418945, Accuracy:1464.118408203125,  CI:0.574663295994421, Clustering:0.492191880941391Valid Loss:3518.1381356002935, Reg:2.961408378731491, Calibration:60.06521241277711, Accuracy:3456.7667643229165, CI:0.6056899267908442, Clustering:1.305825180477566, * 

DEBUG:root:pred_surv:0.40519410371780396,  emp_surv:0.28692132234573364,  km_loss:31.4130802154541, len_unique_t:405, curr_pop_nk, min:0.07453439384698868, max:0.16422732174396515, sum:0.9999997615814209, curr_post:[0.18852736 0.2627422 ]  curr_lik:[0.1686912 0.2235876], train_k:7, 

DEBUG:root:valid_calibration:61.63015528621836, best_calibration:60.06521241277711, valid_ci:0.6063386155129274,best_ci:0.6056899267908442, best_epoch:166 
 
DEBUG:root:Iteration: 835 epochs:167, Train Loss: 1366.9805908203125, Reg:1.3862215280532837, Calibration:29.261821746826172, Accuracy:1337.2479248046875,  CI:0.6228963990963161, Clustering:0.4708779752254486Valid Loss:3511.473044370993, Reg:2.9621801824651213, Calibration:61.63015528621836, Accuracy:3448.543450771234, CI:0.6063386155129274, Clustering:1.2994051998497074,  

DEBUG:root: Final curr_post:[0.16183509 0.19272003], curr_lik:[0.15207593 0.21741691], K:6
DEBUG:root:pred_surv:0.3599929213523865,  emp_surv:0.3271947205066681,  km_loss:33.0920295715332, len_unique_t:404, curr_pop_nk, min:0.07463939487934113, max:0.16412502527236938, sum:0.9999998211860657, curr_post:[0.16183509 0.19272003]  curr_lik:[0.15207593 0.21741691], train_k:6, 

DEBUG:root:valid_calibration:57.53600699269873, best_calibration:57.53600699269873, valid_ci:0.6137985358168845,best_ci:0.6137985358168845, best_epoch:168 
 
DEBUG:root:Iteration: 840 epochs:168, Train Loss: 1423.256103515625, Reg:1.38661789894104, Calibration:35.29922866821289, Accuracy:1387.4566650390625,  CI:0.5718000639454333, Clustering:0.5001881718635559Valid Loss:3471.0484692174145, Reg:2.96303808179676, Calibration:57.53600699269873, Accuracy:3412.213186932425, CI:0.6137985358168845, Clustering:1.2988862064149644, * 

DEBUG:root: Final curr_post:[0.15956028 0.2561461 ], curr_lik:[0.13837612 0.26029426], K:8
DEBUG:root:pred_surv:0.42509305477142334,  emp_surv:0.469164103269577,  km_loss:23.177127838134766, len_unique_t:418, curr_pop_nk, min:0.07463229447603226, max:0.16396483778953552, sum:0.9999997615814209, curr_post:[0.15956028 0.2561461 ]  curr_lik:[0.13837612 0.26029426], train_k:8, 

DEBUG:root:valid_calibration:51.585311563605934, best_calibration:51.585311563605934, valid_ci:0.6186173663237884,best_ci:0.6186173663237884, best_epoch:169 
 
DEBUG:root:Iteration: 845 epochs:169, Train Loss: 1344.9547119140625, Reg:1.387070655822754, Calibration:25.273895263671875, Accuracy:1319.2066650390625,  CI:0.5842786387601854, Clustering:0.4741062521934509Valid Loss:3428.318643162393, Reg:2.964015445138654, Calibration:51.585311563605934, Accuracy:3375.4444611378203, CI:0.6186173663237884, Clustering:1.2894299549934192, * 

DEBUG:root: Final curr_post:[0.15794066 0.26415473], curr_lik:[0.13369626 0.23543674], K:6
DEBUG:root:pred_surv:0.33313384652137756,  emp_surv:0.3446129262447357,  km_loss:25.426462173461914, len_unique_t:413, curr_pop_nk, min:0.07486181706190109, max:0.16350235044956207, sum:0.9999997019767761, curr_post:[0.15794066 0.26415473]  curr_lik:[0.13369626 0.23543674], train_k:6, 

DEBUG:root:valid_calibration:47.911464658557854, best_calibration:47.911464658557854, valid_ci:0.6229728477434899,best_ci:0.6229728477434899, best_epoch:170 
 
DEBUG:root:Iteration: 850 epochs:170, Train Loss: 1328.4127197265625, Reg:1.38753080368042, Calibration:26.62712860107422, Accuracy:1301.313232421875,  CI:0.5909700298404186, Clustering:0.4724363386631012Valid Loss:3347.568870609642, Reg:2.9649956104082937, Calibration:47.911464658557854, Accuracy:3298.3742738381407, CI:0.6229728477434899, Clustering:1.2827668434534316, * 

DEBUG:root: Final curr_post:[0.20468216 0.25705636], curr_lik:[0.18105938 0.21758264], K:6
DEBUG:root:pred_surv:0.3861927092075348,  emp_surv:0.37303274869918823,  km_loss:21.172138214111328, len_unique_t:412, curr_pop_nk, min:0.07480703294277191, max:0.16376151144504547, sum:0.9999997615814209, curr_post:[0.20468216 0.25705636]  curr_lik:[0.18105938 0.21758264], train_k:6, 

DEBUG:root:valid_calibration:47.25872757088425, best_calibration:47.25872757088425, valid_ci:0.6283476971550366,best_ci:0.6283476971550366, best_epoch:171 
 
DEBUG:root:Iteration: 855 epochs:171, Train Loss: 1405.20166015625, Reg:1.3879791498184204, Calibration:23.86482810974121, Accuracy:1380.84521484375,  CI:0.5928010149791274, Clustering:0.4915405213832855Valid Loss:3316.5457961905713, Reg:2.965974502074413, Calibration:47.25872757088425, Accuracy:3268.0069360977564, CI:0.6283476971550366, Clustering:1.280414625110789, * 

DEBUG:root: Final curr_post:[0.19454774 0.2401274 ], curr_lik:[0.1731881  0.20018092], K:5
DEBUG:root:pred_surv:0.37917888164520264,  emp_surv:0.4229046702384949,  km_loss:21.904634475708008, len_unique_t:411, curr_pop_nk, min:0.07494101673364639, max:0.16352109611034393, sum:0.9999997615814209, curr_post:[0.19454774 0.2401274 ]  curr_lik:[0.1731881  0.20018092], train_k:5, 

DEBUG:root:valid_calibration:43.49479104718591, best_calibration:43.49479104718591, valid_ci:0.6302010935038458,best_ci:0.6302010935038458, best_epoch:172 
 
DEBUG:root:Iteration: 860 epochs:172, Train Loss: 1482.8985595703125, Reg:1.388481616973877, Calibration:17.636444091796875, Accuracy:1464.7947998046875,  CI:0.5752351097178683, Clustering:0.4672977328300476Valid Loss:3282.5069590511484, Reg:2.967023951375586, Calibration:43.49479104718591, Accuracy:3237.745496961805, CI:0.6302010935038458, Clustering:1.2677308076467269, * 

DEBUG:root: Final curr_post:[0.15313044 0.28689975], curr_lik:[0.1342705  0.29599306], K:7
DEBUG:root:pred_surv:0.39221978187561035,  emp_surv:0.330667108297348,  km_loss:22.672061920166016, len_unique_t:408, curr_pop_nk, min:0.07491609454154968, max:0.16342958807945251, sum:0.9999997615814209, curr_post:[0.15313044 0.28689975]  curr_lik:[0.1342705  0.29599306], train_k:7, 

DEBUG:root:valid_calibration:39.57023783626719, best_calibration:39.57023783626719, valid_ci:0.6424798443147067,best_ci:0.6424798443147067, best_epoch:173 
 
DEBUG:root:Iteration: 865 epochs:173, Train Loss: 1382.7818603515625, Reg:1.3889416456222534, Calibration:27.85268211364746, Accuracy:1354.461181640625,  CI:0.6274067388688327, Clustering:0.4680582582950592Valid Loss:3198.2041057358438, Reg:2.968030352877755, Calibration:39.57023783626719, Accuracy:3157.3661086905713, CI:0.6424798443147067, Clustering:1.2680232270151122, * 

DEBUG:root: Final curr_post:[0.17012942 0.3038325 ], curr_lik:[0.15187523 0.26056173], K:7
DEBUG:root:pred_surv:0.3682229220867157,  emp_surv:0.40016084909439087,  km_loss:16.78414535522461, len_unique_t:431, curr_pop_nk, min:0.07520351558923721, max:0.1634431928396225, sum:0.9999997615814209, curr_post:[0.17012942 0.3038325 ]  curr_lik:[0.15187523 0.26056173], train_k:7, 

DEBUG:root:valid_calibration:32.33474543970874, best_calibration:32.33474543970874, valid_ci:0.6531832082290798,best_ci:0.6531832082290798, best_epoch:174 
 
DEBUG:root:Iteration: 870 epochs:174, Train Loss: 1367.4581298828125, Reg:1.3894199132919312, Calibration:17.78455352783203, Accuracy:1349.196533203125,  CI:0.6141898897564485, Clustering:0.4770961105823517Valid Loss:3113.839695596287, Reg:2.9690477073702035, Calibration:32.33474543970874, Accuracy:3080.239059578659, CI:0.6531832082290798, Clustering:1.2661930587556627, * 

DEBUG:root: Final curr_post:[0.20614979 0.2076888 ], curr_lik:[0.17188361 0.1910719 ], K:7
DEBUG:root:pred_surv:0.3629896640777588,  emp_surv:0.3075942099094391,  km_loss:14.577169418334961, len_unique_t:418, curr_pop_nk, min:0.07508688420057297, max:0.16341443359851837, sum:0.9999997615814209, curr_post:[0.20614979 0.2076888 ]  curr_lik:[0.17188361 0.1910719 ], train_k:7, 

DEBUG:root:valid_calibration:27.39939119061853, best_calibration:27.39939119061853, valid_ci:0.665739968492262,best_ci:0.665739968492262, best_epoch:175 
 
DEBUG:root:Iteration: 875 epochs:175, Train Loss: 1426.25244140625, Reg:1.3898898363113403, Calibration:11.476276397705078, Accuracy:1414.3096923828125,  CI:0.6090317856835215, Clustering:0.4664723575115204Valid Loss:2990.8050797943374, Reg:2.9700459578098393, Calibration:27.39939119061853, Accuracy:2962.1404664129273, CI:0.665739968492262, Clustering:1.2647481555612679, * 

DEBUG:root: Final curr_post:[0.20798859 0.2770755 ], curr_lik:[0.19623108 0.23723358], K:8
DEBUG:root:pred_surv:0.3447432816028595,  emp_surv:0.3241817057132721,  km_loss:14.51373291015625, len_unique_t:424, curr_pop_nk, min:0.0751492902636528, max:0.16329342126846313, sum:0.9999997615814209, curr_post:[0.20798859 0.2770755 ]  curr_lik:[0.19623108 0.23723358], train_k:8, 

DEBUG:root:valid_calibration:23.225961587367912, best_calibration:23.225961587367912, valid_ci:0.6789454174775276,best_ci:0.6789454174775276, best_epoch:176 
 
DEBUG:root:Iteration: 880 epochs:176, Train Loss: 1342.9530029296875, Reg:1.3903316259384155, Calibration:12.717581748962402, Accuracy:1329.750244140625,  CI:0.6006826644600745, Clustering:0.4852388799190521Valid Loss:2868.8722268129004, Reg:2.970966518434704, Calibration:23.225961587367912, Accuracy:2844.382783286592, CI:0.6789454174775276, Clustering:1.2640545510838173, * 

DEBUG:root: Final curr_post:[0.16909578 0.20521992], curr_lik:[0.14782873 0.21182783], K:6
DEBUG:root:pred_surv:0.3300284147262573,  emp_surv:0.3378187119960785,  km_loss:8.735499382019043, len_unique_t:401, curr_pop_nk, min:0.07522905617952347, max:0.1633300632238388, sum:0.9999997615814209, curr_post:[0.16909578 0.20521992]  curr_lik:[0.14782873 0.21182783], train_k:6, 

DEBUG:root:valid_calibration:23.93974402011969, best_calibration:23.225961587367912, valid_ci:0.6940042628116022,best_ci:0.6940042628116022, best_epoch:177 
 
DEBUG:root:Iteration: 885 epochs:177, Train Loss: 1252.8958740234375, Reg:1.3907335996627808, Calibration:6.819028377532959, Accuracy:1245.5986328125,  CI:0.6231631113984055, Clustering:0.4783066213130951Valid Loss:2862.560826489049, Reg:2.971804804272122, Calibration:23.93974402011969, Accuracy:2837.3645228198448, CI:0.6940042628116022, Clustering:1.2563836370777879, * 

DEBUG:root:pred_surv:0.34737470746040344,  emp_surv:0.24345143139362335,  km_loss:17.519380569458008, len_unique_t:430, curr_pop_nk, min:0.07530011236667633, max:0.16329391300678253, sum:0.9999998807907104, curr_post:[0.16752104 0.1804077 ]  curr_lik:[0.1345644  0.18314211], train_k:6, 

DEBUG:root:valid_calibration:25.700133070986492, best_calibration:23.225961587367912, valid_ci:0.6903438050227041,best_ci:0.6940042628116022, best_epoch:177 
 
DEBUG:root:Iteration: 890 epochs:178, Train Loss: 1283.70068359375, Reg:1.3910387754440308, Calibration:19.7373104095459, Accuracy:1263.5015869140625,  CI:0.6155768261964736, Clustering:0.46184319257736206Valid Loss:2876.816969651442, Reg:2.9724477193294425, Calibration:25.700133070986492, Accuracy:2849.868904831063, CI:0.6903438050227041, Clustering:1.2480997376971774,  

DEBUG:root:pred_surv:0.31487131118774414,  emp_surv:0.2699792981147766,  km_loss:19.485578536987305, len_unique_t:419, curr_pop_nk, min:0.07519799470901489, max:0.16333618760108948, sum:0.9999997615814209, curr_post:[0.21289155 0.333055  ]  curr_lik:[0.20542823 0.29258665], train_k:8, 

DEBUG:root:valid_calibration:29.0636241945446, best_calibration:23.225961587367912, valid_ci:0.6883514039477342,best_ci:0.6940042628116022, best_epoch:177 
 
DEBUG:root:Iteration: 895 epochs:179, Train Loss: 1288.8643798828125, Reg:1.3913599252700806, Calibration:16.008031845092773, Accuracy:1272.3818359375,  CI:0.667454041285817, Clustering:0.47447875142097473Valid Loss:2884.6161671173877, Reg:2.973148710707314, Calibration:29.0636241945446, Accuracy:2854.298909505208, CI:0.6883514039477342, Clustering:1.2534600801956959,  

DEBUG:root:pred_surv:0.3219723701477051,  emp_surv:0.3644976317882538,  km_loss:16.011127471923828, len_unique_t:408, curr_pop_nk, min:0.07519672065973282, max:0.16332395374774933, sum:0.9999997615814209, curr_post:[0.178567   0.33309463]  curr_lik:[0.17124377 0.2909393 ], train_k:6, 

DEBUG:root:valid_calibration:31.209774506397736, best_calibration:23.225961587367912, valid_ci:0.6947456213511259,best_ci:0.6940042628116022, best_epoch:177 
 
DEBUG:root:Iteration: 900 epochs:180, Train Loss: 1312.0093994140625, Reg:1.3917160034179688, Calibration:11.459532737731934, Accuracy:1300.07958984375,  CI:0.6214131629288941, Clustering:0.47033724188804626Valid Loss:2918.3563493255874, Reg:2.973897844298273, Calibration:31.209774506397736, Accuracy:2885.8945145566236, CI:0.6947456213511259, Clustering:1.2525300949047773,  

DEBUG:root:ITER:900, Train CI:0.6400341265449179, Clustering:0.47100329399108887,Reg:1.3917841911315918, Accuracy:1327.4296875, Calibration:13.74980354309082, Cost:1341.650390625
DEBUG:root:pred_surv:0.4270385801792145,  emp_surv:0.2437991350889206,  km_loss:17.228805541992188, len_unique_t:417, curr_pop_nk, min:0.07535494863986969, max:0.16334620118141174, sum:0.9999998211860657, curr_post:[0.1955677  0.31645715]  curr_lik:[0.18750328 0.27579775], train_k:7, 

DEBUG:root:valid_calibration:29.967414008246525, best_calibration:23.225961587367912, valid_ci:0.6876100454082106,best_ci:0.6940042628116022, best_epoch:177 
 
DEBUG:root:Iteration: 905 epochs:181, Train Loss: 1282.6004638671875, Reg:1.3920490741729736, Calibration:20.880077362060547, Accuracy:1261.262451171875,  CI:0.6584743797820543, Clustering:0.45785605907440186Valid Loss:2898.7142448751333, Reg:2.9746115717113524, Calibration:29.967414008246525, Accuracy:2867.501022469284, CI:0.6876100454082106, Clustering:1.2457308351484118,  

DEBUG:root:pred_surv:0.3269662857055664,  emp_surv:0.34616249799728394,  km_loss:9.11379337310791, len_unique_t:412, curr_pop_nk, min:0.07560977339744568, max:0.1629193127155304, sum:0.9999998807907104, curr_post:[0.1580384  0.18022595]  curr_lik:[0.14234823 0.14450267], train_k:6, 

DEBUG:root:valid_calibration:27.385261323716904, best_calibration:23.225961587367912, valid_ci:0.6879807246779723,best_ci:0.6940042628116022, best_epoch:177 
 
DEBUG:root:Iteration: 910 epochs:182, Train Loss: 1257.9144287109375, Reg:1.3923850059509277, Calibration:8.10323715209961, Accuracy:1249.35595703125,  CI:0.6234702430846605, Clustering:0.4551440477371216Valid Loss:2864.369710286458, Reg:2.9753311577006283, Calibration:27.385261323716904, Accuracy:2835.7494386852295, CI:0.6879807246779723, Clustering:1.2348021706964214,  

DEBUG:root:pred_surv:0.2723810374736786,  emp_surv:0.3072409927845001,  km_loss:14.236520767211914, len_unique_t:420, curr_pop_nk, min:0.0756945088505745, max:0.16274532675743103, sum:0.9999997615814209, curr_post:[0.24401097 0.28843766]  curr_lik:[0.23533054 0.25312576], train_k:8, 

DEBUG:root:valid_calibration:28.256196242112377, best_calibration:23.225961587367912, valid_ci:0.6941896024464832,best_ci:0.6940042628116022, best_epoch:177 
 
DEBUG:root:Iteration: 915 epochs:183, Train Loss: 1332.0169677734375, Reg:1.392716646194458, Calibration:7.954780578613281, Accuracy:1323.595703125,  CI:0.6060931658943881, Clustering:0.4664876163005829Valid Loss:2865.001711071047, Reg:2.9760015825939994, Calibration:28.256196242112377, Accuracy:2835.518861428285, CI:0.6941896024464832, Clustering:1.2265158514691215,  

DEBUG:root:pred_surv:0.32861626148223877,  emp_surv:0.40734586119651794,  km_loss:12.499366760253906, len_unique_t:419, curr_pop_nk, min:0.07571611553430557, max:0.1623365432024002, sum:0.9999997615814209, curr_post:[0.15581939 0.2084956 ]  curr_lik:[0.15925139 0.20861697], train_k:7, 

DEBUG:root:valid_calibration:26.889599286592922, best_calibration:23.225961587367912, valid_ci:0.6977573904179408,best_ci:0.6940042628116022, best_epoch:177 
 
DEBUG:root:Iteration: 920 epochs:184, Train Loss: 1535.641845703125, Reg:1.3929582834243774, Calibration:10.723791122436523, Accuracy:1524.44970703125,  CI:0.5829665902188061, Clustering:0.4683283269405365Valid Loss:2851.638924362313, Reg:2.97647765559009, Calibration:26.889599286592922, Accuracy:2823.5207582131407, CI:0.6977573904179408, Clustering:1.2288068094824114,  

DEBUG:root:pred_surv:0.29675841331481934,  emp_surv:0.3530583083629608,  km_loss:12.222195625305176, len_unique_t:413, curr_pop_nk, min:0.07560870051383972, max:0.16257624328136444, sum:0.9999997615814209, curr_post:[0.20673625 0.21304756]  curr_lik:[0.17252244 0.1945285 ], train_k:5, 

DEBUG:root:valid_calibration:27.703205744425453, best_calibration:23.225961587367912, valid_ci:0.6862199981466036,best_ci:0.6940042628116022, best_epoch:177 
 
DEBUG:root:Iteration: 925 epochs:185, Train Loss: 1294.445556640625, Reg:1.3931012153625488, Calibration:12.481550216674805, Accuracy:1281.5059814453125,  CI:0.6065324949242081, Clustering:0.45797842741012573Valid Loss:2862.647162543403, Reg:2.976773641048333, Calibration:27.703205744425453, Accuracy:2833.7120643028843, CI:0.6862199981466036, Clustering:1.2320389604976034,  

DEBUG:root:pred_surv:0.35089781880378723,  emp_surv:0.18398840725421906,  km_loss:8.577028274536133, len_unique_t:415, curr_pop_nk, min:0.07572324573993683, max:0.162029430270195, sum:0.9999997615814209, curr_post:[0.20079768 0.20290835]  curr_lik:[0.18033084 0.18033677], train_k:6, 

DEBUG:root:valid_calibration:24.722853277483555, best_calibration:23.225961587367912, valid_ci:0.6850152905198776,best_ci:0.6940042628116022, best_epoch:177 
 
DEBUG:root:Iteration: 930 epochs:186, Train Loss: 1225.3111572265625, Reg:1.3932551145553589, Calibration:5.79372501373291, Accuracy:1219.062744140625,  CI:0.6329986760812003, Clustering:0.45469045639038086Valid Loss:2828.504513471554, Reg:2.977082107821081, Calibration:24.722853277483555, Accuracy:2802.559877053285, CI:0.6850152905198776, Clustering:1.2219755822776728,  

DEBUG:root:pred_surv:0.4116886556148529,  emp_surv:0.3420245051383972,  km_loss:7.798192501068115, len_unique_t:397, curr_pop_nk, min:0.07563097774982452, max:0.16195806860923767, sum:0.9999997019767761, curr_post:[0.18638416 0.26958725]  curr_lik:[0.1637834  0.23023215], train_k:7, 

DEBUG:root:valid_calibration:27.188152329534546, best_calibration:23.225961587367912, valid_ci:0.6919655268279121,best_ci:0.6940042628116022, best_epoch:177 
 
DEBUG:root:Iteration: 935 epochs:187, Train Loss: 1366.275634765625, Reg:1.3933876752853394, Calibration:4.408589839935303, Accuracy:1361.4208984375,  CI:0.610088825529115, Clustering:0.44612500071525574Valid Loss:2862.6289041633277, Reg:2.9774165561056543, Calibration:27.188152329534546, Accuracy:2834.222516442975, CI:0.6919655268279121, Clustering:1.218223291584569,  

DEBUG:root: Final curr_post:[0.19482063 0.19516502], curr_lik:[0.16464123 0.2049928 ], K:6
DEBUG:root:pred_surv:0.30984818935394287,  emp_surv:0.28074759244918823,  km_loss:10.14409065246582, len_unique_t:415, curr_pop_nk, min:0.07587623596191406, max:0.16160030663013458, sum:0.9999997019767761, curr_post:[0.19482063 0.19516502]  curr_lik:[0.16464123 0.2049928 ], train_k:6, 

DEBUG:root:valid_calibration:23.96714993012257, best_calibration:23.225961587367912, valid_ci:0.695764989342971,best_ci:0.695764989342971, best_epoch:188 
 
DEBUG:root:Iteration: 940 epochs:188, Train Loss: 1203.623779296875, Reg:1.3936105966567993, Calibration:10.076911926269531, Accuracy:1193.0986328125,  CI:0.6239164937126114, Clustering:0.44820642471313477Valid Loss:2805.2597697983438, Reg:2.9779012896056867, Calibration:23.96714993012257, Accuracy:2780.0937228732637, CI:0.695764989342971, Clustering:1.198804403981592, * 

DEBUG:root:pred_surv:0.4046839773654938,  emp_surv:0.4320248067378998,  km_loss:7.785787105560303, len_unique_t:415, curr_pop_nk, min:0.07597748935222626, max:0.16173067688941956, sum:0.9999997615814209, curr_post:[0.19032304 0.24067634]  curr_lik:[0.166151   0.20477737], train_k:6, 

DEBUG:root:valid_calibration:25.6450685680422, best_calibration:23.225961587367912, valid_ci:0.6894634417570198,best_ci:0.695764989342971, best_epoch:188 
 
DEBUG:root:Iteration: 945 epochs:189, Train Loss: 1146.9278564453125, Reg:1.3938833475112915, Calibration:8.935556411743164, Accuracy:1137.539306640625,  CI:0.6533933772241122, Clustering:0.4530102610588074Valid Loss:2802.8079301883013, Reg:2.9785003927018905, Calibration:25.6450685680422, Accuracy:2775.956113114316, CI:0.6894634417570198, Clustering:1.2064847426536756,  

DEBUG:root:pred_surv:0.4211183190345764,  emp_surv:0.3354388177394867,  km_loss:5.560335159301758, len_unique_t:410, curr_pop_nk, min:0.07595311850309372, max:0.16179072856903076, sum:0.9999998211860657, curr_post:[0.17590398 0.1765099 ]  curr_lik:[0.14564817 0.18361147], train_k:7, 

DEBUG:root:valid_calibration:23.966795358902367, best_calibration:23.225961587367912, valid_ci:0.688305069039014,best_ci:0.695764989342971, best_epoch:188 
 
DEBUG:root:Iteration: 950 epochs:190, Train Loss: 1379.3843994140625, Reg:1.3941466808319092, Calibration:8.488582611083984, Accuracy:1370.44384765625,  CI:0.6442025189605302, Clustering:0.4520394504070282Valid Loss:2790.9272022736377, Reg:2.9790724954034524, Calibration:23.966795358902367, Accuracy:2765.7637636885684, CI:0.688305069039014, Clustering:1.1965199413462582,  

DEBUG:root:pred_surv:0.3647591769695282,  emp_surv:0.2373192310333252,  km_loss:6.867824077606201, len_unique_t:421, curr_pop_nk, min:0.07597929984331131, max:0.16176846623420715, sum:0.9999997615814209, curr_post:[0.22824335 0.26504162]  curr_lik:[0.21320818 0.24373834], train_k:7, 

DEBUG:root:valid_calibration:23.783993517231735, best_calibration:23.225961587367912, valid_ci:0.6933092391807988,best_ci:0.695764989342971, best_epoch:188 
 
DEBUG:root:Iteration: 955 epochs:191, Train Loss: 1132.3719482421875, Reg:1.3944247961044312, Calibration:5.607985973358154, Accuracy:1126.3076171875,  CI:0.6229949208006264, Clustering:0.456318736076355Valid Loss:2766.987075153579, Reg:2.979656060536702, Calibration:23.783993517231735, Accuracy:2742.015610393296, CI:0.6933092391807988, Clustering:1.187575296459035,  

DEBUG:root:pred_surv:0.32043322920799255,  emp_surv:0.4084433913230896,  km_loss:10.613977432250977, len_unique_t:426, curr_pop_nk, min:0.07600921392440796, max:0.16180476546287537, sum:0.9999997019767761, curr_post:[0.20008862 0.2638278 ]  curr_lik:[0.18619919 0.22875142], train_k:6, 

DEBUG:root:valid_calibration:22.186063293717865, best_calibration:23.225961587367912, valid_ci:0.6933092391807988,best_ci:0.695764989342971, best_epoch:188 
 
DEBUG:root:Iteration: 960 epochs:192, Train Loss: 1231.9984130859375, Reg:1.394658088684082, Calibration:11.84698486328125, Accuracy:1219.70703125,  CI:0.6398481097637729, Clustering:0.4444904327392578Valid Loss:2732.9320663060894, Reg:2.9801438506851845, Calibration:22.186063293717865, Accuracy:2709.568382328392, CI:0.6933092391807988, Clustering:1.1776288350423176,  

DEBUG:root: Final curr_post:[0.18606225 0.26043713], curr_lik:[0.15628406 0.23659569], K:6
DEBUG:root:pred_surv:0.27286699414253235,  emp_surv:0.25979629158973694,  km_loss:4.986785888671875, len_unique_t:431, curr_pop_nk, min:0.07636062055826187, max:0.16104081273078918, sum:0.9999997019767761, curr_post:[0.18606225 0.26043713]  curr_lik:[0.15628406 0.23659569], train_k:6, 

DEBUG:root:valid_calibration:21.93774932470077, best_calibration:21.93774932470077, valid_ci:0.6965063478824947,best_ci:0.6965063478824947, best_epoch:193 
 
DEBUG:root:Iteration: 965 epochs:193, Train Loss: 1168.99462890625, Reg:1.3948835134506226, Calibration:8.331296920776367, Accuracy:1160.2384033203125,  CI:0.6608344849106227, Clustering:0.42493486404418945Valid Loss:2732.818864349626, Reg:2.9806191595191627, Calibration:21.93774932470077, Accuracy:2709.7034943409453, CI:0.6965063478824947, Clustering:1.1773817559592743, * 

DEBUG:root: Final curr_post:[0.18629901 0.22396971], curr_lik:[0.17378974 0.18880916], K:5
DEBUG:root:pred_surv:0.41075399518013,  emp_surv:0.38879695534706116,  km_loss:7.495516300201416, len_unique_t:414, curr_pop_nk, min:0.07626328617334366, max:0.1607588678598404, sum:0.9999998211860657, curr_post:[0.18629901 0.22396971]  curr_lik:[0.17378974 0.18880916], train_k:5, 

DEBUG:root:valid_calibration:20.422978278918144, best_calibration:20.422978278918144, valid_ci:0.7011398387545177,best_ci:0.7011398387545177, best_epoch:194 
 
DEBUG:root:Iteration: 970 epochs:194, Train Loss: 1268.2113037109375, Reg:1.395114541053772, Calibration:7.902389049530029, Accuracy:1259.888671875,  CI:0.6163995268975081, Clustering:0.42026907205581665Valid Loss:2700.6966354500532, Reg:2.981116119612995, Calibration:20.422978278918144, Accuracy:2679.100884331597, CI:0.7011398387545177, Clustering:1.1726044691525972, * 

DEBUG:root:pred_surv:0.3207302987575531,  emp_surv:0.32319700717926025,  km_loss:10.52120590209961, len_unique_t:417, curr_pop_nk, min:0.07632699608802795, max:0.16089490056037903, sum:0.9999998211860657, curr_post:[0.17892657 0.19879335]  curr_lik:[0.16735101 0.18985845], train_k:6, 

DEBUG:root:valid_calibration:21.352741453382702, best_calibration:20.422978278918144, valid_ci:0.693957927902882,best_ci:0.7011398387545177, best_epoch:194 
 
DEBUG:root:Iteration: 975 epochs:195, Train Loss: 1210.768310546875, Reg:1.3954006433486938, Calibration:8.89482307434082, Accuracy:1201.4400634765625,  CI:0.6211277301458163, Clustering:0.4335223138332367Valid Loss:2712.7419496193907, Reg:2.981752666652712, Calibration:21.352741453382702, Accuracy:2690.22467197516, CI:0.693957927902882, Clustering:1.1646127344196677,  

DEBUG:root:pred_surv:0.3222738802433014,  emp_surv:0.23723863065242767,  km_loss:11.281494140625, len_unique_t:430, curr_pop_nk, min:0.07644186913967133, max:0.1602674126625061, sum:0.9999997615814209, curr_post:[0.21581355 0.22119048]  curr_lik:[0.18593459 0.20512779], train_k:5, 

DEBUG:root:valid_calibration:20.11066420465453, best_calibration:20.422978278918144, valid_ci:0.6984987489574646,best_ci:0.7011398387545177, best_epoch:194 
 
DEBUG:root:Iteration: 980 epochs:196, Train Loss: 1300.2581787109375, Reg:1.3957093954086304, Calibration:7.176963806152344, Accuracy:1292.64111328125,  CI:0.6189148715585762, Clustering:0.4400080144405365Valid Loss:2694.3202874599356, Reg:2.982381062629895, Calibration:20.11066420465453, Accuracy:2673.0534480168267, CI:0.6984987489574646, Clustering:1.1561995642816918,  

DEBUG:root:pred_surv:0.3672560453414917,  emp_surv:0.3293081521987915,  km_loss:9.992027282714844, len_unique_t:417, curr_pop_nk, min:0.076661117374897, max:0.15982195734977722, sum:0.9999997019767761, curr_post:[0.16878244 0.22349504]  curr_lik:[0.15141766 0.18059869], train_k:8, 

DEBUG:root:valid_calibration:22.059355026636368, best_calibration:20.422978278918144, valid_ci:0.6997497914929107,best_ci:0.7011398387545177, best_epoch:194 
 
DEBUG:root:Iteration: 985 epochs:197, Train Loss: 1148.324951171875, Reg:1.3959099054336548, Calibration:12.726678848266602, Accuracy:1135.1739501953125,  CI:0.6024554689991344, Clustering:0.4243136942386627Valid Loss:2750.992995042067, Reg:2.9827873421530438, Calibration:22.059355026636368, Accuracy:2727.7670314169336, CI:0.6997497914929107, Clustering:1.166684505267021,  

DEBUG:root:pred_surv:0.3668074607849121,  emp_surv:0.2946682870388031,  km_loss:8.633834838867188, len_unique_t:417, curr_pop_nk, min:0.07645004987716675, max:0.16010820865631104, sum:0.9999997615814209, curr_post:[0.16070814 0.20560166]  curr_lik:[0.1508544  0.20931071], train_k:6, 

DEBUG:root:valid_calibration:21.937906232654537, best_calibration:20.422978278918144, valid_ci:0.6998424613103512,best_ci:0.7011398387545177, best_epoch:194 
 
DEBUG:root:Iteration: 990 epochs:198, Train Loss: 1164.834228515625, Reg:1.3960875272750854, Calibration:6.954843997955322, Accuracy:1157.44775390625,  CI:0.6324513290338135, Clustering:0.4316284954547882Valid Loss:2731.1985635349893, Reg:2.983188781982813, Calibration:21.937906232654537, Accuracy:2708.0988435663726, CI:0.6998424613103512, Clustering:1.1615517557176769,  

DEBUG:root:pred_surv:0.31427261233329773,  emp_surv:0.32266637682914734,  km_loss:7.738966464996338, len_unique_t:413, curr_pop_nk, min:0.076511450111866, max:0.15998035669326782, sum:0.9999997615814209, curr_post:[0.1865373 0.3041742]  curr_lik:[0.1796275  0.26767975], train_k:6, 

DEBUG:root:valid_calibration:20.35784517597948, best_calibration:20.422978278918144, valid_ci:0.6978963951441015,best_ci:0.7011398387545177, best_epoch:194 
 
DEBUG:root:Iteration: 995 epochs:199, Train Loss: 1151.915771484375, Reg:1.3963024616241455, Calibration:7.9483442306518555, Accuracy:1143.5313720703125,  CI:0.6276787244985428, Clustering:0.4359835982322693Valid Loss:2698.3285235543535, Reg:2.983651864222991, Calibration:20.35784517597948, Accuracy:2676.80424095219, CI:0.6978963951441015, Clustering:1.1665366398982513,  

DEBUG:root: Final curr_post:[0.19553733 0.31236595], curr_lik:[0.18943262 0.27743298], K:8
DEBUG:root:pred_surv:0.32899752259254456,  emp_surv:0.30573567748069763,  km_loss:11.816155433654785, len_unique_t:417, curr_pop_nk, min:0.0767945647239685, max:0.15942056477069855, sum:0.9999997019767761, curr_post:[0.19553733 0.31236595]  curr_lik:[0.18943262 0.27743298], train_k:8, 

DEBUG:root:valid_calibration:16.43453602097992, best_calibration:16.43453602097992, valid_ci:0.7030859049207673,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1000 epochs:200, Train Loss: 1142.73779296875, Reg:1.3965344429016113, Calibration:11.174702644348145, Accuracy:1131.1290283203125,  CI:0.6575589344160417, Clustering:0.4340229332447052Valid Loss:2663.6678581563833, Reg:2.9841493337582317, Calibration:16.43453602097992, Accuracy:2646.085820646367, CI:0.7030859049207673, Clustering:1.147482512343643, * 

DEBUG:root:ITER:1000, Train CI:0.6431756105398457, Clustering:0.4261622428894043,Reg:1.396581768989563, Accuracy:1381.114990234375, Calibration:10.159133911132812, Cost:1391.7003173828125
DEBUG:root:pred_surv:0.3950550854206085,  emp_surv:0.30733203887939453,  km_loss:10.80373764038086, len_unique_t:410, curr_pop_nk, min:0.07657511532306671, max:0.15976780652999878, sum:0.9999997615814209, curr_post:[0.16736512 0.29252276]  curr_lik:[0.14235473 0.26348084], train_k:6, 

DEBUG:root:valid_calibration:19.249019459781483, best_calibration:16.43453602097992, valid_ci:0.6994254471318692,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1005 epochs:201, Train Loss: 1167.1343994140625, Reg:1.3967182636260986, Calibration:8.971329689025879, Accuracy:1157.74169921875,  CI:0.6776291866995273, Clustering:0.42140457034111023Valid Loss:2692.7748460036055, Reg:2.9845334525801177, Calibration:19.249019459781483, Accuracy:2672.3763229500532, CI:0.6994254471318692, Clustering:1.1494099839120848,  

DEBUG:root:pred_surv:0.4247124493122101,  emp_surv:0.41025760769844055,  km_loss:8.229157447814941, len_unique_t:419, curr_pop_nk, min:0.07671645283699036, max:0.1591709852218628, sum:0.9999997615814209, curr_post:[0.17622904 0.29486525]  curr_lik:[0.16515252 0.26004836], train_k:5, 

DEBUG:root:valid_calibration:17.688514839889656, best_calibration:16.43453602097992, valid_ci:0.6897877861180614,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1010 epochs:202, Train Loss: 1264.88037109375, Reg:1.3969861268997192, Calibration:10.645275115966797, Accuracy:1253.81103515625,  CI:0.6378765765569521, Clustering:0.4241049885749817Valid Loss:2710.6946635450054, Reg:2.985112178019988, Calibration:17.688514839889656, Accuracy:2691.8661003438833, CI:0.6897877861180614, Clustering:1.1403606488154483,  

DEBUG:root:pred_surv:0.36946892738342285,  emp_surv:0.3126987814903259,  km_loss:9.0656156539917, len_unique_t:414, curr_pop_nk, min:0.07672695815563202, max:0.15907666087150574, sum:0.9999997019767761, curr_post:[0.16175492 0.29347542]  curr_lik:[0.13461402 0.2573627 ], train_k:5, 

DEBUG:root:valid_calibration:17.873005989270332, best_calibration:16.43453602097992, valid_ci:0.691733852284311,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1015 epochs:203, Train Loss: 1382.3233642578125, Reg:1.3971868753433228, Calibration:10.312183380126953, Accuracy:1371.6005859375,  CI:0.6182715833624607, Clustering:0.4107024371623993Valid Loss:2682.0107484475157, Reg:2.985513363129053, Calibration:17.873005989270332, Accuracy:2663.006383129674, CI:0.691733852284311, Clustering:1.131190321384332,  

DEBUG:root:pred_surv:0.4116659164428711,  emp_surv:0.35394930839538574,  km_loss:7.52100944519043, len_unique_t:410, curr_pop_nk, min:0.07701906561851501, max:0.15892614424228668, sum:0.9999997615814209, curr_post:[0.19383532 0.2863316 ]  curr_lik:[0.18665166 0.25233638], train_k:6, 

DEBUG:root:valid_calibration:20.019188905373596, best_calibration:16.43453602097992, valid_ci:0.6938652580854415,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1020 epochs:204, Train Loss: 1338.5692138671875, Reg:1.3973431587219238, Calibration:9.948657035827637, Accuracy:1328.2086181640625,  CI:0.6379541036580748, Clustering:0.41199150681495667Valid Loss:2704.0240948016826, Reg:2.9858432264409513, Calibration:20.019188905373596, Accuracy:2682.890019865117, CI:0.6938652580854415, Clustering:1.1151687711732,  

DEBUG:root:pred_surv:0.25049081444740295,  emp_surv:0.3961499035358429,  km_loss:8.903450965881348, len_unique_t:414, curr_pop_nk, min:0.07686687260866165, max:0.1588285118341446, sum:0.9999997615814209, curr_post:[0.19353285 0.21932778]  curr_lik:[0.16859688 0.18666515], train_k:6, 

DEBUG:root:valid_calibration:21.570452258118195, best_calibration:16.43453602097992, valid_ci:0.6999351311277917,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1025 epochs:205, Train Loss: 1200.5692138671875, Reg:1.3975059986114502, Calibration:9.903166770935059, Accuracy:1190.240234375,  CI:0.6062538071065989, Clustering:0.4257968068122864Valid Loss:2710.331843449519, Reg:2.9862306566319914, Calibration:21.570452258118195, Accuracy:2687.653631226629, CI:0.6999351311277917, Clustering:1.1077370399083846,  

DEBUG:root:pred_surv:0.3274209797382355,  emp_surv:0.37447065114974976,  km_loss:7.177074432373047, len_unique_t:419, curr_pop_nk, min:0.07693052291870117, max:0.15845564007759094, sum:0.9999997019767761, curr_post:[0.20423454 0.25961295]  curr_lik:[0.19701691 0.22912572], train_k:6, 

DEBUG:root:valid_calibration:21.9829958728236, best_calibration:16.43453602097992, valid_ci:0.6958576591604114,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1030 epochs:206, Train Loss: 1149.388671875, Reg:1.3977301120758057, Calibration:3.6436309814453125, Accuracy:1145.3330078125,  CI:0.6370962203246263, Clustering:0.41199561953544617Valid Loss:2735.458504440438, Reg:2.9867123334835735, Calibration:21.9829958728236, Accuracy:2712.3668703258545, CI:0.6958576591604114, Clustering:1.1088552637996836,  

DEBUG:root:pred_surv:0.403495192527771,  emp_surv:0.2871977984905243,  km_loss:9.420552253723145, len_unique_t:419, curr_pop_nk, min:0.07701164484024048, max:0.15851114690303802, sum:0.9999997615814209, curr_post:[0.14677194 0.21272118]  curr_lik:[0.16621338 0.17302576], train_k:6, 

DEBUG:root:valid_calibration:22.14750673016931, best_calibration:16.43453602097992, valid_ci:0.6965990176999352,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1035 epochs:207, Train Loss: 1254.8203125, Reg:1.3980196714401245, Calibration:8.963579177856445, Accuracy:1245.4464111328125,  CI:0.645725638453823, Clustering:0.4103007912635803Valid Loss:2704.6062762920674, Reg:2.9873646732069488, Calibration:22.14750673016931, Accuracy:2681.3560551048345, CI:0.6965990176999352, Clustering:1.1029233280410113,  

DEBUG:root:pred_surv:0.39273199439048767,  emp_surv:0.32508182525634766,  km_loss:10.417814254760742, len_unique_t:418, curr_pop_nk, min:0.07744401693344116, max:0.15809638798236847, sum:0.9999997615814209, curr_post:[0.17673439 0.19960126]  curr_lik:[0.15258713 0.2057877 ], train_k:7, 

DEBUG:root:valid_calibration:18.278602860931656, best_calibration:16.43453602097992, valid_ci:0.6956723195255305,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1040 epochs:208, Train Loss: 1229.51953125, Reg:1.3983529806137085, Calibration:7.723031044006348, Accuracy:1221.389404296875,  CI:0.6347133214746948, Clustering:0.4071400761604309Valid Loss:2679.8742571447647, Reg:2.988074579809466, Calibration:18.278602860931656, Accuracy:2660.5068108974356, CI:0.6956723195255305, Clustering:1.088676162255116,  

DEBUG:root:pred_surv:0.3404262363910675,  emp_surv:0.3693280518054962,  km_loss:10.82559585571289, len_unique_t:421, curr_pop_nk, min:0.0773671492934227, max:0.15812715888023376, sum:0.9999997019767761, curr_post:[0.20315938 0.21022965]  curr_lik:[0.17923306 0.1800307 ], train_k:5, 

DEBUG:root:valid_calibration:15.990434548793694, best_calibration:16.43453602097992, valid_ci:0.6960893337040126,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1045 epochs:209, Train Loss: 1236.13330078125, Reg:1.3986350297927856, Calibration:11.95390796661377, Accuracy:1223.775390625,  CI:0.6257224765339622, Clustering:0.404026061296463Valid Loss:2630.81790239383, Reg:2.9885944647666736, Calibration:15.990434548793694, Accuracy:2613.744230351896, CI:0.6960893337040126, Clustering:1.083297097784841,  

DEBUG:root:pred_surv:0.3895767331123352,  emp_surv:0.3991526961326599,  km_loss:8.064827919006348, len_unique_t:413, curr_pop_nk, min:0.07723037153482437, max:0.15821672976016998, sum:0.9999997615814209, curr_post:[0.20716286 0.23352386]  curr_lik:[0.18109798 0.20431332], train_k:6, 

DEBUG:root:valid_calibration:18.617128714537007, best_calibration:16.43453602097992, valid_ci:0.6982207395051432,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1050 epochs:210, Train Loss: 1208.0421142578125, Reg:1.398764729499817, Calibration:9.687602043151855, Accuracy:1197.9552001953125,  CI:0.6345356235478057, Clustering:0.3992648720741272Valid Loss:2646.0456522102027, Reg:2.988851223236475, Calibration:18.617128714537007, Accuracy:2626.3487726195244, CI:0.6982207395051432, Clustering:1.0795445523710332,  

DEBUG:root:pred_surv:0.31597769260406494,  emp_surv:0.42614632844924927,  km_loss:6.904980182647705, len_unique_t:425, curr_pop_nk, min:0.07741834968328476, max:0.1582173854112625, sum:0.9999996423721313, curr_post:[0.1605109  0.19924636]  curr_lik:[0.18046543 0.19582051], train_k:6, 

DEBUG:root:valid_calibration:20.360208984114166, best_calibration:16.43453602097992, valid_ci:0.7021128718376425,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1055 epochs:211, Train Loss: 1227.3182373046875, Reg:1.398881435394287, Calibration:8.91997241973877, Accuracy:1217.9935302734375,  CI:0.6386074744612, Clustering:0.40481287240982056Valid Loss:2690.5248919103897, Reg:2.9891456803704934, Calibration:20.360208984114166, Accuracy:2669.089553702591, CI:0.7021128718376425, Clustering:1.0752010549235547,  

DEBUG:root:pred_surv:0.38426241278648376,  emp_surv:0.27605870366096497,  km_loss:12.990522384643555, len_unique_t:423, curr_pop_nk, min:0.07735694199800491, max:0.15811200439929962, sum:0.9999997615814209, curr_post:[0.15408298 0.17543167]  curr_lik:[0.13515599 0.19052975], train_k:5, 

DEBUG:root:valid_calibration:19.677808142115925, best_calibration:16.43453602097992, valid_ci:0.700815494393476,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1060 epochs:212, Train Loss: 1150.8975830078125, Reg:1.3990788459777832, Calibration:14.986409187316895, Accuracy:1135.5081787109375,  CI:0.6162601286442235, Clustering:0.40290218591690063Valid Loss:2665.313981537126, Reg:2.989585328305888, Calibration:19.677808142115925, Accuracy:2644.5562900641025, CI:0.700815494393476, Clustering:1.0795384390741332,  

DEBUG:root:pred_surv:0.3494357764720917,  emp_surv:0.3266509473323822,  km_loss:9.875743865966797, len_unique_t:422, curr_pop_nk, min:0.07749403268098831, max:0.1581026315689087, sum:0.9999997615814209, curr_post:[0.21437053 0.2773587 ]  curr_lik:[0.19646652 0.2327072 ], train_k:7, 

DEBUG:root:valid_calibration:19.933107571724133, best_calibration:16.43453602097992, valid_ci:0.6994254471318692,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1065 epochs:213, Train Loss: 1263.187744140625, Reg:1.3992916345596313, Calibration:9.055496215820312, Accuracy:1253.71923828125,  CI:0.6301795652630474, Clustering:0.4130121171474457Valid Loss:2662.289350460737, Reg:2.9900158062959328, Calibration:19.933107571724133, Accuracy:2641.2828233506943, CI:0.6994254471318692, Clustering:1.0734981196558373,  

DEBUG:root:pred_surv:0.30453547835350037,  emp_surv:0.25211501121520996,  km_loss:11.12627124786377, len_unique_t:422, curr_pop_nk, min:0.07753314077854156, max:0.15828344225883484, sum:0.9999997019767761, curr_post:[0.21699251 0.24545376]  curr_lik:[0.19045828 0.23304875], train_k:6, 

DEBUG:root:valid_calibration:18.675386396228756, best_calibration:16.43453602097992, valid_ci:0.6998424613103512,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1070 epochs:214, Train Loss: 1167.4984130859375, Reg:1.3994734287261963, Calibration:10.571951866149902, Accuracy:1156.52392578125,  CI:0.6475752348092774, Clustering:0.40264588594436646Valid Loss:2660.054263905582, Reg:2.9904055289733105, Calibration:18.675386396228756, Accuracy:2640.311738364717, CI:0.6998424613103512, Clustering:1.0670268764862647,  

DEBUG:root:pred_surv:0.28652632236480713,  emp_surv:0.2907450795173645,  km_loss:10.791969299316406, len_unique_t:409, curr_pop_nk, min:0.0774717852473259, max:0.1580505520105362, sum:0.9999997615814209, curr_post:[0.24569136 0.271134  ]  curr_lik:[0.23901165 0.24369638], train_k:5, 

DEBUG:root:valid_calibration:22.178725299672184, best_calibration:16.43453602097992, valid_ci:0.6959039940691317,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1075 epochs:215, Train Loss: 1231.5665283203125, Reg:1.3996913433074951, Calibration:7.548605442047119, Accuracy:1223.617431640625,  CI:0.6231234788601951, Clustering:0.40057069063186646Valid Loss:2679.694281684028, Reg:2.9908859322213717, Calibration:22.178725299672184, Accuracy:2656.4578846988516, CI:0.6959039940691317, Clustering:1.0573426500344887,  

DEBUG:root:pred_surv:0.24606339633464813,  emp_surv:0.3795178532600403,  km_loss:6.15926456451416, len_unique_t:425, curr_pop_nk, min:0.07745815068483353, max:0.15787653625011444, sum:0.9999997615814209, curr_post:[0.20047666 0.20906326]  curr_lik:[0.17379683 0.18911122], train_k:6, 

DEBUG:root:valid_calibration:21.19662211491511, best_calibration:16.43453602097992, valid_ci:0.700398480214994,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1080 epochs:216, Train Loss: 1180.8177490234375, Reg:1.3999555110931396, Calibration:6.185929775238037, Accuracy:1174.2357177734375,  CI:0.6501987244662168, Clustering:0.3961150050163269Valid Loss:2677.1568885216343, Reg:2.9915049035325008, Calibration:21.19662211491511, Accuracy:2654.8957498664527, CI:0.700398480214994, Clustering:1.064657719216795,  

DEBUG:root:pred_surv:0.4060553312301636,  emp_surv:0.2556609809398651,  km_loss:11.811807632446289, len_unique_t:405, curr_pop_nk, min:0.07776469737291336, max:0.15810748934745789, sum:0.9999997615814209, curr_post:[0.21237871 0.21320017]  curr_lik:[0.18105346 0.19879879], train_k:6, 

DEBUG:root:valid_calibration:19.059413518661106, best_calibration:16.43453602097992, valid_ci:0.6934945788156798,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1085 epochs:217, Train Loss: 1144.8133544921875, Reg:1.4002138376235962, Calibration:12.308843612670898, Accuracy:1132.12109375,  CI:0.6743460741685069, Clustering:0.3834005296230316Valid Loss:2634.683201455662, Reg:2.9919781746008454, Calibration:19.059413518661106, Accuracy:2614.582289997329, CI:0.6934945788156798, Clustering:1.0415642944156613,  

DEBUG:root:pred_surv:0.3606296181678772,  emp_surv:0.34423696994781494,  km_loss:8.373480796813965, len_unique_t:414, curr_pop_nk, min:0.07769221812486649, max:0.15814296901226044, sum:0.9999997615814209, curr_post:[0.1483732  0.34004351]  curr_lik:[0.12540461 0.3019962 ], train_k:5, 

DEBUG:root:valid_calibration:20.539780967255943, best_calibration:16.43453602097992, valid_ci:0.6981280696877027,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1090 epochs:218, Train Loss: 1162.0185546875, Reg:1.400390625, Calibration:6.974097728729248, Accuracy:1154.6475830078125,  CI:0.6314575860623283, Clustering:0.39689651131629944Valid Loss:2661.697518112313, Reg:2.9923974448799067, Calibration:20.539780967255943, Accuracy:2640.1116786858975, CI:0.6981280696877027, Clustering:1.0458589491681156,  

DEBUG:root:pred_surv:0.33767271041870117,  emp_surv:0.28192847967147827,  km_loss:10.12622356414795, len_unique_t:434, curr_pop_nk, min:0.07772913575172424, max:0.15800918638706207, sum:0.9999997615814209, curr_post:[0.20704381 0.2682953 ]  curr_lik:[0.19519012 0.24335435], train_k:6, 

DEBUG:root:valid_calibration:20.26796544718946, best_calibration:16.43453602097992, valid_ci:0.701000834028357,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1095 epochs:219, Train Loss: 1260.715576171875, Reg:1.4006519317626953, Calibration:12.863687515258789, Accuracy:1247.4671630859375,  CI:0.616716977204122, Clustering:0.38476794958114624Valid Loss:2643.2529025607637, Reg:2.9929720947885103, Calibration:20.26796544718946, Accuracy:2621.9477205194976, CI:0.701000834028357, Clustering:1.037087578039903,  

DEBUG:root:pred_surv:0.30419543385505676,  emp_surv:0.20363441109657288,  km_loss:8.852154731750488, len_unique_t:416, curr_pop_nk, min:0.07777830958366394, max:0.15795689821243286, sum:0.9999996423721313, curr_post:[0.20064926 0.20180452]  curr_lik:[0.17536402 0.21082535], train_k:6, 

DEBUG:root:valid_calibration:17.75282060998118, best_calibration:16.43453602097992, valid_ci:0.6949772958947271,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1100 epochs:220, Train Loss: 1135.89404296875, Reg:1.4009219408035278, Calibration:9.32374382019043, Accuracy:1126.181884765625,  CI:0.6285855588526211, Clustering:0.3883686065673828Valid Loss:2620.5788636818907, Reg:2.9935263670407806, Calibration:17.75282060998118, Accuracy:2601.8053364549946, CI:0.6949772958947271, Clustering:1.0209867460095983,  

DEBUG:root:ITER:1100, Train CI:0.638790424926699, Clustering:0.3772488832473755,Reg:1.4009703397750854, Accuracy:1122.818603515625, Calibration:9.907143592834473, Cost:1133.1029052734375
DEBUG:root:pred_surv:0.343191921710968,  emp_surv:0.3715330958366394,  km_loss:10.23998737335205, len_unique_t:411, curr_pop_nk, min:0.07784716784954071, max:0.15798379480838776, sum:0.9999996423721313, curr_post:[0.16751377 0.18972869]  curr_lik:[0.14771084 0.1950743 ], train_k:6, 

DEBUG:root:valid_calibration:18.750327265160713, best_calibration:16.43453602097992, valid_ci:0.7046149569085349,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1105 epochs:221, Train Loss: 1119.9798583984375, Reg:1.4011595249176025, Calibration:8.762384414672852, Accuracy:1110.8250732421875,  CI:0.6418148291483597, Clustering:0.3924975097179413Valid Loss:2610.4984120426016, Reg:2.994026383783063, Calibration:18.750327265160713, Accuracy:2590.7227605836, CI:0.7046149569085349, Clustering:1.0255058733826008,  

DEBUG:root:pred_surv:0.3807085156440735,  emp_surv:0.39044782519340515,  km_loss:9.57970905303955, len_unique_t:428, curr_pop_nk, min:0.07792139053344727, max:0.15786610543727875, sum:0.9999997019767761, curr_post:[0.15230641 0.26862812]  curr_lik:[0.15137666 0.23048455], train_k:6, 

DEBUG:root:valid_calibration:17.920434984386475, best_calibration:16.43453602097992, valid_ci:0.6928458900935965,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1110 epochs:222, Train Loss: 1202.9166259765625, Reg:1.401352882385254, Calibration:7.71742057800293, Accuracy:1194.80078125,  CI:0.6359221285957412, Clustering:0.39838534593582153Valid Loss:2642.055413661859, Reg:2.994452786241841, Calibration:17.920434984386475, Accuracy:2623.112083500267, CI:0.6928458900935965, Clustering:1.02286868625217,  

DEBUG:root:pred_surv:0.30058029294013977,  emp_surv:0.37991052865982056,  km_loss:10.149577140808105, len_unique_t:429, curr_pop_nk, min:0.07803450524806976, max:0.15793386101722717, sum:0.9999997019767761, curr_post:[0.19194227 0.2034394 ]  curr_lik:[0.16034085 0.18523833], train_k:6, 

DEBUG:root:valid_calibration:17.815502280862923, best_calibration:16.43453602097992, valid_ci:0.6994717820405894,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1115 epochs:223, Train Loss: 1303.9854736328125, Reg:1.4016016721725464, Calibration:9.347010612487793, Accuracy:1294.264404296875,  CI:0.5982587064676617, Clustering:0.374062180519104Valid Loss:2601.726303752671, Reg:2.9949563690739818, Calibration:17.815502280862923, Accuracy:2582.8953930455395, CI:0.6994717820405894, Clustering:1.015545020246098,  

DEBUG:root:pred_surv:0.4511377513408661,  emp_surv:0.31946229934692383,  km_loss:9.399612426757812, len_unique_t:413, curr_pop_nk, min:0.07808935642242432, max:0.15809541940689087, sum:0.9999997019767761, curr_post:[0.15976556 0.2498192 ]  curr_lik:[0.13658237 0.2553942 ], train_k:6, 

DEBUG:root:valid_calibration:19.901222652859158, best_calibration:16.43453602097992, valid_ci:0.6966916875173756,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1120 epochs:224, Train Loss: 1141.55322265625, Reg:1.4017670154571533, Calibration:10.247406005859375, Accuracy:1130.9195556640625,  CI:0.6324519887139346, Clustering:0.38623300194740295Valid Loss:2664.349156567174, Reg:2.9952849587823587, Calibration:19.901222652859158, Accuracy:2643.441746377537, CI:0.6966916875173756, Clustering:1.0060174470273857,  

DEBUG:root:pred_surv:0.2999798655509949,  emp_surv:0.39879241585731506,  km_loss:9.185627937316895, len_unique_t:424, curr_pop_nk, min:0.07830540090799332, max:0.15797923505306244, sum:0.9999997615814209, curr_post:[0.20100304 0.24947912]  curr_lik:[0.17473422 0.22164693], train_k:5, 

DEBUG:root:valid_calibration:20.53641865396092, best_calibration:16.43453602097992, valid_ci:0.7011861736632379,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1125 epochs:225, Train Loss: 1367.1781005859375, Reg:1.401944637298584, Calibration:7.978206634521484, Accuracy:1358.83056640625,  CI:0.6344670332012105, Clustering:0.36941149830818176Valid Loss:2654.2637490818643, Reg:2.9957090687547994, Calibration:20.53641865396092, Accuracy:2632.734249799679, CI:0.7011861736632379, Clustering:0.9933585921923319,  

DEBUG:root:pred_surv:0.36277008056640625,  emp_surv:0.2764776051044464,  km_loss:11.060757637023926, len_unique_t:408, curr_pop_nk, min:0.07813671231269836, max:0.15801291167736053, sum:0.9999997019767761, curr_post:[0.20124075 0.27951717]  curr_lik:[0.19342628 0.25083905], train_k:6, 

DEBUG:root:valid_calibration:20.975235180977062, best_calibration:16.43453602097992, valid_ci:0.7015568529329997,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1130 epochs:226, Train Loss: 1108.739990234375, Reg:1.4022071361541748, Calibration:14.211382865905762, Accuracy:1094.1534423828125,  CI:0.6644006444920211, Clustering:0.37514230608940125Valid Loss:2653.9207523704595, Reg:2.996300275509174, Calibration:20.975235180977062, Accuracy:2631.954877804487, CI:0.7015568529329997, Clustering:0.9909896896435664,  

DEBUG:root:pred_surv:0.3915676772594452,  emp_surv:0.29505524039268494,  km_loss:8.390430450439453, len_unique_t:430, curr_pop_nk, min:0.07800796627998352, max:0.15819670259952545, sum:0.9999997019767761, curr_post:[0.20797706 0.21304302]  curr_lik:[0.18259117 0.19195658], train_k:5, 

DEBUG:root:valid_calibration:22.57537841796875, best_calibration:16.43453602097992, valid_ci:0.6913631730145492,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1135 epochs:227, Train Loss: 1275.3878173828125, Reg:1.4025137424468994, Calibration:10.388337135314941, Accuracy:1264.615234375,  CI:0.6203788402757636, Clustering:0.38430511951446533Valid Loss:2706.9657806657315, Reg:2.996946247214945, Calibration:22.57537841796875, Accuracy:2683.3949944911856, CI:0.6913631730145492, Clustering:0.9955908370833111,  

DEBUG:root:pred_surv:0.3599573075771332,  emp_surv:0.46107614040374756,  km_loss:9.779749870300293, len_unique_t:413, curr_pop_nk, min:0.07825440168380737, max:0.15811751782894135, sum:0.9999997615814209, curr_post:[0.21687205 0.25495356]  curr_lik:[0.20030604 0.22943118], train_k:6, 

DEBUG:root:valid_calibration:21.611346138848198, best_calibration:16.43453602097992, valid_ci:0.7073487165230284,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1140 epochs:228, Train Loss: 1028.9542236328125, Reg:1.402823567390442, Calibration:9.698346138000488, Accuracy:1018.8787231445312,  CI:0.680211935798528, Clustering:0.37719476222991943Valid Loss:2653.7725986578525, Reg:2.997604445514516, Calibration:21.611346138848198, Accuracy:2631.173940805288, CI:0.7073487165230284, Clustering:0.9875821634235544,  

DEBUG:root:pred_surv:0.40164828300476074,  emp_surv:0.30634400248527527,  km_loss:8.633015632629395, len_unique_t:432, curr_pop_nk, min:0.07862762361764908, max:0.15824481844902039, sum:0.9999997615814209, curr_post:[0.16069129 0.24003781]  curr_lik:[0.14037049 0.20320725], train_k:7, 

DEBUG:root:valid_calibration:20.42583115080483, best_calibration:16.43453602097992, valid_ci:0.6961820035214531,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1145 epochs:229, Train Loss: 1149.733154296875, Reg:1.4030730724334717, Calibration:9.561237335205078, Accuracy:1139.802734375,  CI:0.6624556040102504, Clustering:0.36908337473869324Valid Loss:2652.283497345753, Reg:2.9981049716982064, Calibration:20.42583115080483, Accuracy:2630.875285874065, CI:0.6961820035214531, Clustering:0.9822940979248438,  

DEBUG:root:pred_surv:0.29378753900527954,  emp_surv:0.3160424828529358,  km_loss:9.272967338562012, len_unique_t:428, curr_pop_nk, min:0.07867630571126938, max:0.15832126140594482, sum:0.9999997019767761, curr_post:[0.19142509 0.2414905 ]  curr_lik:[0.16415147 0.213376  ], train_k:5, 

DEBUG:root:valid_calibration:17.66611572004791, best_calibration:16.43453602097992, valid_ci:0.699796126401631,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1150 epochs:230, Train Loss: 1158.5242919921875, Reg:1.4032647609710693, Calibration:8.590940475463867, Accuracy:1149.5703125,  CI:0.6205052005943537, Clustering:0.3630538582801819Valid Loss:2644.941281049679, Reg:2.9985025907174134, Calibration:17.66611572004791, Accuracy:2626.3031266693374, CI:0.699796126401631, Clustering:0.9724851220082014,  

DEBUG:root:pred_surv:0.31741806864738464,  emp_surv:0.32630956172943115,  km_loss:9.666677474975586, len_unique_t:414, curr_pop_nk, min:0.0786169245839119, max:0.15813489258289337, sum:0.9999997615814209, curr_post:[0.21022417 0.24162015]  curr_lik:[0.19371346 0.20288338], train_k:5, 

DEBUG:root:valid_calibration:20.558583430754833, best_calibration:16.43453602097992, valid_ci:0.699193772588268,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1155 epochs:231, Train Loss: 1130.4342041015625, Reg:1.4034441709518433, Calibration:8.13960075378418, Accuracy:1121.92919921875,  CI:0.6405241735332076, Clustering:0.36535003781318665Valid Loss:2656.2293941139155, Reg:2.9988961342053533, Calibration:20.558583430754833, Accuracy:2634.7019815037393, CI:0.699193772588268, Clustering:0.968719904239361,  

DEBUG:root:pred_surv:0.3561789095401764,  emp_surv:0.27210575342178345,  km_loss:11.281244277954102, len_unique_t:424, curr_pop_nk, min:0.07876006513834, max:0.15807504951953888, sum:0.9999997019767761, curr_post:[0.18477942 0.21185324]  curr_lik:[0.15742575 0.1856941 ], train_k:5, 

DEBUG:root:valid_calibration:22.673900310809795, best_calibration:16.43453602097992, valid_ci:0.7000741358539524,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1160 epochs:232, Train Loss: 1076.6163330078125, Reg:1.403660774230957, Calibration:7.615868091583252, Accuracy:1068.6407470703125,  CI:0.6734143345907536, Clustering:0.3597332537174225Valid Loss:2669.282049195379, Reg:2.9993846885159483, Calibration:22.673900310809795, Accuracy:2645.645532852564, CI:0.7000741358539524, Clustering:0.9624928745449098,  

DEBUG:root:pred_surv:0.31918931007385254,  emp_surv:0.3858880400657654,  km_loss:5.383564472198486, len_unique_t:427, curr_pop_nk, min:0.07882086932659149, max:0.1581258475780487, sum:0.9999997019767761, curr_post:[0.22348458 0.2281696 ]  curr_lik:[0.19338663 0.20781243], train_k:7, 

DEBUG:root:valid_calibration:22.376213318262344, best_calibration:16.43453602097992, valid_ci:0.7051709758131777,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1165 epochs:233, Train Loss: 1227.1842041015625, Reg:1.4038931131362915, Calibration:6.623261451721191, Accuracy:1220.19677734375,  CI:0.648337540255897, Clustering:0.3641499876976013Valid Loss:2653.820331280048, Reg:2.9998770636371055, Calibration:22.376213318262344, Accuracy:2630.482991536458, CI:0.7051709758131777, Clustering:0.9609686895313425,  

DEBUG:root:pred_surv:0.29115545749664307,  emp_surv:0.3969351053237915,  km_loss:7.888959884643555, len_unique_t:427, curr_pop_nk, min:0.07890836149454117, max:0.15818238258361816, sum:0.9999997615814209, curr_post:[0.1737478 0.2491549]  curr_lik:[0.1449577  0.21837169], train_k:6, 

DEBUG:root:valid_calibration:20.686410431169037, best_calibration:16.43453602097992, valid_ci:0.7054953201742192,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1170 epochs:234, Train Loss: 1170.9810791015625, Reg:1.4041469097137451, Calibration:5.425551891326904, Accuracy:1165.1854248046875,  CI:0.6325229731301617, Clustering:0.37007611989974976Valid Loss:2623.607668102297, Reg:3.0004259867545886, Calibration:20.686410431169037, Accuracy:2601.964184361645, CI:0.7054953201742192, Clustering:0.9569695744758997,  

DEBUG:root:pred_surv:0.38015449047088623,  emp_surv:0.29637640714645386,  km_loss:8.41660213470459, len_unique_t:416, curr_pop_nk, min:0.07878076285123825, max:0.15810294449329376, sum:0.9999997615814209, curr_post:[0.15574896 0.21802308]  curr_lik:[0.1384261  0.17452058], train_k:6, 

DEBUG:root:valid_calibration:19.593442607129738, best_calibration:16.43453602097992, valid_ci:0.7077657307015105,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1175 epochs:235, Train Loss: 1225.9722900390625, Reg:1.4043763875961304, Calibration:9.421592712402344, Accuracy:1216.1806640625,  CI:0.6454022284804701, Clustering:0.3700011968612671Valid Loss:2592.887161124466, Reg:3.000901805029975, Calibration:19.593442607129738, Accuracy:2572.3370935162925, CI:0.7077657307015105, Clustering:0.9567463754588722,  

DEBUG:root:pred_surv:0.4095148742198944,  emp_surv:0.38647642731666565,  km_loss:16.92535972595215, len_unique_t:415, curr_pop_nk, min:0.07883614301681519, max:0.15814298391342163, sum:0.9999997615814209, curr_post:[0.16678903 0.24892399]  curr_lik:[0.14442387 0.25067616], train_k:6, 

DEBUG:root:valid_calibration:19.11358751802363, best_calibration:16.43453602097992, valid_ci:0.7025762209248447,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1180 epochs:236, Train Loss: 1198.607421875, Reg:1.4046205282211304, Calibration:14.35401439666748, Accuracy:1183.8970947265625,  CI:0.6558706999559776, Clustering:0.3562637269496918Valid Loss:2601.0502220219014, Reg:3.001402840655074, Calibration:19.11358751802363, Accuracy:2580.9863489917198, CI:0.7025762209248447, Clustering:0.9503137861561571,  

DEBUG:root:pred_surv:0.35857003927230835,  emp_surv:0.2904219925403595,  km_loss:11.157992362976074, len_unique_t:420, curr_pop_nk, min:0.07882378250360489, max:0.1579347401857376, sum:0.9999997615814209, curr_post:[0.15697369 0.20216295]  curr_lik:[0.14441222 0.20058429], train_k:6, 

DEBUG:root:valid_calibration:20.008313350188427, best_calibration:16.43453602097992, valid_ci:0.706468353257344,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1185 epochs:237, Train Loss: 1293.4998779296875, Reg:1.4048197269439697, Calibration:11.219483375549316, Accuracy:1281.918701171875,  CI:0.6271385100867801, Clustering:0.361676961183548Valid Loss:2609.664786575187, Reg:3.0018394319420185, Calibration:20.008313350188427, Accuracy:2588.707817925347, CI:0.706468353257344, Clustering:0.9485766546339051,  

DEBUG:root:pred_surv:0.3450393080711365,  emp_surv:0.3695860803127289,  km_loss:8.245122909545898, len_unique_t:435, curr_pop_nk, min:0.07884988933801651, max:0.15784984827041626, sum:0.9999997615814209, curr_post:[0.1486436  0.18708542]  curr_lik:[0.14475828 0.17092282], train_k:5, 

DEBUG:root:valid_calibration:19.262332182664135, best_calibration:16.43453602097992, valid_ci:0.702622555833565,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1190 epochs:238, Train Loss: 1268.84619140625, Reg:1.405012845993042, Calibration:7.931207656860352, Accuracy:1260.554443359375,  CI:0.6457803058807906, Clustering:0.36065250635147095Valid Loss:2614.930242554754, Reg:3.0022286451779876, Calibration:19.262332182664135, Accuracy:2594.722910823985, CI:0.702622555833565, Clustering:0.9450760279965197,  

DEBUG:root:pred_surv:0.3782258927822113,  emp_surv:0.2906400263309479,  km_loss:11.050126075744629, len_unique_t:420, curr_pop_nk, min:0.07903669029474258, max:0.15774397552013397, sum:0.9999997615814209, curr_post:[0.18301679 0.18384296]  curr_lik:[0.15828614 0.1757716 ], train_k:5, 

DEBUG:root:valid_calibration:18.447446008013863, best_calibration:16.43453602097992, valid_ci:0.707858400518951,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1195 epochs:239, Train Loss: 1183.815185546875, Reg:1.405149221420288, Calibration:11.971108436584473, Accuracy:1171.487060546875,  CI:0.6646453927587862, Clustering:0.35710614919662476Valid Loss:2631.2488001635948, Reg:3.002519281501444, Calibration:18.447446008013863, Accuracy:2611.8636172041934, CI:0.707858400518951, Clustering:0.9377253615958059,  

DEBUG:root:pred_surv:0.40681761503219604,  emp_surv:0.2819993793964386,  km_loss:8.394876480102539, len_unique_t:422, curr_pop_nk, min:0.07933914661407471, max:0.15772506594657898, sum:0.9999997615814209, curr_post:[0.18282011 0.28438562]  curr_lik:[0.16777949 0.23769145], train_k:6, 

DEBUG:root:valid_calibration:17.71138060806144, best_calibration:16.43453602097992, valid_ci:0.7046612918172551,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1200 epochs:240, Train Loss: 1241.8568115234375, Reg:1.4052735567092896, Calibration:8.75990104675293, Accuracy:1232.7454833984375,  CI:0.666090113175315, Clustering:0.35146036744117737Valid Loss:2594.7143033019497, Reg:3.002779606061104, Calibration:17.71138060806144, Accuracy:2576.074062249599, CI:0.7046612918172551, Clustering:0.929034036448878,  

DEBUG:root:ITER:1200, Train CI:0.6338290379741157, Clustering:0.3542585074901581,Reg:1.4053007364273071, Accuracy:1085.325927734375, Calibration:12.160511016845703, Cost:1097.8406982421875
DEBUG:root:pred_surv:0.42669621109962463,  emp_surv:0.42436423897743225,  km_loss:7.403303146362305, len_unique_t:413, curr_pop_nk, min:0.07922597229480743, max:0.15762999653816223, sum:0.9999997615814209, curr_post:[0.19846773 0.23216617]  curr_lik:[0.18670395 0.20776737], train_k:6, 

DEBUG:root:valid_calibration:20.243893321762737, best_calibration:16.43453602097992, valid_ci:0.6980817347789825,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1205 epochs:241, Train Loss: 1129.9945068359375, Reg:1.4053897857666016, Calibration:9.63556957244873, Accuracy:1119.9942626953125,  CI:0.6633698575333941, Clustering:0.36462560296058655Valid Loss:2639.6361783019497, Reg:3.0030434967106223, Calibration:20.243893321762737, Accuracy:2618.4648041032315, CI:0.6980817347789825, Clustering:0.9271774409163711,  

DEBUG:root:pred_surv:0.42017728090286255,  emp_surv:0.4507386386394501,  km_loss:7.989108085632324, len_unique_t:411, curr_pop_nk, min:0.07921659201383591, max:0.15757283568382263, sum:0.9999997615814209, curr_post:[0.19168317 0.25397566]  curr_lik:[0.17400114 0.22946535], train_k:5, 

DEBUG:root:valid_calibration:19.95384998810597, best_calibration:16.43453602097992, valid_ci:0.7000278009452321,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1210 epochs:242, Train Loss: 1094.96826171875, Reg:1.4056172370910645, Calibration:7.264284133911133, Accuracy:1087.3460693359375,  CI:0.6676700918926259, Clustering:0.35796982049942017Valid Loss:2629.200992421207, Reg:3.003592165107401, Calibration:19.95384998810597, Accuracy:2608.326447315705, CI:0.7000278009452321, Clustering:0.920513183133215,  

DEBUG:root:pred_surv:0.35180795192718506,  emp_surv:0.32316070795059204,  km_loss:9.576403617858887, len_unique_t:416, curr_pop_nk, min:0.07924265414476395, max:0.15751968324184418, sum:0.9999997615814209, curr_post:[0.1983314 0.2539008]  curr_lik:[0.19091865 0.23034039], train_k:6, 

DEBUG:root:valid_calibration:17.835639480851654, best_calibration:16.43453602097992, valid_ci:0.7044759521823742,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1215 epochs:243, Train Loss: 1227.4237060546875, Reg:1.405943512916565, Calibration:10.116839408874512, Accuracy:1216.954345703125,  CI:0.6581994200117742, Clustering:0.35251978039741516Valid Loss:2619.391547309028, Reg:3.0042951942509055, Calibration:17.835639480851654, Accuracy:2600.640973474225, CI:0.7044759521823742, Clustering:0.9147741983079503,  

DEBUG:root:pred_surv:0.4061528146266937,  emp_surv:0.33675119280815125,  km_loss:9.037243843078613, len_unique_t:411, curr_pop_nk, min:0.07939065992832184, max:0.15775516629219055, sum:0.9999997615814209, curr_post:[0.1500192 0.2728806]  curr_lik:[0.16424361 0.2304224 ], train_k:6, 

DEBUG:root:valid_calibration:16.35054849151872, best_calibration:16.43453602097992, valid_ci:0.7029469001946066,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1220 epochs:244, Train Loss: 1220.672119140625, Reg:1.406239628791809, Calibration:12.577203750610352, Accuracy:1207.750244140625,  CI:0.5934121621621622, Clustering:0.3446962237358093Valid Loss:2586.758083767361, Reg:3.0049021936889386, Calibration:16.35054849151872, Accuracy:2569.4986979166665, CI:0.7029469001946066, Clustering:0.9088188282444946,  

DEBUG:root:pred_surv:0.29559510946273804,  emp_surv:0.2667517066001892,  km_loss:15.315181732177734, len_unique_t:406, curr_pop_nk, min:0.07947786897420883, max:0.15763691067695618, sum:0.9999997019767761, curr_post:[0.20345478 0.22886875]  curr_lik:[0.18883994 0.19310836], train_k:5, 

DEBUG:root:valid_calibration:15.255529656369461, best_calibration:16.43453602097992, valid_ci:0.700398480214994,best_ci:0.7030859049207673, best_epoch:200 
 
DEBUG:root:Iteration: 1225 epochs:245, Train Loss: 1016.51904296875, Reg:1.4064505100250244, Calibration:19.817699432373047, Accuracy:996.34619140625,  CI:0.6654279968523215, Clustering:0.355180948972702Valid Loss:2560.1071088741987, Reg:3.0052896238799787, Calibration:15.255529656369461, Accuracy:2543.954180856036, CI:0.700398480214994, Clustering:0.8975503663731436,  

DEBUG:root: Final curr_post:[0.177958  0.2786179], curr_lik:[0.1551747 0.2526919], K:6
DEBUG:root:pred_surv:0.3407832086086273,  emp_surv:0.2834123373031616,  km_loss:6.216682434082031, len_unique_t:424, curr_pop_nk, min:0.07962489873170853, max:0.1577402651309967, sum:0.9999997615814209, curr_post:[0.177958  0.2786179]  curr_lik:[0.1551747 0.2526919], train_k:6, 

DEBUG:root:valid_calibration:15.464796979203182, best_calibration:15.464796979203182, valid_ci:0.7041052729126124,best_ci:0.7041052729126124, best_epoch:246 
 
DEBUG:root:Iteration: 1230 epochs:246, Train Loss: 1399.176025390625, Reg:1.406569004058838, Calibration:7.723172664642334, Accuracy:1391.1075439453125,  CI:0.6538182258259712, Clustering:0.3453250527381897Valid Loss:2572.708781967815, Reg:3.005536957683726, Calibration:15.464796979203182, Accuracy:2556.351099258814, CI:0.7041052729126124, Clustering:0.892808804145226, * 

DEBUG:root:pred_surv:0.39523178339004517,  emp_surv:0.41204833984375,  km_loss:8.807940483093262, len_unique_t:423, curr_pop_nk, min:0.07952497899532318, max:0.15759705007076263, sum:0.9999997615814209, curr_post:[0.17442364 0.22046454]  curr_lik:[0.15247038 0.19323675], train_k:6, 

DEBUG:root:valid_calibration:16.62022639543582, best_calibration:15.464796979203182, valid_ci:0.7033639143730887,best_ci:0.7041052729126124, best_epoch:246 
 
DEBUG:root:Iteration: 1235 epochs:247, Train Loss: 1132.9827880859375, Reg:1.4067258834838867, Calibration:6.541376113891602, Accuracy:1126.092041015625,  CI:0.6658436914694364, Clustering:0.3494049310684204Valid Loss:2558.8637131911055, Reg:3.005894330831674, Calibration:16.62022639543582, Accuracy:2541.3489708533652, CI:0.7033639143730887, Clustering:0.8943744449533967,  

DEBUG:root:pred_surv:0.35505300760269165,  emp_surv:0.3066304922103882,  km_loss:10.961052894592285, len_unique_t:410, curr_pop_nk, min:0.07966287434101105, max:0.15759947896003723, sum:0.9999998211860657, curr_post:[0.21314809 0.22907607]  curr_lik:[0.19761804 0.20230836], train_k:6, 

DEBUG:root:valid_calibration:18.844624869843834, best_calibration:15.464796979203182, valid_ci:0.7000741358539524,best_ci:0.7041052729126124, best_epoch:246 
 
DEBUG:root:Iteration: 1240 epochs:248, Train Loss: 1216.0426025390625, Reg:1.4069104194641113, Calibration:13.685625076293945, Accuracy:1202.0098876953125,  CI:0.5974709544900186, Clustering:0.3470081388950348Valid Loss:2612.9171257345083, Reg:3.006294751778627, Calibration:18.844624869843834, Accuracy:2593.1886852297007, CI:0.7000741358539524, Clustering:0.8837306219288426,  

DEBUG:root:pred_surv:0.34713485836982727,  emp_surv:0.3879181146621704,  km_loss:7.312312602996826, len_unique_t:419, curr_pop_nk, min:0.07962123304605484, max:0.1574426144361496, sum:0.9999997615814209, curr_post:[0.18402167 0.23927476]  curr_lik:[0.17540891 0.21582526], train_k:6, 

DEBUG:root:valid_calibration:17.358580206194492, best_calibration:15.464796979203182, valid_ci:0.69961078676675,best_ci:0.7041052729126124, best_epoch:246 
 
DEBUG:root:Iteration: 1245 epochs:249, Train Loss: 1188.8985595703125, Reg:1.4071173667907715, Calibration:6.765625953674316, Accuracy:1181.7891845703125,  CI:0.6730474129451112, Clustering:0.34380438923835754Valid Loss:2607.1597368289263, Reg:3.00676547563993, Calibration:17.358580206194492, Accuracy:2588.9099642761753, CI:0.69961078676675, Clustering:0.8914007717727596,  

DEBUG:root:pred_surv:0.28658685088157654,  emp_surv:0.2808893024921417,  km_loss:13.346349716186523, len_unique_t:411, curr_pop_nk, min:0.07951566576957703, max:0.15724575519561768, sum:0.9999998211860657, curr_post:[0.14489119 0.1909546 ]  curr_lik:[0.15152417 0.15185723], train_k:6, 

DEBUG:root:valid_calibration:18.221319231212647, best_calibration:15.464796979203182, valid_ci:0.705448985265499,best_ci:0.7041052729126124, best_epoch:246 
 
DEBUG:root:Iteration: 1250 epochs:250, Train Loss: 1072.44384765625, Reg:1.4073243141174316, Calibration:17.715229034423828, Accuracy:1054.38427734375,  CI:0.6589223160931382, Clustering:0.3443603813648224Valid Loss:2585.193862262954, Reg:3.0071750665322328, Calibration:18.221319231212647, Accuracy:2566.096900874733, CI:0.705448985265499, Clustering:0.8756955209960285,  

DEBUG:root:pred_surv:0.3930247724056244,  emp_surv:0.36289182305336,  km_loss:10.717424392700195, len_unique_t:416, curr_pop_nk, min:0.07979565858840942, max:0.15726205706596375, sum:0.9999998211860657, curr_post:[0.18553072 0.22070244]  curr_lik:[0.15946783 0.1975686 ], train_k:6, 

DEBUG:root:valid_calibration:16.07045149191832, best_calibration:15.464796979203182, valid_ci:0.7037345936428505,best_ci:0.7041052729126124, best_epoch:246 
 
DEBUG:root:Iteration: 1255 epochs:251, Train Loss: 1166.5242919921875, Reg:1.4075040817260742, Calibration:4.612186908721924, Accuracy:1161.566650390625,  CI:0.6558259036409153, Clustering:0.34544751048088074Valid Loss:2575.627775273771, Reg:3.007560204236935, Calibration:16.07045149191832, Accuracy:2558.6839985643696, CI:0.7037345936428505, Clustering:0.8733778173088008,  

DEBUG:root:pred_surv:0.3978031575679779,  emp_surv:0.4535699486732483,  km_loss:13.600314140319824, len_unique_t:424, curr_pop_nk, min:0.07973697781562805, max:0.15708930790424347, sum:0.9999997615814209, curr_post:[0.2060408  0.27200848]  curr_lik:[0.18816946 0.26248956], train_k:6, 

DEBUG:root:valid_calibration:17.25068255367442, best_calibration:15.464796979203182, valid_ci:0.7063293485311833,best_ci:0.7041052729126124, best_epoch:246 
 
DEBUG:root:Iteration: 1260 epochs:252, Train Loss: 1058.873779296875, Reg:1.407706618309021, Calibration:10.433302879333496, Accuracy:1048.0927734375,  CI:0.6965762816826646, Clustering:0.34762001037597656Valid Loss:2584.7658336672007, Reg:3.0079922105512047, Calibration:17.25068255367442, Accuracy:2566.647260616987, CI:0.7063293485311833, Clustering:0.8679602900121965,  

DEBUG:root:pred_surv:0.338964581489563,  emp_surv:0.2663550078868866,  km_loss:14.450136184692383, len_unique_t:416, curr_pop_nk, min:0.07971427589654922, max:0.1572498381137848, sum:0.9999997615814209, curr_post:[0.21037254 0.21967012]  curr_lik:[0.1901455  0.19376132], train_k:5, 

DEBUG:root:valid_calibration:15.895239308349087, best_calibration:15.464796979203182, valid_ci:0.7038735983690112,best_ci:0.7041052729126124, best_epoch:246 
 
DEBUG:root:Iteration: 1265 epochs:253, Train Loss: 1282.511962890625, Reg:1.4079201221466064, Calibration:11.71402359008789, Accuracy:1270.4591064453125,  CI:0.625142336597586, Clustering:0.33891692757606506Valid Loss:2578.030317257612, Reg:3.0084700665922246, Calibration:15.895239308349087, Accuracy:2561.272254356971, CI:0.7038735983690112, Clustering:0.8628027688743721,  

DEBUG:root: Final curr_post:[0.19152333 0.21203078], curr_lik:[0.16281995 0.21731782], K:6
DEBUG:root:pred_surv:0.4191041588783264,  emp_surv:0.37043216824531555,  km_loss:10.148457527160645, len_unique_t:421, curr_pop_nk, min:0.07977090775966644, max:0.15716704726219177, sum:0.9999997615814209, curr_post:[0.19152333 0.21203078]  curr_lik:[0.16281995 0.21731782], train_k:6, 

DEBUG:root:valid_calibration:14.759782033088879, best_calibration:14.759782033088879, valid_ci:0.7120285423037717,best_ci:0.7120285423037717, best_epoch:254 
 
DEBUG:root:Iteration: 1270 epochs:254, Train Loss: 1247.867431640625, Reg:1.408137321472168, Calibration:8.600170135498047, Accuracy:1238.9171142578125,  CI:0.6244755408667932, Clustering:0.3500617444515228Valid Loss:2543.671697632879, Reg:3.008906657879169, Calibration:14.759782033088879, Accuracy:2528.0563484909185, CI:0.7120285423037717, Clustering:0.8556677235497369, * 

DEBUG:root:pred_surv:0.3876689076423645,  emp_surv:0.3318403363227844,  km_loss:5.197813987731934, len_unique_t:415, curr_pop_nk, min:0.07979200780391693, max:0.15727922320365906, sum:0.9999998211860657, curr_post:[0.20563982 0.21047749]  curr_lik:[0.18869038 0.19387381], train_k:6, 

DEBUG:root:valid_calibration:15.715561361394377, best_calibration:14.759782033088879, valid_ci:0.703827263460291,best_ci:0.7120285423037717, best_epoch:254 
 
DEBUG:root:Iteration: 1275 epochs:255, Train Loss: 1228.373291015625, Reg:1.4082317352294922, Calibration:6.838476657867432, Accuracy:1221.203369140625,  CI:0.6644560240012632, Clustering:0.33136293292045593Valid Loss:2576.2913369724893, Reg:3.0090719716161742, Calibration:15.715561361394377, Accuracy:2559.7200312166133, CI:0.703827263460291, Clustering:0.8559072246918311,  

DEBUG:root:pred_surv:0.2869929373264313,  emp_surv:0.3247712254524231,  km_loss:16.41257667541504, len_unique_t:404, curr_pop_nk, min:0.07982693612575531, max:0.1572611927986145, sum:0.9999997019767761, curr_post:[0.21322866 0.21941265]  curr_lik:[0.20018916 0.20172925], train_k:7, 

DEBUG:root:valid_calibration:16.03572185222919, best_calibration:14.759782033088879, valid_ci:0.7039662681864517,best_ci:0.7120285423037717, best_epoch:254 
 
DEBUG:root:Iteration: 1280 epochs:256, Train Loss: 1115.9556884765625, Reg:1.4082798957824707, Calibration:17.028162002563477, Accuracy:1098.595703125,  CI:0.6504487576708577, Clustering:0.33173099160194397Valid Loss:2566.5502303685894, Reg:3.009143038692637, Calibration:16.03572185222919, Accuracy:2549.661489633413, CI:0.7039662681864517, Clustering:0.853293917627416,  

DEBUG:root:pred_surv:0.36816200613975525,  emp_surv:0.3346959352493286,  km_loss:11.497400283813477, len_unique_t:419, curr_pop_nk, min:0.0797419473528862, max:0.15716952085494995, sum:0.9999997019767761, curr_post:[0.17096795 0.17700385]  curr_lik:[0.15280797 0.17012057], train_k:6, 

DEBUG:root:valid_calibration:18.576768728402943, best_calibration:14.759782033088879, valid_ci:0.7107774997683255,best_ci:0.7120285423037717, best_epoch:254 
 
DEBUG:root:Iteration: 1285 epochs:257, Train Loss: 1101.925048828125, Reg:1.408315658569336, Calibration:8.637798309326172, Accuracy:1092.9542236328125,  CI:0.6731459780248135, Clustering:0.33304762840270996Valid Loss:2622.3467965411323, Reg:3.009263776306413, Calibration:18.576768728402943, Accuracy:2602.913620125534, CI:0.7107774997683255, Clustering:0.8564303573380169,  

DEBUG:root:pred_surv:0.3899129331111908,  emp_surv:0.3220660388469696,  km_loss:11.247878074645996, len_unique_t:430, curr_pop_nk, min:0.08015293627977371, max:0.15724235773086548, sum:0.9999997615814209, curr_post:[0.16576545 0.21247193]  curr_lik:[0.14079228 0.21811147], train_k:6, 

DEBUG:root:valid_calibration:19.28349234100081, best_calibration:14.759782033088879, valid_ci:0.7134649244740988,best_ci:0.7120285423037717, best_epoch:254 
 
DEBUG:root:Iteration: 1290 epochs:258, Train Loss: 1218.5484619140625, Reg:1.4084217548370361, Calibration:7.1139116287231445, Accuracy:1211.107177734375,  CI:0.6632612784137082, Clustering:0.32742443680763245Valid Loss:2624.3737375634346, Reg:3.009517987569173, Calibration:19.28349234100081, Accuracy:2604.233701004941, CI:0.7134649244740988, Clustering:0.8564827024427234,  

DEBUG:root:pred_surv:0.4045756459236145,  emp_surv:0.3581826686859131,  km_loss:10.841285705566406, len_unique_t:415, curr_pop_nk, min:0.08035965263843536, max:0.15720468759536743, sum:0.9999997615814209, curr_post:[0.19596127 0.25203294]  curr_lik:[0.16981114 0.22257476], train_k:6, 

DEBUG:root:valid_calibration:17.6241214458759, best_calibration:14.759782033088879, valid_ci:0.720368825873413,best_ci:0.7120285423037717, best_epoch:254 
 
DEBUG:root:Iteration: 1295 epochs:259, Train Loss: 1209.2747802734375, Reg:1.4086213111877441, Calibration:10.098901748657227, Accuracy:1198.8380126953125,  CI:0.6544072040614735, Clustering:0.33792075514793396Valid Loss:2607.566377036592, Reg:3.009968843215551, Calibration:17.6241214458759, Accuracy:2589.0982864249463, CI:0.720368825873413, Clustering:0.843966618562356,  

DEBUG:root:pred_surv:0.3703055679798126,  emp_surv:0.4037111699581146,  km_loss:11.252628326416016, len_unique_t:409, curr_pop_nk, min:0.08032085001468658, max:0.15705105662345886, sum:0.9999997615814209, curr_post:[0.17316179 0.22851242]  curr_lik:[0.17700016 0.19296461], train_k:6, 

DEBUG:root:valid_calibration:16.689920017861912, best_calibration:14.759782033088879, valid_ci:0.7137892688351404,best_ci:0.7120285423037717, best_epoch:254 
 
DEBUG:root:Iteration: 1300 epochs:260, Train Loss: 1054.4921875, Reg:1.4088315963745117, Calibration:11.8516206741333, Accuracy:1042.2965087890625,  CI:0.6478645901496314, Clustering:0.3441694378852844Valid Loss:2580.8160243890225, Reg:3.0104413501217833, Calibration:16.689920017861912, Accuracy:2563.2835453392095, CI:0.7137892688351404, Clustering:0.8425997235836127,  

DEBUG:root:ITER:1300, Train CI:0.6631147175531678, Clustering:0.33306846022605896,Reg:1.408886432647705, Accuracy:1181.639404296875, Calibration:10.67866039276123, Cost:1192.651123046875
DEBUG:root: Final curr_post:[0.1630112  0.27331534], curr_lik:[0.15311915 0.2418535 ], K:5
DEBUG:root:pred_surv:0.39790380001068115,  emp_surv:0.27857697010040283,  km_loss:14.99097728729248, len_unique_t:409, curr_pop_nk, min:0.08043497800827026, max:0.15696628391742706, sum:0.9999997615814209, curr_post:[0.1630112  0.27331534]  curr_lik:[0.15311915 0.2418535 ], train_k:5, 

DEBUG:root:valid_calibration:14.638766264304136, best_calibration:14.638766264304136, valid_ci:0.7154109906403484,best_ci:0.7154109906403484, best_epoch:261 
 
DEBUG:root:Iteration: 1305 epochs:261, Train Loss: 990.0510864257812, Reg:1.4090396165847778, Calibration:12.11230182647705, Accuracy:977.6099243164062,  CI:0.6781264324707255, Clustering:0.3288396894931793Valid Loss:2573.3861678685894, Reg:3.0108501768519735, Calibration:14.638766264304136, Accuracy:2557.9082782451924, CI:0.7154109906403484, Clustering:0.8390920284466865, * 

DEBUG:root: Final curr_post:[0.20569772 0.2252775 ], curr_lik:[0.19573455 0.20515701], K:5
DEBUG:root:pred_surv:0.3590259850025177,  emp_surv:0.27446088194847107,  km_loss:9.740015029907227, len_unique_t:415, curr_pop_nk, min:0.08045241981744766, max:0.15683355927467346, sum:0.9999997615814209, curr_post:[0.20569772 0.2252775 ]  curr_lik:[0.19573455 0.20515701], train_k:5, 

DEBUG:root:valid_calibration:14.284684107853815, best_calibration:14.284684107853815, valid_ci:0.7166156982670744,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1310 epochs:262, Train Loss: 1273.4461669921875, Reg:1.409226894378662, Calibration:9.00041389465332, Accuracy:1264.117431640625,  CI:0.6121424533634822, Clustering:0.3284272849559784Valid Loss:2548.2302934695513, Reg:3.0112154463417506, Calibration:14.284684107853815, Accuracy:2533.1092247596152, CI:0.7166156982670744, Clustering:0.8364008405269721, * 

DEBUG:root:pred_surv:0.35315069556236267,  emp_surv:0.41676536202430725,  km_loss:10.045578002929688, len_unique_t:412, curr_pop_nk, min:0.0804227665066719, max:0.15686488151550293, sum:0.9999997615814209, curr_post:[0.16793264 0.22999726]  curr_lik:[0.15094471 0.23081394], train_k:6, 

DEBUG:root:valid_calibration:19.09202184432592, best_calibration:14.284684107853815, valid_ci:0.7116578630340098,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1315 epochs:263, Train Loss: 1209.84130859375, Reg:1.4093447923660278, Calibration:11.499582290649414, Accuracy:1198.005126953125,  CI:0.657699584629102, Clustering:0.3364984095096588Valid Loss:2595.908662192842, Reg:3.011462525424794, Calibration:19.09202184432592, Accuracy:2575.9765103331997, CI:0.7116578630340098, Clustering:0.840114095272162,  

DEBUG:root:pred_surv:0.4357408583164215,  emp_surv:0.4039159417152405,  km_loss:6.975612640380859, len_unique_t:411, curr_pop_nk, min:0.08049547672271729, max:0.1569225788116455, sum:0.9999997019767761, curr_post:[0.18915679 0.20027559]  curr_lik:[0.16542833 0.17823152], train_k:6, 

DEBUG:root:valid_calibration:19.391263652051613, best_calibration:14.284684107853815, valid_ci:0.707256046705588,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1320 epochs:264, Train Loss: 1224.62158203125, Reg:1.4095045328140259, Calibration:7.70216703414917, Accuracy:1216.596923828125,  CI:0.6514469747150591, Clustering:0.3224585950374603Valid Loss:2619.3860697950054, Reg:3.011852502822876, Calibration:19.391263652051613, Accuracy:2599.160740518162, CI:0.707256046705588, Clustering:0.8340369050319377,  

DEBUG:root:pred_surv:0.3271728754043579,  emp_surv:0.3752826750278473,  km_loss:13.553611755371094, len_unique_t:411, curr_pop_nk, min:0.0802554190158844, max:0.15691843628883362, sum:0.9999997615814209, curr_post:[0.21595441 0.25858274]  curr_lik:[0.20722543 0.23781224], train_k:5, 

DEBUG:root:valid_calibration:20.66541329408303, best_calibration:14.284684107853815, valid_ci:0.7110091743119266,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1325 epochs:265, Train Loss: 1139.57470703125, Reg:1.4097262620925903, Calibration:14.802663803100586, Accuracy:1124.449462890625,  CI:0.670057095322721, Clustering:0.3226144313812256Valid Loss:2614.665756877671, Reg:3.012329594701783, Calibration:20.66541329408303, Accuracy:2593.1654710036055, CI:0.7110091743119266, Clustering:0.834860417068514,  

DEBUG:root:pred_surv:0.3310847878456116,  emp_surv:0.3224788308143616,  km_loss:8.864233016967773, len_unique_t:425, curr_pop_nk, min:0.08053538203239441, max:0.15658769011497498, sum:0.9999997615814209, curr_post:[0.18315925 0.24490091]  curr_lik:[0.16778284 0.21181904], train_k:6, 

DEBUG:root:valid_calibration:18.320713287744766, best_calibration:14.284684107853815, valid_ci:0.7050783059957372,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1330 epochs:266, Train Loss: 1185.727294921875, Reg:1.4099812507629395, Calibration:7.969065189361572, Accuracy:1177.431884765625,  CI:0.6614044520916228, Clustering:0.32624882459640503Valid Loss:2604.839879223424, Reg:3.012892018016587, Calibration:18.320713287744766, Accuracy:2585.689186030983, CI:0.7050783059957372, Clustering:0.8302630904393318,  

DEBUG:root:pred_surv:0.4242834746837616,  emp_surv:0.3664781153202057,  km_loss:8.893045425415039, len_unique_t:421, curr_pop_nk, min:0.08063576370477676, max:0.1566939353942871, sum:0.9999997615814209, curr_post:[0.18997447 0.1924279 ]  curr_lik:[0.1689223  0.19430603], train_k:6, 

DEBUG:root:valid_calibration:14.945624221084463, best_calibration:14.284684107853815, valid_ci:0.7160596793624316,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1335 epochs:267, Train Loss: 1254.0352783203125, Reg:1.4102381467819214, Calibration:6.6382904052734375, Accuracy:1247.073486328125,  CI:0.6525074890627357, Clustering:0.32343998551368713Valid Loss:2574.500450721154, Reg:3.013418780432807, Calibration:14.945624221084463, Accuracy:2558.729383680555, CI:0.7160596793624316, Clustering:0.8253749364461653,  

DEBUG:root:pred_surv:0.324134886264801,  emp_surv:0.3505175709724426,  km_loss:13.354043960571289, len_unique_t:406, curr_pop_nk, min:0.08049618452787399, max:0.15676088631153107, sum:0.9999997615814209, curr_post:[0.21897301 0.22275169]  curr_lik:[0.18620378 0.20059545], train_k:6, 

DEBUG:root:valid_calibration:13.66636793837588, best_calibration:14.284684107853815, valid_ci:0.703224909646928,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1340 epochs:268, Train Loss: 1119.15771484375, Reg:1.410496473312378, Calibration:12.387731552124023, Accuracy:1106.44677734375,  CI:0.6267446900736888, Clustering:0.3232583999633789Valid Loss:2573.6516968816773, Reg:3.0139806943062024, Calibration:13.66636793837588, Accuracy:2559.1647156283384, CI:0.703224909646928, Clustering:0.8206164352914207,  

DEBUG:root:pred_surv:0.39350560307502747,  emp_surv:0.4045884609222412,  km_loss:10.677156448364258, len_unique_t:420, curr_pop_nk, min:0.08060789108276367, max:0.15661832690238953, sum:0.9999997019767761, curr_post:[0.18206921 0.22596303]  curr_lik:[0.17171946 0.20053451], train_k:6, 

DEBUG:root:valid_calibration:14.68982452001327, best_calibration:14.284684107853815, valid_ci:0.7152256510054675,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1345 epochs:269, Train Loss: 1151.947509765625, Reg:1.4106793403625488, Calibration:10.759641647338867, Accuracy:1140.8609619140625,  CI:0.6631148836264307, Clustering:0.3268587291240692Valid Loss:2540.3111123631143, Reg:3.0143474921202045, Calibration:14.68982452001327, Accuracy:2524.810791015625, CI:0.7152256510054675, Clustering:0.8109709900668544,  

DEBUG:root:pred_surv:0.35878270864486694,  emp_surv:0.326427698135376,  km_loss:11.514081001281738, len_unique_t:414, curr_pop_nk, min:0.08088137954473495, max:0.15665024518966675, sum:0.9999996423721313, curr_post:[0.1673943  0.22131084]  curr_lik:[0.13648698 0.22459461], train_k:6, 

DEBUG:root:valid_calibration:13.312568012465778, best_calibration:14.284684107853815, valid_ci:0.7096654619590399,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1350 epochs:270, Train Loss: 1126.5755615234375, Reg:1.4108788967132568, Calibration:13.661752700805664, Accuracy:1112.595458984375,  CI:0.6583240223463687, Clustering:0.31841856241226196Valid Loss:2535.977094601362, Reg:3.0147716020926447, Calibration:13.312568012465778, Accuracy:2521.855280949519, CI:0.7096654619590399, Clustering:0.8089860152994465,  

DEBUG:root:pred_surv:0.37872329354286194,  emp_surv:0.3228093385696411,  km_loss:12.236605644226074, len_unique_t:415, curr_pop_nk, min:0.08081097155809402, max:0.15657788515090942, sum:0.9999996423721313, curr_post:[0.1789051  0.28061354]  curr_lik:[0.16854605 0.24819972], train_k:6, 

DEBUG:root:valid_calibration:14.168158555642151, best_calibration:14.284684107853815, valid_ci:0.7083680845148735,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1355 epochs:271, Train Loss: 1142.6612548828125, Reg:1.411036491394043, Calibration:9.852823257446289, Accuracy:1132.4842529296875,  CI:0.6624947851481018, Clustering:0.3241817355155945Valid Loss:2537.3138688568374, Reg:3.0150887293693347, Calibration:14.168158555642151, Accuracy:2522.3378238514956, CI:0.7083680845148735, Clustering:0.8081578546100192,  

DEBUG:root:pred_surv:0.3432035744190216,  emp_surv:0.31172671914100647,  km_loss:10.156280517578125, len_unique_t:421, curr_pop_nk, min:0.08076861500740051, max:0.1565442681312561, sum:0.9999996423721313, curr_post:[0.2176562  0.22501361]  curr_lik:[0.19985521 0.21506168], train_k:6, 

DEBUG:root:valid_calibration:16.20456703707703, best_calibration:14.284684107853815, valid_ci:0.7110091743119266,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1360 epochs:272, Train Loss: 1261.6241455078125, Reg:1.4111173152923584, Calibration:7.416108131408691, Accuracy:1253.891845703125,  CI:0.6634792819996644, Clustering:0.31613436341285706Valid Loss:2550.7462982438565, Reg:3.0152362126570478, Calibration:16.20456703707703, Accuracy:2533.7365305321846, CI:0.7110091743119266, Clustering:0.8049532134308773,  

DEBUG:root:pred_surv:0.3537151515483856,  emp_surv:0.3092714548110962,  km_loss:12.51800537109375, len_unique_t:428, curr_pop_nk, min:0.0808032974600792, max:0.15639738738536835, sum:0.9999997615814209, curr_post:[0.17894092 0.19357319]  curr_lik:[0.16274884 0.17134924], train_k:6, 

DEBUG:root:valid_calibration:17.569672348152878, best_calibration:14.284684107853815, valid_ci:0.7095264572328792,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1365 epochs:273, Train Loss: 1358.485107421875, Reg:1.4112062454223633, Calibration:16.75428581237793, Accuracy:1341.408447265625,  CI:0.6200757371812129, Clustering:0.32243287563323975Valid Loss:2575.845310830662, Reg:3.015409932177291, Calibration:17.569672348152878, Accuracy:2557.473989633413, CI:0.7095264572328792, Clustering:0.8015231444285466,  

DEBUG:root:pred_surv:0.33970019221305847,  emp_surv:0.26776111125946045,  km_loss:10.614053726196289, len_unique_t:425, curr_pop_nk, min:0.08077802509069443, max:0.15619000792503357, sum:0.9999997019767761, curr_post:[0.15813656 0.18655567]  curr_lik:[0.14745103 0.1770489 ], train_k:6, 

DEBUG:root:valid_calibration:19.57381281078371, best_calibration:14.284684107853815, valid_ci:0.7107311648596052,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1370 epochs:274, Train Loss: 1137.8348388671875, Reg:1.4112647771835327, Calibration:12.203755378723145, Accuracy:1125.309326171875,  CI:0.6098009973435242, Clustering:0.32180824875831604Valid Loss:2606.0050247061963, Reg:3.015589000832321, Calibration:19.57381281078371, Accuracy:2585.633367554754, CI:0.7107311648596052, Clustering:0.7978836950073894,  

DEBUG:root:pred_surv:0.34602367877960205,  emp_surv:0.3522331416606903,  km_loss:10.061379432678223, len_unique_t:415, curr_pop_nk, min:0.08077460527420044, max:0.15605062246322632, sum:0.9999997019767761, curr_post:[0.17760319 0.22802015]  curr_lik:[0.15947104 0.19897474], train_k:6, 

DEBUG:root:valid_calibration:19.529566805586853, best_calibration:14.284684107853815, valid_ci:0.7087850986933556,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1375 epochs:275, Train Loss: 1092.552734375, Reg:1.4114062786102295, Calibration:10.020275115966797, Accuracy:1082.213623046875,  CI:0.6974280230326295, Clustering:0.31886014342308044Valid Loss:2599.4750454894497, Reg:3.015903326181265, Calibration:19.529566805586853, Accuracy:2579.1464259481836, CI:0.7087850986933556, Clustering:0.7991953792735043,  

DEBUG:root:pred_surv:0.4645971655845642,  emp_surv:0.39821821451187134,  km_loss:13.177248001098633, len_unique_t:419, curr_pop_nk, min:0.08088886737823486, max:0.15604722499847412, sum:0.9999998211860657, curr_post:[0.16016404 0.23468053]  curr_lik:[0.14456375 0.19371559], train_k:6, 

DEBUG:root:valid_calibration:18.034462235931656, best_calibration:14.284684107853815, valid_ci:0.7085997590584746,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1380 epochs:276, Train Loss: 1065.4708251953125, Reg:1.4115715026855469, Calibration:16.040813446044922, Accuracy:1049.11181640625,  CI:0.6599387400566883, Clustering:0.31826430559158325Valid Loss:2594.585972973424, Reg:3.016250255780342, Calibration:18.034462235931656, Accuracy:2575.7568881043003, CI:0.7085997590584746, Clustering:0.7946430745287838,  

DEBUG:root:pred_surv:0.4119183123111725,  emp_surv:0.31877821683883667,  km_loss:11.268269538879395, len_unique_t:422, curr_pop_nk, min:0.08077193796634674, max:0.1558842658996582, sum:0.9999997615814209, curr_post:[0.17581294 0.17810479]  curr_lik:[0.15230373 0.15960026], train_k:5, 

DEBUG:root:valid_calibration:18.405366147685253, best_calibration:14.284684107853815, valid_ci:0.7098971365026411,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1385 epochs:277, Train Loss: 1061.29052734375, Reg:1.411736011505127, Calibration:10.0299072265625, Accuracy:1050.931640625,  CI:0.669446164735026, Clustering:0.3290286362171173Valid Loss:2564.902802817842, Reg:3.016610430856036, Calibration:18.405366147685253, Accuracy:2545.706985343216, CI:0.7098971365026411, Clustering:0.7903401413534441,  

DEBUG:root:pred_surv:0.42671430110931396,  emp_surv:0.41978874802589417,  km_loss:9.021927833557129, len_unique_t:421, curr_pop_nk, min:0.08080384880304337, max:0.15597350895404816, sum:0.9999998211860657, curr_post:[0.1548831  0.19777326]  curr_lik:[0.15758382 0.18007033], train_k:5, 

DEBUG:root:valid_calibration:18.6309753320156, best_calibration:14.284684107853815, valid_ci:0.7086460939671949,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1390 epochs:278, Train Loss: 1147.27294921875, Reg:1.4119113683700562, Calibration:5.944994926452637, Accuracy:1141.00439453125,  CI:0.6465731005752827, Clustering:0.32355597615242004Valid Loss:2592.2559428418804, Reg:3.016987417498205, Calibration:18.6309753320156, Accuracy:2572.8365906283384, CI:0.7086460939671949, Clustering:0.7886356140813257,  

DEBUG:root:pred_surv:0.4145963788032532,  emp_surv:0.3767481744289398,  km_loss:13.500295639038086, len_unique_t:426, curr_pop_nk, min:0.08103634417057037, max:0.15596164762973785, sum:0.9999997615814209, curr_post:[0.1617844  0.23867764]  curr_lik:[0.13519026 0.23950177], train_k:5, 

DEBUG:root:valid_calibration:14.959286420773235, best_calibration:14.284684107853815, valid_ci:0.7086924288759151,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1395 epochs:279, Train Loss: 1078.47607421875, Reg:1.4121077060699463, Calibration:11.149421691894531, Accuracy:1067.009765625,  CI:0.6258936864159664, Clustering:0.31694650650024414Valid Loss:2540.7600076789527, Reg:3.017400319759662, Calibration:14.959286420773235, Accuracy:2525.0152848724624, CI:0.7086924288759151, Clustering:0.785618893101684,  

DEBUG:root:pred_surv:0.44123053550720215,  emp_surv:0.3195735216140747,  km_loss:12.04797077178955, len_unique_t:415, curr_pop_nk, min:0.08101785182952881, max:0.15617267787456512, sum:0.9999997615814209, curr_post:[0.19153138 0.25087193]  curr_lik:[0.18174437 0.2306788 ], train_k:6, 

DEBUG:root:valid_calibration:16.175308798113438, best_calibration:14.284684107853815, valid_ci:0.70767306088407,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1400 epochs:280, Train Loss: 1099.9989013671875, Reg:1.4122710227966309, Calibration:11.336427688598633, Accuracy:1088.333984375,  CI:0.6735219622020653, Clustering:0.32846617698669434Valid Loss:2556.6959218082266, Reg:3.0177368058098684, Calibration:16.175308798113438, Accuracy:2539.732060880742, CI:0.70767306088407, Clustering:0.7885142396657895,  

DEBUG:root:ITER:1400, Train CI:0.635507618558466, Clustering:0.31936898827552795,Reg:1.4123008251190186, Accuracy:1198.4853515625, Calibration:13.987866401672363, Cost:1212.7926025390625
DEBUG:root:pred_surv:0.40120193362236023,  emp_surv:0.4361932873725891,  km_loss:9.608378410339355, len_unique_t:423, curr_pop_nk, min:0.08088091015815735, max:0.15599602460861206, sum:0.9999997615814209, curr_post:[0.209991   0.25591433]  curr_lik:[0.20150313 0.23795001], train_k:6, 

DEBUG:root:valid_calibration:15.805407467051449, best_calibration:14.284684107853815, valid_ci:0.7054953201742192,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1405 epochs:281, Train Loss: 1172.5394287109375, Reg:1.412405252456665, Calibration:8.874397277832031, Accuracy:1163.34912109375,  CI:0.6592004778360852, Clustering:0.31586888432502747Valid Loss:2554.6692416199253, Reg:3.0180284610161414, Calibration:15.805407467051449, Accuracy:2538.0801991519766, CI:0.7054953201742192, Clustering:0.7833604756583515,  

DEBUG:root:pred_surv:0.404095858335495,  emp_surv:0.34779712557792664,  km_loss:13.981023788452148, len_unique_t:405, curr_pop_nk, min:0.08091259002685547, max:0.15594077110290527, sum:0.9999997615814209, curr_post:[0.18577802 0.18920182]  curr_lik:[0.16020314 0.19746092], train_k:6, 

DEBUG:root:valid_calibration:17.692223573342346, best_calibration:14.284684107853815, valid_ci:0.7036882587341303,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1410 epochs:282, Train Loss: 1188.71142578125, Reg:1.4125295877456665, Calibration:14.931451797485352, Accuracy:1173.4573974609375,  CI:0.6269178604730016, Clustering:0.3226882219314575Valid Loss:2557.4074769631407, Reg:3.0182722287300305, Calibration:17.692223573342346, Accuracy:2538.933387169471, CI:0.7036882587341303, Clustering:0.7820773201111035,  

DEBUG:root:pred_surv:0.3866914212703705,  emp_surv:0.42615723609924316,  km_loss:16.611860275268555, len_unique_t:418, curr_pop_nk, min:0.08092918246984482, max:0.15573738515377045, sum:0.9999997615814209, curr_post:[0.17066674 0.27206784]  curr_lik:[0.14003696 0.22764724], train_k:5, 

DEBUG:root:valid_calibration:17.495220542972923, best_calibration:14.284684107853815, valid_ci:0.7100361412288018,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1415 epochs:283, Train Loss: 1196.430419921875, Reg:1.4126783609390259, Calibration:12.101316452026367, Accuracy:1184.008056640625,  CI:0.6757450418920352, Clustering:0.3209972381591797Valid Loss:2554.1968712439902, Reg:3.018615337518545, Calibration:17.495220542972923, Accuracy:2535.9251886351494, CI:0.7100361412288018, Clustering:0.7766174454974313,  

DEBUG:root:pred_surv:0.37185946106910706,  emp_surv:0.37986457347869873,  km_loss:11.471656799316406, len_unique_t:425, curr_pop_nk, min:0.0811343565583229, max:0.15572166442871094, sum:0.9999997019767761, curr_post:[0.21190605 0.21788451]  curr_lik:[0.1768708  0.18529156], train_k:6, 

DEBUG:root:valid_calibration:18.738410411736904, best_calibration:14.284684107853815, valid_ci:0.7003058103975535,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1420 epochs:284, Train Loss: 1137.0911865234375, Reg:1.4128459692001343, Calibration:7.397120475769043, Accuracy:1129.37353515625,  CI:0.6874900289445496, Clustering:0.3205367624759674Valid Loss:2594.8306352664263, Reg:3.0189775503598724, Calibration:18.738410411736904, Accuracy:2575.3212953225157, CI:0.7003058103975535, Clustering:0.7710148636092488,  

DEBUG:root:pred_surv:0.3769659101963043,  emp_surv:0.42569202184677124,  km_loss:7.503175258636475, len_unique_t:418, curr_pop_nk, min:0.08101998269557953, max:0.15567943453788757, sum:0.9999997615814209, curr_post:[0.1587978  0.15882887]  curr_lik:[0.13475943 0.15301514], train_k:5, 

DEBUG:root:valid_calibration:17.95940113882733, best_calibration:14.284684107853815, valid_ci:0.714113613196182,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1425 epochs:285, Train Loss: 1123.6856689453125, Reg:1.4130419492721558, Calibration:5.824255466461182, Accuracy:1117.545166015625,  CI:0.6661335465813675, Clustering:0.3162875771522522Valid Loss:2568.2863414797007, Reg:3.0194113397190714, Calibration:17.95940113882733, Accuracy:2549.5589818709936, CI:0.714113613196182, Clustering:0.7679848971529903,  

DEBUG:root:pred_surv:0.4712524712085724,  emp_surv:0.4150887429714203,  km_loss:12.886941909790039, len_unique_t:415, curr_pop_nk, min:0.08108954131603241, max:0.1555939018726349, sum:0.9999997615814209, curr_post:[0.20059372 0.27284476]  curr_lik:[0.17222148 0.23910664], train_k:6, 

DEBUG:root:valid_calibration:18.03569508413983, best_calibration:14.284684107853815, valid_ci:0.7154573255490687,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1430 epochs:286, Train Loss: 982.4446411132812, Reg:1.4132440090179443, Calibration:13.24072265625, Accuracy:968.8890380859375,  CI:0.6546685910958143, Clustering:0.31489893794059753Valid Loss:2575.3379886985845, Reg:3.019849714050945, Calibration:18.03569508413983, Accuracy:2556.538378071581, CI:0.7154573255490687, Clustering:0.76403207758553,  

DEBUG:root:pred_surv:0.33841472864151,  emp_surv:0.432837575674057,  km_loss:11.376490592956543, len_unique_t:414, curr_pop_nk, min:0.08119529485702515, max:0.15570077300071716, sum:0.9999997615814209, curr_post:[0.18105458 0.24150588]  curr_lik:[0.17060506 0.21319334], train_k:6, 

DEBUG:root:valid_calibration:17.66464445326063, best_calibration:14.284684107853815, valid_ci:0.7130479102956168,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1435 epochs:287, Train Loss: 1165.9468994140625, Reg:1.4134455919265747, Calibration:9.660972595214844, Accuracy:1155.97802734375,  CI:0.6694348839791273, Clustering:0.30784210562705994Valid Loss:2559.5345782418535, Reg:3.0202565030155015, Calibration:17.66464445326063, Accuracy:2541.1056127303686, CI:0.7130479102956168, Clustering:0.7641326922636765,  

DEBUG:root:pred_surv:0.40429210662841797,  emp_surv:0.29341015219688416,  km_loss:11.965012550354004, len_unique_t:420, curr_pop_nk, min:0.08120425790548325, max:0.15554305911064148, sum:0.9999997615814209, curr_post:[0.21080595 0.25613096]  curr_lik:[0.19595508 0.244941  ], train_k:6, 

DEBUG:root:valid_calibration:14.945021042456993, best_calibration:14.284684107853815, valid_ci:0.7132332499304976,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1440 epochs:288, Train Loss: 1165.158935546875, Reg:1.4136409759521484, Calibration:9.919486045837402, Accuracy:1154.931640625,  CI:0.6554757771816316, Clustering:0.3078558146953583Valid Loss:2528.614272419204, Reg:3.020689528212588, Calibration:14.945021042456993, Accuracy:2512.909718048878, CI:0.7132332499304976, Clustering:0.759710422438434,  

DEBUG:root:pred_surv:0.407329797744751,  emp_surv:0.3703462779521942,  km_loss:12.703322410583496, len_unique_t:417, curr_pop_nk, min:0.08140959590673447, max:0.15545654296875, sum:0.9999997615814209, curr_post:[0.17690168 0.18289417]  curr_lik:[0.16421732 0.18597288], train_k:6, 

DEBUG:root:valid_calibration:15.891058832152275, best_calibration:14.284684107853815, valid_ci:0.7111945139468075,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1445 epochs:289, Train Loss: 1014.42626953125, Reg:1.413796067237854, Calibration:9.48944091796875, Accuracy:1004.62744140625,  CI:0.6611444393170282, Clustering:0.3093835711479187Valid Loss:2544.5048014322915, Reg:3.02098602311224, Calibration:15.891058832152275, Accuracy:2527.855767144097, CI:0.7111945139468075, Clustering:0.7579271227885515,  

DEBUG:root:pred_surv:0.40365317463874817,  emp_surv:0.448934942483902,  km_loss:13.378972053527832, len_unique_t:424, curr_pop_nk, min:0.08143408596515656, max:0.15540939569473267, sum:0.9999997615814209, curr_post:[0.21047775 0.21816406]  curr_lik:[0.18370368 0.20135832], train_k:6, 

DEBUG:root:valid_calibration:16.202914409148388, best_calibration:14.284684107853815, valid_ci:0.7150403113705865,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1450 epochs:290, Train Loss: 1110.0738525390625, Reg:1.4139676094055176, Calibration:7.495977878570557, Accuracy:1102.2655029296875,  CI:0.686007531227039, Clustering:0.31239089369773865Valid Loss:2549.267369457799, Reg:3.021388991266234, Calibration:16.202914409148388, Accuracy:2532.3157677283652, CI:0.7150403113705865, Clustering:0.7492397458125383,  

DEBUG:root:pred_surv:0.4147043824195862,  emp_surv:0.09880303591489792,  km_loss:15.978082656860352, len_unique_t:426, curr_pop_nk, min:0.08152005076408386, max:0.15540415048599243, sum:0.9999997615814209, curr_post:[0.20859651 0.22108473]  curr_lik:[0.17876296 0.19224681], train_k:6, 

DEBUG:root:valid_calibration:13.579080247471474, best_calibration:14.284684107853815, valid_ci:0.7104994903160041,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1455 epochs:291, Train Loss: 1088.027587890625, Reg:1.4142001867294312, Calibration:9.807908058166504, Accuracy:1077.9090576171875,  CI:0.6340759364015178, Clustering:0.3106614053249359Valid Loss:2531.208788227831, Reg:3.0218795833424625, Calibration:13.579080247471474, Accuracy:2516.880915715144, CI:0.7104994903160041, Clustering:0.7488384970232971,  

DEBUG:root:pred_surv:0.37314537167549133,  emp_surv:0.41113340854644775,  km_loss:11.295693397521973, len_unique_t:425, curr_pop_nk, min:0.08166982233524323, max:0.15535035729408264, sum:0.9999997615814209, curr_post:[0.23623888 0.24085818]  curr_lik:[0.20863582 0.23130544], train_k:6, 

DEBUG:root:valid_calibration:14.61355502788837, best_calibration:14.284684107853815, valid_ci:0.7126772310258549,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1460 epochs:292, Train Loss: 1111.750732421875, Reg:1.4142688512802124, Calibration:11.714223861694336, Accuracy:1099.722900390625,  CI:0.6588456524990918, Clustering:0.3135395646095276Valid Loss:2542.4053485576924, Reg:3.0219098951062584, Calibration:14.61355502788837, Accuracy:2527.0398783887554, CI:0.7126772310258549, Clustering:0.7519006219684568,  

DEBUG:root:pred_surv:0.43313688039779663,  emp_surv:0.3603801429271698,  km_loss:9.512105941772461, len_unique_t:418, curr_pop_nk, min:0.08173548430204391, max:0.155306875705719, sum:0.9999997615814209, curr_post:[0.16683078 0.23855357]  curr_lik:[0.14526612 0.20576558], train_k:5, 

DEBUG:root:valid_calibration:20.377982375968216, best_calibration:14.284684107853815, valid_ci:0.7139746084700214,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1465 epochs:293, Train Loss: 1164.1029052734375, Reg:1.4142155647277832, Calibration:14.643232345581055, Accuracy:1149.153564453125,  CI:0.6490002802952444, Clustering:0.30611613392829895Valid Loss:2600.2082498664527, Reg:3.0218604792896495, Calibration:20.377982375968216, Accuracy:2579.071305755876, CI:0.7139746084700214, Clustering:0.7584606353034321,  

DEBUG:root:pred_surv:0.32956475019454956,  emp_surv:0.15934085845947266,  km_loss:15.834280014038086, len_unique_t:408, curr_pop_nk, min:0.08170165121555328, max:0.15519580245018005, sum:0.9999997615814209, curr_post:[0.17410716 0.20500273]  curr_lik:[0.1477767 0.2120027], train_k:6, 

DEBUG:root:valid_calibration:21.351975253504566, best_calibration:14.284684107853815, valid_ci:0.7129089055694561,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1470 epochs:294, Train Loss: 1050.567626953125, Reg:1.4142988920211792, Calibration:17.268875122070312, Accuracy:1032.990234375,  CI:0.6731073740754846, Clustering:0.3084246814250946Valid Loss:2623.3429215912124, Reg:3.0220550859076343, Calibration:21.351975253504566, Accuracy:2601.238805004674, CI:0.7129089055694561, Clustering:0.752279264295203,  

DEBUG:root:pred_surv:0.3818160891532898,  emp_surv:0.25257164239883423,  km_loss:13.7112455368042, len_unique_t:411, curr_pop_nk, min:0.08149708062410355, max:0.1550780087709427, sum:0.9999998211860657, curr_post:[0.15120015 0.23912305]  curr_lik:[0.1704752  0.19640926], train_k:6, 

DEBUG:root:valid_calibration:20.74831163781321, best_calibration:14.284684107853815, valid_ci:0.7190714484292466,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1475 epochs:295, Train Loss: 1150.0037841796875, Reg:1.414445400238037, Calibration:11.638625144958496, Accuracy:1138.060546875,  CI:0.6699173070497828, Clustering:0.30459094047546387Valid Loss:2623.4908144698184, Reg:3.022395392768403, Calibration:20.74831163781321, Accuracy:2601.9928761017627, CI:0.7190714484292466, Clustering:0.7496704148431109,  

DEBUG:root:pred_surv:0.33555054664611816,  emp_surv:0.32288870215415955,  km_loss:11.518754005432129, len_unique_t:414, curr_pop_nk, min:0.08158677071332932, max:0.15503402054309845, sum:0.9999997615814209, curr_post:[0.1583772  0.17474884]  curr_lik:[0.13762811 0.18566392], train_k:6, 

DEBUG:root:valid_calibration:19.82761040712014, best_calibration:14.284684107853815, valid_ci:0.7028542303771662,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1480 epochs:296, Train Loss: 1101.49853515625, Reg:1.414633870124817, Calibration:7.986812591552734, Accuracy:1093.2054443359375,  CI:0.6438600401158904, Clustering:0.3062927722930908Valid Loss:2635.2312136919068, Reg:3.0228146630474644, Calibration:19.82761040712014, Accuracy:2614.6540193476226, CI:0.7028542303771662, Clustering:0.7498289784814557,  

DEBUG:root:pred_surv:0.3489415943622589,  emp_surv:0.3093583583831787,  km_loss:11.12410831451416, len_unique_t:420, curr_pop_nk, min:0.08161724358797073, max:0.1548478901386261, sum:0.9999997615814209, curr_post:[0.1479791  0.34162572]  curr_lik:[0.1394687  0.30233735], train_k:6, 

DEBUG:root:valid_calibration:17.450603664430798, best_calibration:14.284684107853815, valid_ci:0.7146696321008248,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1485 epochs:297, Train Loss: 1191.2139892578125, Reg:1.4148733615875244, Calibration:13.011909484863281, Accuracy:1177.89697265625,  CI:0.6524629490333205, Clustering:0.3050801753997803Valid Loss:2588.032779530582, Reg:3.023321302528055, Calibration:17.450603664430798, Accuracy:2569.833608774038, CI:0.7146696321008248, Clustering:0.7486638223004137,  

DEBUG:root:pred_surv:0.35778412222862244,  emp_surv:0.3962077498435974,  km_loss:12.270833015441895, len_unique_t:420, curr_pop_nk, min:0.08162681758403778, max:0.1547168344259262, sum:0.9999997615814209, curr_post:[0.19188893 0.2248753 ]  curr_lik:[0.16909117 0.20828046], train_k:6, 

DEBUG:root:valid_calibration:16.663861070942673, best_calibration:14.284684107853815, valid_ci:0.7194884626077287,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1490 epochs:298, Train Loss: 1070.0364990234375, Reg:1.4150657653808594, Calibration:10.853912353515625, Accuracy:1058.8778076171875,  CI:0.6650408928267166, Clustering:0.3048684298992157Valid Loss:2557.7642978766025, Reg:3.023715864898812, Calibration:16.663861070942673, Accuracy:2540.3572799813032, CI:0.7194884626077287, Clustering:0.7433117582247807,  

DEBUG:root:pred_surv:0.45134323835372925,  emp_surv:0.46731629967689514,  km_loss:9.182843208312988, len_unique_t:415, curr_pop_nk, min:0.08185029029846191, max:0.1547827273607254, sum:0.9999997615814209, curr_post:[0.20138302 0.21287183]  curr_lik:[0.18225873 0.18625472], train_k:6, 

DEBUG:root:valid_calibration:15.553348084800263, best_calibration:14.284684107853815, valid_ci:0.7214808636826986,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1495 epochs:299, Train Loss: 1054.2528076171875, Reg:1.415265440940857, Calibration:10.548273086547852, Accuracy:1043.3997802734375,  CI:0.6894502923976609, Clustering:0.30482274293899536Valid Loss:2528.690696781517, Reg:3.0241598430861774, Calibration:15.553348084800263, Accuracy:2512.398744240785, CI:0.7214808636826986, Clustering:0.7384899589750501,  

DEBUG:root:pred_surv:0.4402180314064026,  emp_surv:0.24623873829841614,  km_loss:9.942078590393066, len_unique_t:418, curr_pop_nk, min:0.08166726678609848, max:0.15484674274921417, sum:0.9999998211860657, curr_post:[0.19091564 0.22624233]  curr_lik:[0.16729239 0.20829937], train_k:6, 

DEBUG:root:valid_calibration:15.197786510500134, best_calibration:14.284684107853815, valid_ci:0.7115188583078491,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1500 epochs:300, Train Loss: 1163.30029296875, Reg:1.4154601097106934, Calibration:10.895840644836426, Accuracy:1152.098388671875,  CI:0.6707522033203526, Clustering:0.3059861958026886Valid Loss:2525.4623543502935, Reg:3.0245554243397508, Calibration:15.197786510500134, Accuracy:2509.521745209001, CI:0.7115188583078491, Clustering:0.7422848517059261,  

DEBUG:root:ITER:1500, Train CI:0.657861470729262, Clustering:0.3079778850078583,Reg:1.415492057800293, Accuracy:1130.6427001953125, Calibration:11.07611083984375, Cost:1142.0267333984375
DEBUG:root:pred_surv:0.4416753947734833,  emp_surv:0.30982381105422974,  km_loss:7.540584564208984, len_unique_t:411, curr_pop_nk, min:0.08177468180656433, max:0.15478764474391937, sum:0.9999998211860657, curr_post:[0.17564024 0.2189113 ]  curr_lik:[0.15086374 0.19973251], train_k:6, 

DEBUG:root:valid_calibration:15.872676148373856, best_calibration:14.284684107853815, valid_ci:0.7101751459549625,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1505 epochs:301, Train Loss: 1057.6126708984375, Reg:1.4156283140182495, Calibration:8.945914268493652, Accuracy:1048.35693359375,  CI:0.6956952548717384, Clustering:0.30985361337661743Valid Loss:2537.408551599225, Reg:3.0249196749467115, Calibration:15.872676148373856, Accuracy:2520.797599075187, CI:0.7101751459549625, Clustering:0.7382542149633423,  

DEBUG:root:pred_surv:0.4340282678604126,  emp_surv:0.41378092765808105,  km_loss:12.138069152832031, len_unique_t:418, curr_pop_nk, min:0.08200414478778839, max:0.1545857936143875, sum:0.9999998807907104, curr_post:[0.19116601 0.20912325]  curr_lik:[0.16719809 0.1927304 ], train_k:6, 

DEBUG:root:valid_calibration:16.10175870422624, best_calibration:14.284684107853815, valid_ci:0.7080900750625522,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1510 epochs:302, Train Loss: 1099.6278076171875, Reg:1.4158085584640503, Calibration:13.466821670532227, Accuracy:1085.8602294921875,  CI:0.6918002521613833, Clustering:0.3007373809814453Valid Loss:2546.497573200454, Reg:3.0252951332646556, Calibration:16.10175870422624, Accuracy:2529.6555217514688, CI:0.7080900750625522, Clustering:0.7402155643854386,  

DEBUG:root:pred_surv:0.4289490580558777,  emp_surv:0.4412955343723297,  km_loss:12.477804183959961, len_unique_t:419, curr_pop_nk, min:0.08175701647996902, max:0.15448550879955292, sum:0.9999998211860657, curr_post:[0.18525584 0.19503245]  curr_lik:[0.16014628 0.17889315], train_k:6, 

DEBUG:root:valid_calibration:17.976811808398644, best_calibration:14.284684107853815, valid_ci:0.7177740709850802,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1515 epochs:303, Train Loss: 1104.792236328125, Reg:1.4159718751907349, Calibration:12.175575256347656, Accuracy:1092.3118896484375,  CI:0.6378494623655914, Clustering:0.30480751395225525Valid Loss:2582.4835361578525, Reg:3.0256486856020413, Calibration:17.976811808398644, Accuracy:2563.7660882411856, CI:0.7177740709850802, Clustering:0.740307072798411,  

DEBUG:root:pred_surv:0.36178386211395264,  emp_surv:0.3858378231525421,  km_loss:15.37497329711914, len_unique_t:414, curr_pop_nk, min:0.08193322271108627, max:0.15442870557308197, sum:0.9999997615814209, curr_post:[0.19097807 0.21786809]  curr_lik:[0.18129982 0.23436768], train_k:6, 

DEBUG:root:valid_calibration:18.153975152561806, best_calibration:14.284684107853815, valid_ci:0.7126772310258549,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1520 epochs:304, Train Loss: 1136.7191162109375, Reg:1.4160845279693604, Calibration:11.761536598205566, Accuracy:1124.6533203125,  CI:0.6440234299568734, Clustering:0.304195374250412Valid Loss:2545.907566690037, Reg:3.0258715662181883, Calibration:18.153975152561806, Accuracy:2527.015359992655, CI:0.7126772310258549, Clustering:0.7381671004825168,  

DEBUG:root:pred_surv:0.36611631512641907,  emp_surv:0.37504076957702637,  km_loss:9.743184089660645, len_unique_t:419, curr_pop_nk, min:0.08202624320983887, max:0.15434032678604126, sum:0.9999997615814209, curr_post:[0.15665367 0.17721817]  curr_lik:[0.14012846 0.21257241], train_k:6, 

DEBUG:root:valid_calibration:18.643332342816212, best_calibration:14.284684107853815, valid_ci:0.7172180520804374,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1525 epochs:305, Train Loss: 1208.3175048828125, Reg:1.4161605834960938, Calibration:11.638542175292969, Accuracy:1196.3690185546875,  CI:0.6623782964416892, Clustering:0.30990299582481384Valid Loss:2571.339403462206, Reg:3.026017775902381, Calibration:18.643332342816212, Accuracy:2551.9599588508277, CI:0.7172180520804374, Clustering:0.7364398393875513,  

DEBUG:root:pred_surv:0.49313294887542725,  emp_surv:0.38772448897361755,  km_loss:12.464640617370605, len_unique_t:414, curr_pop_nk, min:0.082021564245224, max:0.1543498933315277, sum:0.9999998211860657, curr_post:[0.20450722 0.20459732]  curr_lik:[0.17860174 0.18855144], train_k:6, 

DEBUG:root:valid_calibration:18.5342466729319, best_calibration:14.284684107853815, valid_ci:0.7112408488555277,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1530 epochs:306, Train Loss: 1025.599365234375, Reg:1.4162631034851074, Calibration:13.529495239257812, Accuracy:1011.7662353515625,  CI:0.6962245286612074, Clustering:0.30364057421684265Valid Loss:2579.1886810563565, Reg:3.0262482981396537, Calibration:18.5342466729319, Accuracy:2559.9208733974356, CI:0.7112408488555277, Clustering:0.7334633642791683,  

DEBUG:root:pred_surv:0.3661183714866638,  emp_surv:0.39953771233558655,  km_loss:10.663902282714844, len_unique_t:411, curr_pop_nk, min:0.08210968971252441, max:0.15440678596496582, sum:0.9999997615814209, curr_post:[0.17221926 0.17685919]  curr_lik:[0.1416255  0.17697974], train_k:6, 

DEBUG:root:valid_calibration:19.390544320783043, best_calibration:14.284684107853815, valid_ci:0.7128625706607358,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1535 epochs:307, Train Loss: 1192.716552734375, Reg:1.4163734912872314, Calibration:11.525035858154297, Accuracy:1180.8828125,  CI:0.6600371025497217, Clustering:0.3087520897388458Valid Loss:2578.8986336471685, Reg:3.0264951225019927, Calibration:19.390544320783043, Accuracy:2558.7747687967412, CI:0.7128625706607358, Clustering:0.7336014865810035,  

DEBUG:root:pred_surv:0.33681491017341614,  emp_surv:0.24908432364463806,  km_loss:17.26773452758789, len_unique_t:415, curr_pop_nk, min:0.08197254687547684, max:0.15438108146190643, sum:0.9999997615814209, curr_post:[0.22573563 0.25178105]  curr_lik:[0.21070783 0.21879134], train_k:6, 

DEBUG:root:valid_calibration:19.260958728627262, best_calibration:14.284684107853815, valid_ci:0.7132795848392178,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1540 epochs:308, Train Loss: 1124.1588134765625, Reg:1.4165252447128296, Calibration:20.13393211364746, Accuracy:1103.721435546875,  CI:0.6456780487804878, Clustering:0.3034519553184509Valid Loss:2570.6818409455127, Reg:3.026821165003328, Calibration:19.260958728627262, Accuracy:2550.686567257612, CI:0.7132795848392178, Clustering:0.7344293925497266,  

DEBUG:root:pred_surv:0.37582412362098694,  emp_surv:0.38167616724967957,  km_loss:11.397144317626953, len_unique_t:409, curr_pop_nk, min:0.08199568092823029, max:0.1542065590620041, sum:0.9999997615814209, curr_post:[0.15194355 0.21193263]  curr_lik:[0.17416464 0.17953554], train_k:6, 

DEBUG:root:valid_calibration:17.905483897934612, best_calibration:14.284684107853815, valid_ci:0.7160596793624316,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1545 epochs:309, Train Loss: 1091.2763671875, Reg:1.4167125225067139, Calibration:10.492493629455566, Accuracy:1080.4835205078125,  CI:0.6842395171100044, Clustering:0.30029696226119995Valid Loss:2551.160763471554, Reg:3.0272605582180185, Calibration:17.905483897934612, Accuracy:2532.521044087206, CI:0.7160596793624316, Clustering:0.7341648014182718,  

DEBUG:root:pred_surv:0.3841974139213562,  emp_surv:0.32161247730255127,  km_loss:14.249370574951172, len_unique_t:412, curr_pop_nk, min:0.08202100545167923, max:0.1540246605873108, sum:0.9999997615814209, curr_post:[0.19436088 0.2059457 ]  curr_lik:[0.179565   0.19106089], train_k:6, 

DEBUG:root:valid_calibration:16.105572382609047, best_calibration:14.284684107853815, valid_ci:0.7113798535816884,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1550 epochs:310, Train Loss: 1100.998779296875, Reg:1.4169354438781738, Calibration:13.3908052444458, Accuracy:1087.3094482421875,  CI:0.6404079405716204, Clustering:0.298616886138916Valid Loss:2517.4464038294605, Reg:3.0277417256281924, Calibration:16.105572382609047, Accuracy:2500.6126990685093, CI:0.7113798535816884, Clustering:0.72806392215256,  

DEBUG:root:pred_surv:0.3800187408924103,  emp_surv:0.27016088366508484,  km_loss:15.83078670501709, len_unique_t:411, curr_pop_nk, min:0.08208996802568436, max:0.15391755104064941, sum:0.9999997615814209, curr_post:[0.1939308  0.21998866]  curr_lik:[0.16954076 0.20393263], train_k:6, 

DEBUG:root:valid_calibration:15.809911947983961, best_calibration:14.284684107853815, valid_ci:0.7084607543323139,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1555 epochs:311, Train Loss: 1064.5797119140625, Reg:1.4171686172485352, Calibration:13.07825756072998, Accuracy:1051.20361328125,  CI:0.6782094594594594, Clustering:0.297892302274704Valid Loss:2504.9845377604165, Reg:3.028250912315825, Calibration:15.809911947983961, Accuracy:2488.4398370726494, CI:0.7084607543323139, Clustering:0.7348538846032232,  

DEBUG:root:pred_surv:0.4175247848033905,  emp_surv:0.35310447216033936,  km_loss:21.398696899414062, len_unique_t:416, curr_pop_nk, min:0.08227360248565674, max:0.15385973453521729, sum:0.9999998807907104, curr_post:[0.1838754  0.24824089]  curr_lik:[0.1652996  0.20801866], train_k:6, 

DEBUG:root:valid_calibration:14.237853196951058, best_calibration:14.284684107853815, valid_ci:0.7154109906403484,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1560 epochs:312, Train Loss: 1051.6192626953125, Reg:1.4174134731292725, Calibration:20.265586853027344, Accuracy:1031.0501708984375,  CI:0.664265866399911, Clustering:0.30341383814811707Valid Loss:2499.440511067708, Reg:3.02874252327487, Calibration:14.237853196951058, Accuracy:2484.4762035924145, CI:0.7154109906403484, Clustering:0.726328382634709,  

DEBUG:root:pred_surv:0.40106675028800964,  emp_surv:0.3712327182292938,  km_loss:10.507234573364258, len_unique_t:415, curr_pop_nk, min:0.08228575438261032, max:0.15399080514907837, sum:0.9999997615814209, curr_post:[0.15710591 0.17641118]  curr_lik:[0.14042674 0.19813351], train_k:6, 

DEBUG:root:valid_calibration:14.381161102881798, best_calibration:14.284684107853815, valid_ci:0.7131869150217774,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1565 epochs:313, Train Loss: 1070.9351806640625, Reg:1.4175456762313843, Calibration:11.934650421142578, Accuracy:1058.69775390625,  CI:0.7000569615102937, Clustering:0.3026861846446991Valid Loss:2483.043442424546, Reg:3.029004376158755, Calibration:14.381161102881798, Accuracy:2467.9390670906782, CI:0.7131869150217774, Clustering:0.7229104765460022,  

DEBUG:root:pred_surv:0.42557820677757263,  emp_surv:0.336416631937027,  km_loss:13.559065818786621, len_unique_t:418, curr_pop_nk, min:0.08210786432027817, max:0.1538865566253662, sum:0.9999997615814209, curr_post:[0.21207345 0.21796224]  curr_lik:[0.18628459 0.20570551], train_k:6, 

DEBUG:root:valid_calibration:13.690195531926603, best_calibration:14.284684107853815, valid_ci:0.7095264572328792,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1570 epochs:314, Train Loss: 1044.784423828125, Reg:1.4176952838897705, Calibration:12.401562690734863, Accuracy:1032.081298828125,  CI:0.6775137194430586, Clustering:0.3015623092651367Valid Loss:2487.313816690037, Reg:3.0293352583534694, Calibration:13.690195531926603, Accuracy:2472.9016947950054, CI:0.7095264572328792, Clustering:0.7216665479871961,  

DEBUG:root:pred_surv:0.41898149251937866,  emp_surv:0.36345112323760986,  km_loss:10.186372756958008, len_unique_t:417, curr_pop_nk, min:0.08185214549303055, max:0.1538648158311844, sum:0.9999997615814209, curr_post:[0.17354012 0.2522771 ]  curr_lik:[0.1436601  0.25408724], train_k:6, 

DEBUG:root:valid_calibration:14.217670147235577, best_calibration:14.284684107853815, valid_ci:0.7064220183486238,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1575 epochs:315, Train Loss: 1187.4044189453125, Reg:1.4178614616394043, Calibration:5.919345855712891, Accuracy:1181.177001953125,  CI:0.6843135960569454, Clustering:0.3080689311027527Valid Loss:2507.305438701923, Reg:3.029688046528743, Calibration:14.217670147235577, Accuracy:2492.367214626736, CI:0.7064220183486238, Clustering:0.7207305767597296,  

DEBUG:root:pred_surv:0.3530968427658081,  emp_surv:0.32460102438926697,  km_loss:13.145769119262695, len_unique_t:420, curr_pop_nk, min:0.08187225461006165, max:0.15367795526981354, sum:0.9999997615814209, curr_post:[0.21393992 0.21576656]  curr_lik:[0.1763597  0.21568793], train_k:6, 

DEBUG:root:valid_calibration:14.037665138896713, best_calibration:14.284684107853815, valid_ci:0.7084607543323139,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1580 epochs:316, Train Loss: 1189.8653564453125, Reg:1.4180116653442383, Calibration:14.136724472045898, Accuracy:1175.4228515625,  CI:0.6596161378770075, Clustering:0.30583837628364563Valid Loss:2513.1564670138887, Reg:3.030023513696132, Calibration:14.037665138896713, Accuracy:2498.39847923344, CI:0.7084607543323139, Clustering:0.7205005639638655,  

DEBUG:root:pred_surv:0.3846985101699829,  emp_surv:0.3832975924015045,  km_loss:13.394695281982422, len_unique_t:424, curr_pop_nk, min:0.08206351846456528, max:0.1536572426557541, sum:0.9999998211860657, curr_post:[0.18288392 0.19005637]  curr_lik:[0.16319515 0.19038029], train_k:6, 

DEBUG:root:valid_calibration:13.489338067861702, best_calibration:14.284684107853815, valid_ci:0.7108701695857659,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1585 epochs:317, Train Loss: 1213.365966796875, Reg:1.4181714057922363, Calibration:11.601070404052734, Accuracy:1201.465576171875,  CI:0.634904400100192, Clustering:0.29927921295166016Valid Loss:2497.531988681891, Reg:3.030318989712968, Calibration:13.489338067861702, Accuracy:2483.326708149706, CI:0.7108701695857659, Clustering:0.7159770426587161,  

DEBUG:root:pred_surv:0.43587517738342285,  emp_surv:0.10154461115598679,  km_loss:13.275054931640625, len_unique_t:403, curr_pop_nk, min:0.08216707408428192, max:0.1536695957183838, sum:0.9999997615814209, curr_post:[0.20592691 0.20669097]  curr_lik:[0.17184713 0.17253497], train_k:5, 

DEBUG:root:valid_calibration:13.713651233249239, best_calibration:14.284684107853815, valid_ci:0.7108238346770457,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1590 epochs:318, Train Loss: 959.40087890625, Reg:1.4182171821594238, Calibration:14.83237361907959, Accuracy:944.2718505859375,  CI:0.700157444894287, Clustering:0.29661640524864197Valid Loss:2497.2935864049145, Reg:3.0304066136352015, Calibration:13.713651233249239, Accuracy:2482.864510299813, CI:0.7108238346770457, Clustering:0.7158380288344163,  

DEBUG:root:pred_surv:0.3755435645580292,  emp_surv:0.4138071835041046,  km_loss:10.132372856140137, len_unique_t:418, curr_pop_nk, min:0.08216365426778793, max:0.15379145741462708, sum:0.9999997615814209, curr_post:[0.18320704 0.21967958]  curr_lik:[0.15530819 0.226276  ], train_k:6, 

DEBUG:root:valid_calibration:15.390297286530844, best_calibration:14.284684107853815, valid_ci:0.7111018441293671,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1595 epochs:319, Train Loss: 1055.7674560546875, Reg:1.418299913406372, Calibration:6.883813858032227, Accuracy:1048.579345703125,  CI:0.6763670188027373, Clustering:0.3043118715286255Valid Loss:2526.1373927450586, Reg:3.0306246545579696, Calibration:15.390297286530844, Accuracy:2510.0329798510948, CI:0.7111018441293671, Clustering:0.7140945929747361,  

DEBUG:root:pred_surv:0.335910439491272,  emp_surv:0.2728644907474518,  km_loss:10.824507713317871, len_unique_t:418, curr_pop_nk, min:0.0820758044719696, max:0.15378780663013458, sum:0.9999998211860657, curr_post:[0.16582139 0.2771622 ]  curr_lik:[0.14457136 0.241173  ], train_k:6, 

DEBUG:root:valid_calibration:14.369641613756489, best_calibration:14.284684107853815, valid_ci:0.7077193957927903,best_ci:0.7166156982670744, best_epoch:262 
 
DEBUG:root:Iteration: 1600 epochs:320, Train Loss: 1065.75341796875, Reg:1.41847825050354, Calibration:11.588887214660645, Accuracy:1053.8726806640625,  CI:0.6822878155039069, Clustering:0.2918301820755005Valid Loss:2513.9327090010684, Reg:3.031021509415064, Calibration:14.369641613756489, Accuracy:2498.847896217281, CI:0.7077193957927903, Clustering:0.7150012076410472,  

DEBUG:root:ITER:1600, Train CI:0.642406937394247, Clustering:0.2983223795890808,Reg:1.41851806640625, Accuracy:1078.9903564453125, Calibration:14.601512908935547, Cost:1093.8902587890625
DEBUG:root: Final curr_post:[0.17213802 0.21868056], curr_lik:[0.14959107 0.20180929], K:6
DEBUG:root:pred_surv:0.38563716411590576,  emp_surv:0.34294381737709045,  km_loss:16.755977630615234, len_unique_t:431, curr_pop_nk, min:0.08226565271615982, max:0.1540740579366684, sum:0.9999997615814209, curr_post:[0.17213802 0.21868056]  curr_lik:[0.14959107 0.20180929], train_k:6, 

DEBUG:root:valid_calibration:14.158502603188538, best_calibration:14.158502603188538, valid_ci:0.7193031229728477,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1605 epochs:321, Train Loss: 1070.052978515625, Reg:1.4186514616012573, Calibration:14.320886611938477, Accuracy:1055.4400634765625,  CI:0.6675317664645793, Clustering:0.29195210337638855Valid Loss:2507.254836905716, Reg:3.031372769266112, Calibration:14.158502603188538, Accuracy:2492.3875596788193, CI:0.7193031229728477, Clustering:0.7090080115530225, * 

DEBUG:root:pred_surv:0.3816828727722168,  emp_surv:0.23869435489177704,  km_loss:11.485315322875977, len_unique_t:402, curr_pop_nk, min:0.08216599375009537, max:0.15378338098526, sum:0.9999996423721313, curr_post:[0.2222183  0.22869535]  curr_lik:[0.19575652 0.21531926], train_k:6, 

DEBUG:root:valid_calibration:15.615873866611055, best_calibration:14.158502603188538, valid_ci:0.710082476137522,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1610 epochs:322, Train Loss: 1043.3946533203125, Reg:1.4187817573547363, Calibration:13.169670104980469, Accuracy:1029.9227294921875,  CI:0.6721825081634454, Clustering:0.3022975027561188Valid Loss:2517.2893817608174, Reg:3.031634367429293, Calibration:15.615873866611055, Accuracy:2500.965607471955, CI:0.710082476137522, Clustering:0.7080081691089858,  

DEBUG:root:pred_surv:0.43191322684288025,  emp_surv:0.22309094667434692,  km_loss:14.76725959777832, len_unique_t:421, curr_pop_nk, min:0.0822504386305809, max:0.15379144251346588, sum:0.9999997615814209, curr_post:[0.21300116 0.2539817 ]  curr_lik:[0.18587252 0.22101785], train_k:6, 

DEBUG:root:valid_calibration:17.289155568832005, best_calibration:14.158502603188538, valid_ci:0.7161523491798721,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1615 epochs:323, Train Loss: 1206.2703857421875, Reg:1.418880581855774, Calibration:7.9960737228393555, Accuracy:1197.979248046875,  CI:0.6511278195488722, Clustering:0.2949988543987274Valid Loss:2524.6201213608438, Reg:3.0318455308930483, Calibration:17.289155568832005, Accuracy:2506.626487797142, CI:0.7161523491798721, Clustering:0.7048435190803984,  

DEBUG:root:pred_surv:0.39779990911483765,  emp_surv:0.28586122393608093,  km_loss:15.69011116027832, len_unique_t:410, curr_pop_nk, min:0.08224688470363617, max:0.15383735299110413, sum:0.9999997615814209, curr_post:[0.1634817  0.20318206]  curr_lik:[0.13643871 0.20534253], train_k:6, 

DEBUG:root:valid_calibration:16.686185812338802, best_calibration:14.158502603188538, valid_ci:0.7108701695857659,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1620 epochs:324, Train Loss: 1052.31005859375, Reg:1.4189910888671875, Calibration:11.665629386901855, Accuracy:1040.346923828125,  CI:0.653466711301026, Clustering:0.29745718836784363Valid Loss:2545.1302813668535, Reg:3.0320699398334208, Calibration:16.686185812338802, Accuracy:2527.7433476896367, CI:0.7108701695857659, Clustering:0.700665080649221,  

DEBUG:root:pred_surv:0.41959264874458313,  emp_surv:0.3658358156681061,  km_loss:15.818177223205566, len_unique_t:416, curr_pop_nk, min:0.08258944004774094, max:0.15394744277000427, sum:0.9999997615814209, curr_post:[0.18773158 0.21139987]  curr_lik:[0.16332519 0.19644524], train_k:6, 

DEBUG:root:valid_calibration:16.768527846051075, best_calibration:14.158502603188538, valid_ci:0.7120285423037717,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1625 epochs:325, Train Loss: 1059.2098388671875, Reg:1.419118046760559, Calibration:15.17204475402832, Accuracy:1043.734619140625,  CI:0.6815009095139388, Clustering:0.30319052934646606Valid Loss:2546.467577290331, Reg:3.0323702555436354, Calibration:16.768527846051075, Accuracy:2528.9995242387818, CI:0.7120285423037717, Clustering:0.6995985013806921,  

DEBUG:root:pred_surv:0.3804931342601776,  emp_surv:0.11164511740207672,  km_loss:11.821399688720703, len_unique_t:417, curr_pop_nk, min:0.08235497772693634, max:0.15383517742156982, sum:0.9999997615814209, curr_post:[0.19478743 0.22718163]  curr_lik:[0.19296922 0.20651145], train_k:6, 

DEBUG:root:valid_calibration:15.318063589242788, best_calibration:14.158502603188538, valid_ci:0.7099434714113613,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1630 epochs:326, Train Loss: 997.933837890625, Reg:1.4193055629730225, Calibration:13.845721244812012, Accuracy:983.796875,  CI:0.6742163072236029, Clustering:0.29126694798469543Valid Loss:2524.90964710203, Reg:3.0327882522191754, Calibration:15.318063589242788, Accuracy:2508.889483590411, CI:0.7099434714113613, Clustering:0.7019094549692594,  

DEBUG:root:pred_surv:0.45872098207473755,  emp_surv:0.31300339102745056,  km_loss:15.214225769042969, len_unique_t:420, curr_pop_nk, min:0.08254247903823853, max:0.15395113825798035, sum:0.9999997019767761, curr_post:[0.17424126 0.22687712]  curr_lik:[0.14271314 0.2262231 ], train_k:6, 

DEBUG:root:valid_calibration:14.712741232325888, best_calibration:14.158502603188538, valid_ci:0.7164303586321935,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1635 epochs:327, Train Loss: 1180.7615966796875, Reg:1.4195170402526855, Calibration:10.644449234008789, Accuracy:1169.816162109375,  CI:0.6522881120673087, Clustering:0.3010455369949341Valid Loss:2491.5500217013887, Reg:3.033256428873437, Calibration:14.712741232325888, Accuracy:2476.1449047642895, CI:0.7164303586321935, Clustering:0.6924190072931795,  

DEBUG:root:pred_surv:0.4536193311214447,  emp_surv:0.3295418918132782,  km_loss:12.187177658081055, len_unique_t:409, curr_pop_nk, min:0.0824412852525711, max:0.1540398895740509, sum:0.9999997615814209, curr_post:[0.1433181  0.20110689]  curr_lik:[0.16097651 0.20362741], train_k:6, 

DEBUG:root:valid_calibration:13.838583587581276, best_calibration:14.158502603188538, valid_ci:0.706468353257344,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1640 epochs:328, Train Loss: 1162.12841796875, Reg:1.4197036027908325, Calibration:15.571358680725098, Accuracy:1146.2584228515625,  CI:0.6547382525527884, Clustering:0.2985472083091736Valid Loss:2497.8369036291397, Reg:3.0335916413201223, Calibration:13.838583587581276, Accuracy:2483.3053197616186, CI:0.706468353257344, Clustering:0.692801088349432,  

DEBUG:root:pred_surv:0.41127222776412964,  emp_surv:0.4435189962387085,  km_loss:12.04695987701416, len_unique_t:420, curr_pop_nk, min:0.08227930217981339, max:0.1539190709590912, sum:0.9999997019767761, curr_post:[0.19464965 0.19965146]  curr_lik:[0.1637948 0.1688836], train_k:6, 

DEBUG:root:valid_calibration:15.774165463243794, best_calibration:14.158502603188538, valid_ci:0.7123528866648132,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1645 epochs:329, Train Loss: 1182.3900146484375, Reg:1.4197611808776855, Calibration:12.387519836425781, Accuracy:1169.7119140625,  CI:0.631301999563154, Clustering:0.29055970907211304Valid Loss:2497.822557759081, Reg:3.03369658625024, Calibration:15.774165463243794, Accuracy:2481.3558464376333, CI:0.7123528866648132, Clustering:0.6926800960149521,  

DEBUG:root:pred_surv:0.3425162434577942,  emp_surv:0.30084535479545593,  km_loss:9.461285591125488, len_unique_t:415, curr_pop_nk, min:0.08228066563606262, max:0.15395954251289368, sum:0.9999997615814209, curr_post:[0.19402543 0.20372912]  curr_lik:[0.17766084 0.19012621], train_k:6, 

DEBUG:root:valid_calibration:16.58825487153143, best_calibration:14.158502603188538, valid_ci:0.7212955240478176,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1650 epochs:330, Train Loss: 1089.88671875, Reg:1.4198336601257324, Calibration:10.458316802978516, Accuracy:1079.1298828125,  CI:0.6797202797202797, Clustering:0.2984476387500763Valid Loss:2506.7475147736377, Reg:3.0338883909404784, Calibration:16.58825487153143, Accuracy:2489.4685663728633, CI:0.7212955240478176, Clustering:0.6907345392765143,  

DEBUG:root:pred_surv:0.3788750469684601,  emp_surv:0.3030933141708374,  km_loss:12.838370323181152, len_unique_t:418, curr_pop_nk, min:0.08224829286336899, max:0.15416407585144043, sum:0.9999997615814209, curr_post:[0.18421009 0.26033336]  curr_lik:[0.15694737 0.2202074 ], train_k:6, 

DEBUG:root:valid_calibration:16.22606750227447, best_calibration:14.158502603188538, valid_ci:0.7148086368269855,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1655 epochs:331, Train Loss: 1153.224853515625, Reg:1.4200276136398315, Calibration:13.625618934631348, Accuracy:1139.3009033203125,  CI:0.6803320420586607, Clustering:0.2983081638813019Valid Loss:2535.775469918536, Reg:3.0343272747137604, Calibration:16.22606750227447, Accuracy:2518.858037443242, CI:0.7148086368269855, Clustering:0.6915791931315365,  

DEBUG:root:pred_surv:0.39842402935028076,  emp_surv:0.3315070569515228,  km_loss:13.212968826293945, len_unique_t:415, curr_pop_nk, min:0.08235910534858704, max:0.1540955752134323, sum:0.9999996423721313, curr_post:[0.16633813 0.22067542]  curr_lik:[0.14361677 0.18825576], train_k:6, 

DEBUG:root:valid_calibration:17.273927346254005, best_calibration:14.158502603188538, valid_ci:0.719349457881568,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1660 epochs:332, Train Loss: 1050.7357177734375, Reg:1.4202075004577637, Calibration:11.973194122314453, Accuracy:1038.4644775390625,  CI:0.6879050136425648, Clustering:0.29803818464279175Valid Loss:2538.295648036859, Reg:3.034705789680155, Calibration:17.273927346254005, Accuracy:2520.3374878973023, CI:0.719349457881568, Clustering:0.6843868993286393,  

DEBUG:root:pred_surv:0.376490980386734,  emp_surv:0.376181423664093,  km_loss:15.809272766113281, len_unique_t:408, curr_pop_nk, min:0.08246614038944244, max:0.15407559275627136, sum:0.9999997615814209, curr_post:[0.17360115 0.21986768]  curr_lik:[0.1517765  0.20384668], train_k:6, 

DEBUG:root:valid_calibration:15.32340151631934, best_calibration:14.158502603188538, valid_ci:0.7138819386525809,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1665 epochs:333, Train Loss: 1059.730712890625, Reg:1.4203897714614868, Calibration:17.181598663330078, Accuracy:1042.2525634765625,  CI:0.6575379162545335, Clustering:0.2964794933795929Valid Loss:2509.750235793937, Reg:3.0350629081073985, Calibration:15.32340151631934, Accuracy:2493.7425923143696, CI:0.7138819386525809, Clustering:0.6842255974427247,  

DEBUG:root:pred_surv:0.33538728952407837,  emp_surv:0.3695980906486511,  km_loss:10.957383155822754, len_unique_t:422, curr_pop_nk, min:0.08247049152851105, max:0.15388090908527374, sum:0.9999998211860657, curr_post:[0.17439869 0.20059562]  curr_lik:[0.15069014 0.18344207], train_k:6, 

DEBUG:root:valid_calibration:16.150571342207428, best_calibration:14.158502603188538, valid_ci:0.7127235659345751,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1670 epochs:334, Train Loss: 1191.7081298828125, Reg:1.420539379119873, Calibration:10.277793884277344, Accuracy:1181.138916015625,  CI:0.6639923710015133, Clustering:0.29136794805526733Valid Loss:2529.2767907819175, Reg:3.035415951003376, Calibration:16.150571342207428, Accuracy:2512.440216846955, CI:0.7127235659345751, Clustering:0.6854462190570993,  

DEBUG:root:pred_surv:0.37074705958366394,  emp_surv:0.2907046377658844,  km_loss:16.320602416992188, len_unique_t:412, curr_pop_nk, min:0.08266246318817139, max:0.15390795469284058, sum:0.9999998807907104, curr_post:[0.16487744 0.25639307]  curr_lik:[0.152465   0.22214203], train_k:6, 

DEBUG:root:valid_calibration:15.19394328451564, best_calibration:14.158502603188538, valid_ci:0.7164303586321935,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1675 epochs:335, Train Loss: 1114.23583984375, Reg:1.4206912517547607, Calibration:18.24233055114746, Accuracy:1095.7012939453125,  CI:0.6484773696979838, Clustering:0.29224893450737Valid Loss:2512.5787197015225, Reg:3.0356946154537363, Calibration:15.19394328451564, Accuracy:2496.7012323884883, CI:0.7164303586321935, Clustering:0.6834699684738094,  

DEBUG:root:pred_surv:0.45980197191238403,  emp_surv:0.35653945803642273,  km_loss:12.195280075073242, len_unique_t:415, curr_pop_nk, min:0.08250913769006729, max:0.1542474925518036, sum:0.9999997615814209, curr_post:[0.20680799 0.21371725]  curr_lik:[0.19037245 0.19830847], train_k:6, 

DEBUG:root:valid_calibration:16.411755838964737, best_calibration:14.158502603188538, valid_ci:0.7131405801130571,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1680 epochs:336, Train Loss: 1091.582763671875, Reg:1.4207851886749268, Calibration:14.407424926757812, Accuracy:1076.882080078125,  CI:0.6789417006271248, Clustering:0.2932272255420685Valid Loss:2531.2142657418535, Reg:3.0359098544487586, Calibration:16.411755838964737, Accuracy:2514.114510299813, CI:0.7131405801130571, Clustering:0.6877857013645334,  

DEBUG:root:pred_surv:0.4352245032787323,  emp_surv:0.4138804078102112,  km_loss:9.426115036010742, len_unique_t:421, curr_pop_nk, min:0.08240186423063278, max:0.15429863333702087, sum:0.9999997615814209, curr_post:[0.2074716  0.23446405]  curr_lik:[0.17778955 0.19841962], train_k:6, 

DEBUG:root:valid_calibration:16.79115112011249, best_calibration:14.158502603188538, valid_ci:0.7138819386525809,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1685 epochs:337, Train Loss: 1056.171875, Reg:1.4209208488464355, Calibration:7.087496280670166, Accuracy:1048.79248046875,  CI:0.6847213301933919, Clustering:0.2918526828289032Valid Loss:2535.3672647068643, Reg:3.0362488877060065, Calibration:16.79115112011249, Accuracy:2517.895038311298, CI:0.7138819386525809, Clustering:0.6814000443515614,  

DEBUG:root:pred_surv:0.35825204849243164,  emp_surv:0.4032602608203888,  km_loss:13.334680557250977, len_unique_t:410, curr_pop_nk, min:0.08271840959787369, max:0.15425488352775574, sum:0.9999998211860657, curr_post:[0.18513353 0.19709691]  curr_lik:[0.1540585  0.19947694], train_k:6, 

DEBUG:root:valid_calibration:17.33364406813923, best_calibration:14.158502603188538, valid_ci:0.7155963302752294,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1690 epochs:338, Train Loss: 1080.9681396484375, Reg:1.42111074924469, Calibration:14.531900405883789, Accuracy:1066.1416015625,  CI:0.6667186221408253, Clustering:0.2947238087654114Valid Loss:2520.711263020833, Reg:3.036641921752538, Calibration:17.33364406813923, Accuracy:2502.693893563034, CI:0.7155963302752294, Clustering:0.6837210594079433,  

DEBUG:root:pred_surv:0.3515555262565613,  emp_surv:0.26295778155326843,  km_loss:14.604907989501953, len_unique_t:410, curr_pop_nk, min:0.08262025564908981, max:0.15411321818828583, sum:0.9999998211860657, curr_post:[0.2042031  0.21497007]  curr_lik:[0.17116438 0.21908207], train_k:6, 

DEBUG:root:valid_calibration:17.052959173153607, best_calibration:14.158502603188538, valid_ci:0.7119822073950515,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1695 epochs:339, Train Loss: 1145.0499267578125, Reg:1.4212716817855835, Calibration:10.5880765914917, Accuracy:1134.1734619140625,  CI:0.6647203570088001, Clustering:0.2883501648902893Valid Loss:2549.046964726896, Reg:3.036976115316407, Calibration:17.052959173153607, Accuracy:2531.3060793102295, CI:0.7119822073950515, Clustering:0.6878468343335339,  

DEBUG:root:pred_surv:0.37805649638175964,  emp_surv:0.3073566257953644,  km_loss:8.505144119262695, len_unique_t:414, curr_pop_nk, min:0.08253273367881775, max:0.15426725149154663, sum:0.9999997615814209, curr_post:[0.17328762 0.26915076]  curr_lik:[0.1432563  0.27047122], train_k:6, 

DEBUG:root:valid_calibration:17.475878071581196, best_calibration:14.158502603188538, valid_ci:0.7083680845148735,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1700 epochs:340, Train Loss: 1105.82763671875, Reg:1.4214494228363037, Calibration:9.77163314819336, Accuracy:1095.7659912109375,  CI:0.6759956612500512, Clustering:0.29009947180747986Valid Loss:2534.7916040665064, Reg:3.0373643096695595, Calibration:17.475878071581196, Accuracy:2516.6318192441236, CI:0.7083680845148735, Clustering:0.683950690122751,  

DEBUG:root:ITER:1700, Train CI:0.6791972442713794, Clustering:0.2875978648662567,Reg:1.421486496925354, Accuracy:1012.9837036132812, Calibration:11.829082489013672, Cost:1025.100341796875
DEBUG:root:pred_surv:0.3951045274734497,  emp_surv:0.2861591577529907,  km_loss:13.70744514465332, len_unique_t:408, curr_pop_nk, min:0.08254259079694748, max:0.15406827628612518, sum:0.9999997615814209, curr_post:[0.19473486 0.21171726]  curr_lik:[0.16356914 0.17951772], train_k:5, 

DEBUG:root:valid_calibration:18.180983698266182, best_calibration:14.158502603188538, valid_ci:0.7118432026688908,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1705 epochs:341, Train Loss: 1041.3179931640625, Reg:1.4216368198394775, Calibration:10.952815055847168, Accuracy:1030.073974609375,  CI:0.6771167612935077, Clustering:0.2912921905517578Valid Loss:2542.0508751502402, Reg:3.0377823063451, Calibration:18.180983698266182, Accuracy:2523.1923160389956, CI:0.7118432026688908, Clustering:0.6775259971618652,  

DEBUG:root:pred_surv:0.3934191167354584,  emp_surv:0.33901625871658325,  km_loss:10.04968547821045, len_unique_t:412, curr_pop_nk, min:0.08252911269664764, max:0.15399490296840668, sum:0.9999997615814209, curr_post:[0.1877113  0.20190793]  curr_lik:[0.16709931 0.18796644], train_k:6, 

DEBUG:root:valid_calibration:16.536485435616257, best_calibration:14.158502603188538, valid_ci:0.7130479102956168,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1710 epochs:342, Train Loss: 1116.5062255859375, Reg:1.421884536743164, Calibration:7.267831802368164, Accuracy:1108.9490966796875,  CI:0.6808238253526188, Clustering:0.2892734408378601Valid Loss:2541.9037647736377, Reg:3.0383049932300534, Calibration:16.536485435616257, Accuracy:2524.6921115451387, CI:0.7130479102956168, Clustering:0.675101565499591,  

DEBUG:root:pred_surv:0.37004774808883667,  emp_surv:0.24026526510715485,  km_loss:13.53937816619873, len_unique_t:416, curr_pop_nk, min:0.08264342695474625, max:0.15414881706237793, sum:0.9999997615814209, curr_post:[0.14866367 0.31629506]  curr_lik:[0.12782504 0.2693301 ], train_k:6, 

DEBUG:root:valid_calibration:15.803215850112784, best_calibration:14.158502603188538, valid_ci:0.71772773607636,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1715 epochs:343, Train Loss: 1061.9674072265625, Reg:1.4221042394638062, Calibration:15.870275497436523, Accuracy:1045.80712890625,  CI:0.6718641485762932, Clustering:0.2900572419166565Valid Loss:2518.437833867521, Reg:3.0387803020640316, Calibration:15.803215850112784, Accuracy:2501.961210854033, CI:0.71772773607636, Clustering:0.6734571523136562,  

DEBUG:root:pred_surv:0.3133046627044678,  emp_surv:0.35430026054382324,  km_loss:18.69876480102539, len_unique_t:418, curr_pop_nk, min:0.08265600353479385, max:0.1544276475906372, sum:0.9999997615814209, curr_post:[0.17404932 0.23482375]  curr_lik:[0.16195069 0.20336866], train_k:6, 

DEBUG:root:valid_calibration:14.34654455918532, best_calibration:14.158502603188538, valid_ci:0.7144842924659438,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1720 epochs:344, Train Loss: 1031.0198974609375, Reg:1.422309398651123, Calibration:11.441485404968262, Accuracy:1019.2962036132812,  CI:0.7041300076877082, Clustering:0.28222519159317017Valid Loss:2499.077690972222, Reg:3.0391855627043634, Calibration:14.34654455918532, Accuracy:2484.0604341947114, CI:0.7144842924659438, Clustering:0.6709087990288041,  

DEBUG:root:pred_surv:0.43302956223487854,  emp_surv:0.35328927636146545,  km_loss:10.167057991027832, len_unique_t:411, curr_pop_nk, min:0.08255612850189209, max:0.15431439876556396, sum:0.9999997615814209, curr_post:[0.16814305 0.17418979]  curr_lik:[0.14640982 0.17008425], train_k:6, 

DEBUG:root:valid_calibration:16.103578428936817, best_calibration:14.158502603188538, valid_ci:0.7174497266240385,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1725 epochs:345, Train Loss: 1078.4373779296875, Reg:1.4224581718444824, Calibration:13.430026054382324, Accuracy:1064.7149658203125,  CI:0.6751298203796714, Clustering:0.2923203408718109Valid Loss:2508.2806970319175, Reg:3.039507529674432, Calibration:16.103578428936817, Accuracy:2491.5030715811963, CI:0.7174497266240385, Clustering:0.6737312954715174,  

DEBUG:root:pred_surv:0.46552690863609314,  emp_surv:0.3478519916534424,  km_loss:10.80649471282959, len_unique_t:406, curr_pop_nk, min:0.08245868980884552, max:0.15420645475387573, sum:0.9999997615814209, curr_post:[0.17729144 0.19488238]  curr_lik:[0.15406884 0.179269  ], train_k:6, 

DEBUG:root:valid_calibration:15.205853005759735, best_calibration:14.158502603188538, valid_ci:0.7145306273746641,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1730 epochs:346, Train Loss: 1047.263916015625, Reg:1.4226326942443848, Calibration:9.610697746276855, Accuracy:1037.3662109375,  CI:0.7165358194308146, Clustering:0.28701847791671753Valid Loss:2517.7254962106035, Reg:3.0399135544768763, Calibration:15.205853005759735, Accuracy:2501.8493130675747, CI:0.7145306273746641, Clustering:0.6702889361952105,  

DEBUG:root:pred_surv:0.42820578813552856,  emp_surv:0.45105332136154175,  km_loss:15.486371994018555, len_unique_t:411, curr_pop_nk, min:0.08229829370975494, max:0.15457671880722046, sum:0.9999997615814209, curr_post:[0.16184469 0.19068862]  curr_lik:[0.15427496 0.19556014], train_k:6, 

DEBUG:root:valid_calibration:14.313340187072754, best_calibration:14.158502603188538, valid_ci:0.7163840237234733,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1735 epochs:347, Train Loss: 1098.7349853515625, Reg:1.4228241443634033, Calibration:18.45832633972168, Accuracy:1079.986328125,  CI:0.6553710895821775, Clustering:0.2902786135673523Valid Loss:2495.434361645299, Reg:3.0403040413163662, Calibration:14.313340187072754, Accuracy:2480.4512741219282, CI:0.7163840237234733, Clustering:0.6695627274676266,  

DEBUG:root:pred_surv:0.39509066939353943,  emp_surv:0.356102854013443,  km_loss:18.36163330078125, len_unique_t:423, curr_pop_nk, min:0.08244528621435165, max:0.15481647849082947, sum:0.9999997615814209, curr_post:[0.18383321 0.19232701]  curr_lik:[0.15175189 0.22897322], train_k:6, 

DEBUG:root:valid_calibration:13.698320103506756, best_calibration:14.158502603188538, valid_ci:0.7109628394032064,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1740 epochs:348, Train Loss: 1139.2315673828125, Reg:1.4229426383972168, Calibration:19.930328369140625, Accuracy:1119.011474609375,  CI:0.6536329588014981, Clustering:0.28982484340667725Valid Loss:2495.9586379874463, Reg:3.0404813269264674, Calibration:13.698320103506756, Accuracy:2481.598943726629, CI:0.7109628394032064, Clustering:0.66110338920202,  

DEBUG:root:pred_surv:0.3698802888393402,  emp_surv:0.34521880745887756,  km_loss:13.701593399047852, len_unique_t:423, curr_pop_nk, min:0.08257565647363663, max:0.15439265966415405, sum:0.9999997615814209, curr_post:[0.17609055 0.18504755]  curr_lik:[0.15628305 0.19023299], train_k:6, 

DEBUG:root:valid_calibration:13.668617631635094, best_calibration:14.158502603188538, valid_ci:0.7177740709850802,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1745 epochs:349, Train Loss: 1027.2745361328125, Reg:1.4229986667633057, Calibration:11.929184913635254, Accuracy:1015.0535278320312,  CI:0.6927427836858712, Clustering:0.2918546199798584Valid Loss:2485.1350702791133, Reg:3.0406563200502315, Calibration:13.668617631635094, Accuracy:2470.798590244391, CI:0.7177740709850802, Clustering:0.6680480944804655,  

DEBUG:root:pred_surv:0.38785505294799805,  emp_surv:0.19885540008544922,  km_loss:12.259794235229492, len_unique_t:415, curr_pop_nk, min:0.08268140256404877, max:0.1545293778181076, sum:0.9999997615814209, curr_post:[0.19133933 0.2292463 ]  curr_lik:[0.1723665  0.21579276], train_k:5, 

DEBUG:root:valid_calibration:14.33461547916771, best_calibration:14.158502603188538, valid_ci:0.7127699008432954,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1750 epochs:350, Train Loss: 1041.689453125, Reg:1.423111081123352, Calibration:12.549428939819336, Accuracy:1028.857421875,  CI:0.6728823446583388, Clustering:0.28261396288871765Valid Loss:2494.8592226729434, Reg:3.040887351728912, Calibration:14.33461547916771, Accuracy:2479.8641367855234, CI:0.7127699008432954, Clustering:0.6605170221410246,  

DEBUG:root:pred_surv:0.4006511867046356,  emp_surv:0.31028151512145996,  km_loss:11.756558418273926, len_unique_t:400, curr_pop_nk, min:0.08255233615636826, max:0.15450404584407806, sum:0.9999997615814209, curr_post:[0.18284155 0.2191709 ]  curr_lik:[0.16493757 0.1854069 ], train_k:6, 

DEBUG:root:valid_calibration:14.77165303678594, best_calibration:14.158502603188538, valid_ci:0.7139746084700214,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1755 epochs:351, Train Loss: 1017.6618041992188, Reg:1.4232600927352905, Calibration:11.375664710998535, Accuracy:1006.001220703125,  CI:0.697461003730078, Clustering:0.28492480516433716Valid Loss:2493.1280674078525, Reg:3.041236828535031, Calibration:14.77165303678594, Accuracy:2477.6953020666397, CI:0.7139746084700214, Clustering:0.6610963843826554,  

DEBUG:root:pred_surv:0.4124142527580261,  emp_surv:0.32831090688705444,  km_loss:15.864680290222168, len_unique_t:411, curr_pop_nk, min:0.08277793228626251, max:0.15459813177585602, sum:0.9999997615814209, curr_post:[0.17483255 0.1851371 ]  curr_lik:[0.15126373 0.17309181], train_k:6, 

DEBUG:root:valid_calibration:14.494468004275591, best_calibration:14.158502603188538, valid_ci:0.7095264572328792,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1760 epochs:352, Train Loss: 993.3595581054688, Reg:1.423457145690918, Calibration:16.439908981323242, Accuracy:976.6309814453125,  CI:0.6854160174509193, Clustering:0.28867772221565247Valid Loss:2516.2478715945513, Reg:3.041656098814092, Calibration:14.494468004275591, Accuracy:2501.0960244724893, CI:0.7095264572328792, Clustering:0.6576537067054683,  

DEBUG:root:pred_surv:0.4706819951534271,  emp_surv:0.3223727345466614,  km_loss:14.208221435546875, len_unique_t:432, curr_pop_nk, min:0.08266450464725494, max:0.15435463190078735, sum:0.9999997615814209, curr_post:[0.2120634 0.271518 ]  curr_lik:[0.19797893 0.23751785], train_k:6, 

DEBUG:root:valid_calibration:14.60518184890095, best_calibration:14.158502603188538, valid_ci:0.7117505328514503,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1765 epochs:353, Train Loss: 1032.6510009765625, Reg:1.4236056804656982, Calibration:14.190062522888184, Accuracy:1018.1777954101562,  CI:0.6986238930369856, Clustering:0.2831859290599823Valid Loss:2498.931884765625, Reg:3.04196150893839, Calibration:14.60518184890095, Accuracy:2483.666574853098, CI:0.7117505328514503, Clustering:0.6600654660127101,  

DEBUG:root:pred_surv:0.3672848343849182,  emp_surv:0.30132800340652466,  km_loss:11.937243461608887, len_unique_t:419, curr_pop_nk, min:0.08276527374982834, max:0.1542927473783493, sum:0.9999998211860657, curr_post:[0.14694718 0.19094063]  curr_lik:[0.15676613 0.17166226], train_k:6, 

DEBUG:root:valid_calibration:15.710268265161758, best_calibration:14.158502603188538, valid_ci:0.716337688814753,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1770 epochs:354, Train Loss: 1166.111572265625, Reg:1.4237284660339355, Calibration:10.669276237487793, Accuracy:1155.1588134765625,  CI:0.6439201992888623, Clustering:0.2834794819355011Valid Loss:2484.7323425814634, Reg:3.0421846442752414, Calibration:15.710268265161758, Accuracy:2468.360314002404, CI:0.716337688814753, Clustering:0.661838704194778,  

DEBUG:root:pred_surv:0.34263649582862854,  emp_surv:0.312789648771286,  km_loss:10.676814079284668, len_unique_t:432, curr_pop_nk, min:0.08274097740650177, max:0.15446054935455322, sum:0.9999998211860657, curr_post:[0.20388123 0.20620206]  curr_lik:[0.17841607 0.18122718], train_k:6, 

DEBUG:root:valid_calibration:16.942625371818867, best_calibration:14.158502603188538, valid_ci:0.7122602168473728,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1775 epochs:355, Train Loss: 1181.134765625, Reg:1.4238215684890747, Calibration:11.380918502807617, Accuracy:1169.470703125,  CI:0.6523862715465317, Clustering:0.283217191696167Valid Loss:2511.360103248531, Reg:3.042396062459701, Calibration:16.942625371818867, Accuracy:2493.7605898604434, CI:0.7122602168473728, Clustering:0.6569924517574472,  

DEBUG:root:pred_surv:0.42207708954811096,  emp_surv:0.33219820261001587,  km_loss:10.541234970092773, len_unique_t:412, curr_pop_nk, min:0.08283879607915878, max:0.15451425313949585, sum:0.9999998807907104, curr_post:[0.16332284 0.21184185]  curr_lik:[0.13748822 0.17543162], train_k:6, 

DEBUG:root:valid_calibration:17.430285103300697, best_calibration:14.158502603188538, valid_ci:0.7150866462793068,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1780 epochs:356, Train Loss: 1042.549072265625, Reg:1.423940896987915, Calibration:12.861905097961426, Accuracy:1029.4005126953125,  CI:0.675382739466197, Clustering:0.28661632537841797Valid Loss:2519.990057007879, Reg:3.0426915384765363, Calibration:17.430285103300697, Accuracy:2501.9048707098023, CI:0.7150866462793068, Clustering:0.654915904896891,  

DEBUG:root:pred_surv:0.40665486454963684,  emp_surv:0.3394671678543091,  km_loss:12.439311981201172, len_unique_t:415, curr_pop_nk, min:0.08294537663459778, max:0.15454505383968353, sum:0.9999998211860657, curr_post:[0.15917563 0.18819766]  curr_lik:[0.1539694  0.15784298], train_k:6, 

DEBUG:root:valid_calibration:17.101768754486343, best_calibration:14.158502603188538, valid_ci:0.7119358724863312,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1785 epochs:357, Train Loss: 1046.6658935546875, Reg:1.4241743087768555, Calibration:13.702997207641602, Accuracy:1032.6793212890625,  CI:0.6887062116821416, Clustering:0.2835315763950348Valid Loss:2516.3435976729434, Reg:3.0432211028205023, Calibration:17.101768754486343, Accuracy:2498.590192224225, CI:0.7119358724863312, Clustering:0.6515785542308774,  

DEBUG:root:pred_surv:0.4213290810585022,  emp_surv:0.22473102807998657,  km_loss:13.122634887695312, len_unique_t:414, curr_pop_nk, min:0.08280562609434128, max:0.1545805037021637, sum:0.9999998211860657, curr_post:[0.19176587 0.23358834]  curr_lik:[0.17758638 0.20258997], train_k:6, 

DEBUG:root:valid_calibration:17.047170899872086, best_calibration:14.158502603188538, valid_ci:0.7116578630340098,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1790 epochs:358, Train Loss: 1122.8087158203125, Reg:1.4244189262390137, Calibration:15.090147972106934, Accuracy:1107.4373779296875,  CI:0.6699053574801167, Clustering:0.2812003195285797Valid Loss:2528.320573334001, Reg:3.043718317635039, Calibration:17.047170899872086, Accuracy:2510.621160523504, CI:0.7116578630340098, Clustering:0.6520971655845642,  

DEBUG:root:pred_surv:0.3073321580886841,  emp_surv:0.17750996351242065,  km_loss:10.700139999389648, len_unique_t:418, curr_pop_nk, min:0.08263004571199417, max:0.15453721582889557, sum:0.9999997615814209, curr_post:[0.19701318 0.22582403]  curr_lik:[0.1863369 0.2123285], train_k:5, 

DEBUG:root:valid_calibration:16.37418045956864, best_calibration:14.158502603188538, valid_ci:0.7129552404781763,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1795 epochs:359, Train Loss: 1043.92626953125, Reg:1.4246256351470947, Calibration:9.185307502746582, Accuracy:1034.459716796875,  CI:0.6507526067944837, Clustering:0.28128156065940857Valid Loss:2526.5693338508277, Reg:3.0441915887033835, Calibration:16.37418045956864, Accuracy:2509.5423510950855, CI:0.7129552404781763, Clustering:0.6531384638232043,  

DEBUG:root:pred_surv:0.40800711512565613,  emp_surv:0.40882325172424316,  km_loss:12.407302856445312, len_unique_t:418, curr_pop_nk, min:0.08309520035982132, max:0.15409430861473083, sum:0.9999997615814209, curr_post:[0.17404081 0.216875  ]  curr_lik:[0.15417336 0.21242417], train_k:6, 

DEBUG:root:valid_calibration:14.756644892896341, best_calibration:14.158502603188538, valid_ci:0.7160596793624316,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1800 epochs:360, Train Loss: 1127.1370849609375, Reg:1.4248988628387451, Calibration:14.459327697753906, Accuracy:1112.3931884765625,  CI:0.6624001272011766, Clustering:0.2846066355705261Valid Loss:2482.1996444310894, Reg:3.0447318513169246, Calibration:14.756644892896341, Accuracy:2466.7874849759614, CI:0.7160596793624316, Clustering:0.6556027592756809,  

DEBUG:root:ITER:1800, Train CI:0.6792418567699466, Clustering:0.2819349467754364,Reg:1.4249346256256104, Accuracy:1004.1781005859375, Calibration:13.561508178710938, Cost:1018.0215454101562
DEBUG:root:pred_surv:0.37178054451942444,  emp_surv:0.27307379245758057,  km_loss:7.314693927764893, len_unique_t:427, curr_pop_nk, min:0.08300190418958664, max:0.1542469710111618, sum:0.9999997019767761, curr_post:[0.18948655 0.2362574 ]  curr_lik:[0.17999706 0.22361466], train_k:6, 

DEBUG:root:valid_calibration:13.80611077333108, best_calibration:14.158502603188538, valid_ci:0.7134649244740988,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1805 epochs:361, Train Loss: 1031.7911376953125, Reg:1.4250783920288086, Calibration:8.949614524841309, Accuracy:1022.5560913085938,  CI:0.6819494806711327, Clustering:0.28543978929519653Valid Loss:2495.7442324385684, Reg:3.0451218287150064, Calibration:13.80611077333108, Accuracy:2481.2841170873394, CI:0.7134649244740988, Clustering:0.6536251077285179,  

DEBUG:root:pred_surv:0.4507458209991455,  emp_surv:0.3455947935581207,  km_loss:16.098731994628906, len_unique_t:414, curr_pop_nk, min:0.08291314542293549, max:0.15433649718761444, sum:0.9999997615814209, curr_post:[0.18939629 0.19534905]  curr_lik:[0.15555409 0.19390726], train_k:6, 

DEBUG:root:valid_calibration:14.915954353462936, best_calibration:14.158502603188538, valid_ci:0.7145306273746641,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1810 epochs:362, Train Loss: 1110.0482177734375, Reg:1.425276756286621, Calibration:12.962104797363281, Accuracy:1096.806640625,  CI:0.6612798965740142, Clustering:0.2794564366340637Valid Loss:2496.4505709134614, Reg:3.04554186315618, Calibration:14.915954353462936, Accuracy:2480.8863452357105, CI:0.7145306273746641, Clustering:0.6483918071812035,  

DEBUG:root:pred_surv:0.4102237820625305,  emp_surv:0.34625568985939026,  km_loss:11.077435493469238, len_unique_t:416, curr_pop_nk, min:0.08294110000133514, max:0.15437719225883484, sum:0.9999997615814209, curr_post:[0.18403964 0.19336577]  curr_lik:[0.15568915 0.19798952], train_k:6, 

DEBUG:root:valid_calibration:14.580038877633902, best_calibration:14.158502603188538, valid_ci:0.7108238346770457,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1815 epochs:363, Train Loss: 1024.3939208984375, Reg:1.4254817962646484, Calibration:13.70078182220459, Accuracy:1010.413330078125,  CI:0.6994503613924178, Clustering:0.2797890901565552Valid Loss:2512.6032380976226, Reg:3.046007747324104, Calibration:14.580038877633902, Accuracy:2497.3791399572647, CI:0.7108238346770457, Clustering:0.6439581386044494,  

DEBUG:root:pred_surv:0.3833344578742981,  emp_surv:0.30387386679649353,  km_loss:11.742191314697266, len_unique_t:411, curr_pop_nk, min:0.08279945701360703, max:0.15460613369941711, sum:0.9999997615814209, curr_post:[0.19344096 0.21960296]  curr_lik:[0.1826499  0.20605499], train_k:6, 

DEBUG:root:valid_calibration:15.573055316240358, best_calibration:14.158502603188538, valid_ci:0.7102214808636828,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1820 epochs:364, Train Loss: 1072.8861083984375, Reg:1.4257159233093262, Calibration:11.771413803100586, Accuracy:1060.8358154296875,  CI:0.6626925534962647, Clustering:0.2788824737071991Valid Loss:2514.7741594885147, Reg:3.0465064904628654, Calibration:15.573055316240358, Accuracy:2498.5568054720884, CI:0.7102214808636828, Clustering:0.6443379908545404,  

DEBUG:root:pred_surv:0.3302289545536041,  emp_surv:0.2430521845817566,  km_loss:14.060978889465332, len_unique_t:428, curr_pop_nk, min:0.0829666256904602, max:0.15429432690143585, sum:0.9999997615814209, curr_post:[0.18807127 0.22061738]  curr_lik:[0.17451505 0.19025435], train_k:6, 

DEBUG:root:valid_calibration:14.74632972326034, best_calibration:14.158502603188538, valid_ci:0.7118432026688908,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1825 epochs:365, Train Loss: 1237.609130859375, Reg:1.4259175062179565, Calibration:14.68184757232666, Accuracy:1222.64501953125,  CI:0.6309752632458633, Clustering:0.2822663486003876Valid Loss:2499.230018028846, Reg:3.0469041094820724, Calibration:14.74632972326034, Accuracy:2483.8384644598023, CI:0.7118432026688908, Clustering:0.6450180951346699,  

DEBUG:root:pred_surv:0.39918577671051025,  emp_surv:0.3673751652240753,  km_loss:11.030527114868164, len_unique_t:420, curr_pop_nk, min:0.08284208923578262, max:0.15437625348567963, sum:0.9999997615814209, curr_post:[0.20741002 0.22094576]  curr_lik:[0.18315792 0.2080672 ], train_k:6, 

DEBUG:root:valid_calibration:14.827455210889505, best_calibration:14.158502603188538, valid_ci:0.7098971365026411,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1830 epochs:366, Train Loss: 1099.3470458984375, Reg:1.426084280014038, Calibration:11.672647476196289, Accuracy:1087.392578125,  CI:0.6634180535455861, Clustering:0.2818971276283264Valid Loss:2498.7542568108975, Reg:3.0472724356203, Calibration:14.827455210889505, Accuracy:2483.287322215545, CI:0.7098971365026411, Clustering:0.6393762225778693,  

DEBUG:root:pred_surv:0.3509208858013153,  emp_surv:0.3615489602088928,  km_loss:14.459376335144043, len_unique_t:406, curr_pop_nk, min:0.08289064466953278, max:0.1543532758951187, sum:0.9999997615814209, curr_post:[0.14751428 0.19480495]  curr_lik:[0.15949929 0.1596757 ], train_k:6, 

DEBUG:root:valid_calibration:15.121596491234934, best_calibration:14.158502603188538, valid_ci:0.7069317023445464,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1835 epochs:367, Train Loss: 1080.057373046875, Reg:1.426321268081665, Calibration:11.948530197143555, Accuracy:1067.827392578125,  CI:0.6399407564604196, Clustering:0.281480610370636Valid Loss:2520.443125667735, Reg:3.047819320972149, Calibration:15.121596491234934, Accuracy:2504.68014448117, CI:0.7069317023445464, Clustering:0.6411618783942654,  

DEBUG:root:pred_surv:0.4116741120815277,  emp_surv:0.34169918298721313,  km_loss:17.378921508789062, len_unique_t:418, curr_pop_nk, min:0.08276576548814774, max:0.15437398850917816, sum:0.9999997615814209, curr_post:[0.19034381 0.22272825]  curr_lik:[0.15956482 0.22578302], train_k:6, 

DEBUG:root:valid_calibration:14.41814349247859, best_calibration:14.158502603188538, valid_ci:0.7112408488555277,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1840 epochs:368, Train Loss: 1100.467529296875, Reg:1.426560401916504, Calibration:13.697892189025879, Accuracy:1086.494384765625,  CI:0.6704712512250899, Clustering:0.2752605080604553Valid Loss:2486.862313034188, Reg:3.0482862240228896, Calibration:14.41814349247859, Accuracy:2471.805670322516, CI:0.7112408488555277, Clustering:0.6389042251130455,  

DEBUG:root:pred_surv:0.421846866607666,  emp_surv:0.3672330379486084,  km_loss:7.659568786621094, len_unique_t:417, curr_pop_nk, min:0.08276306092739105, max:0.1542680412530899, sum:0.9999997019767761, curr_post:[0.17991214 0.1988003 ]  curr_lik:[0.16804634 0.2199075 ], train_k:6, 

DEBUG:root:valid_calibration:13.440820905897352, best_calibration:14.158502603188538, valid_ci:0.7128625706607358,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1845 epochs:369, Train Loss: 1245.7724609375, Reg:1.4267220497131348, Calibration:20.174890518188477, Accuracy:1225.3232421875,  CI:0.6818074588775226, Clustering:0.2742791771888733Valid Loss:2494.0738514957266, Reg:3.0485974927233834, Calibration:13.440820905897352, Accuracy:2479.987250434028, CI:0.7128625706607358, Clustering:0.6457444312226058,  

DEBUG:root:pred_surv:0.419196754693985,  emp_surv:0.3654210567474365,  km_loss:11.31348705291748, len_unique_t:417, curr_pop_nk, min:0.08278289437294006, max:0.1541149914264679, sum:0.9999996423721313, curr_post:[0.1797523  0.20213316]  curr_lik:[0.16608912 0.17353037], train_k:6, 

DEBUG:root:valid_calibration:14.220795060834313, best_calibration:14.158502603188538, valid_ci:0.7125845612084144,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1850 epochs:370, Train Loss: 1133.4183349609375, Reg:1.4268124103546143, Calibration:15.386514663696289, Accuracy:1117.74951171875,  CI:0.6692322586891277, Clustering:0.2823944389820099Valid Loss:2488.9959351629273, Reg:3.0487806369096804, Calibration:14.220795060834313, Accuracy:2474.132570446047, CI:0.7125845612084144, Clustering:0.6427097524333204,  

DEBUG:root:pred_surv:0.5057092308998108,  emp_surv:0.40950363874435425,  km_loss:12.611828804016113, len_unique_t:415, curr_pop_nk, min:0.08284688740968704, max:0.1540369838476181, sum:0.9999997615814209, curr_post:[0.21905474 0.24399914]  curr_lik:[0.20594111 0.21499617], train_k:6, 

DEBUG:root:valid_calibration:15.388089367467114, best_calibration:14.158502603188538, valid_ci:0.7142062830136224,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1855 epochs:371, Train Loss: 932.5255126953125, Reg:1.4268779754638672, Calibration:12.165300369262695, Accuracy:920.0830688476562,  CI:0.7016709511568123, Clustering:0.2771434485912323Valid Loss:2505.0912188668535, Reg:3.048937544863448, Calibration:15.388089367467114, Accuracy:2489.05775282118, CI:0.7142062830136224, Clustering:0.6455028286347022,  

DEBUG:root:pred_surv:0.38519132137298584,  emp_surv:0.21126165986061096,  km_loss:12.652729988098145, len_unique_t:420, curr_pop_nk, min:0.0828833132982254, max:0.15398579835891724, sum:0.9999997615814209, curr_post:[0.18139422 0.21013428]  curr_lik:[0.15019423 0.20939897], train_k:6, 

DEBUG:root:valid_calibration:14.98981214996077, best_calibration:14.158502603188538, valid_ci:0.7105921601334445,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1860 epochs:372, Train Loss: 1138.6214599609375, Reg:1.4270447492599487, Calibration:13.434659004211426, Accuracy:1124.908447265625,  CI:0.6338416544808857, Clustering:0.27830013632774353Valid Loss:2518.444354717548, Reg:3.049331088351388, Calibration:14.98981214996077, Accuracy:2502.8089213575054, CI:0.7105921601334445, Clustering:0.6457154567425067,  

DEBUG:root:pred_surv:0.4567483365535736,  emp_surv:0.3682352602481842,  km_loss:12.488511085510254, len_unique_t:417, curr_pop_nk, min:0.0828695222735405, max:0.1539042890071869, sum:0.9999997615814209, curr_post:[0.19306368 0.19500121]  curr_lik:[0.16668035 0.1759713 ], train_k:6, 

DEBUG:root:valid_calibration:14.249701785226152, best_calibration:14.158502603188538, valid_ci:0.7160133444537115,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1865 epochs:373, Train Loss: 1078.1048583984375, Reg:1.4272761344909668, Calibration:12.155769348144531, Accuracy:1065.6712646484375,  CI:0.6904822130751719, Clustering:0.27783480286598206Valid Loss:2481.189956012954, Reg:3.0498262654002914, Calibration:14.249701785226152, Accuracy:2466.300507895967, CI:0.7160133444537115, Clustering:0.6399320231543647,  

DEBUG:root:pred_surv:0.40044668316841125,  emp_surv:0.2682652771472931,  km_loss:14.533773422241211, len_unique_t:414, curr_pop_nk, min:0.08274105191230774, max:0.15407811105251312, sum:0.9999997615814209, curr_post:[0.16089872 0.19455643]  curr_lik:[0.15798075 0.19487272], train_k:6, 

DEBUG:root:valid_calibration:14.049199911264273, best_calibration:14.158502603188538, valid_ci:0.7139746084700214,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1870 epochs:374, Train Loss: 1015.1942138671875, Reg:1.4275010824203491, Calibration:15.527698516845703, Accuracy:999.393798828125,  CI:0.6932374782746089, Clustering:0.2727222442626953Valid Loss:2476.563543336004, Reg:3.0503092158553944, Calibration:14.049199911264273, Accuracy:2461.875719901843, CI:0.7139746084700214, Clustering:0.6388512432065784,  

DEBUG:root:pred_surv:0.5001989006996155,  emp_surv:0.33038726449012756,  km_loss:9.630480766296387, len_unique_t:426, curr_pop_nk, min:0.08282548189163208, max:0.15393736958503723, sum:0.9999997615814209, curr_post:[0.1989951  0.21960568]  curr_lik:[0.18595357 0.20653944], train_k:6, 

DEBUG:root:valid_calibration:15.319201681349012, best_calibration:14.158502603188538, valid_ci:0.7167083680845149,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1875 epochs:375, Train Loss: 1099.248291015625, Reg:1.4277007579803467, Calibration:7.348406791687012, Accuracy:1091.6182861328125,  CI:0.6864778342264597, Clustering:0.28160208463668823Valid Loss:2483.9769673143696, Reg:3.050724920044597, Calibration:15.319201681349012, Accuracy:2468.0233164730234, CI:0.7167083680845149, Clustering:0.6346223063957996,  

DEBUG:root:pred_surv:0.36607030034065247,  emp_surv:0.2964157164096832,  km_loss:16.964162826538086, len_unique_t:412, curr_pop_nk, min:0.08297008275985718, max:0.15396299958229065, sum:0.9999998211860657, curr_post:[0.17884718 0.20549577]  curr_lik:[0.16686915 0.17969683], train_k:6, 

DEBUG:root:valid_calibration:13.631860415140787, best_calibration:14.158502603188538, valid_ci:0.7111018441293671,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1880 epochs:376, Train Loss: 1036.9833984375, Reg:1.4278981685638428, Calibration:18.078533172607422, Accuracy:1018.632568359375,  CI:0.6464315553405743, Clustering:0.2723817229270935Valid Loss:2489.6579318576387, Reg:3.051134765657604, Calibration:13.631860415140787, Accuracy:2475.3937028412124, CI:0.7111018441293671, Clustering:0.632419609106504,  

DEBUG:root:pred_surv:0.3751937448978424,  emp_surv:0.2768077552318573,  km_loss:17.506397247314453, len_unique_t:428, curr_pop_nk, min:0.08302119374275208, max:0.15370729565620422, sum:0.9999997615814209, curr_post:[0.19771841 0.21863073]  curr_lik:[0.1799358  0.18640652], train_k:6, 

DEBUG:root:valid_calibration:13.797904691125591, best_calibration:14.158502603188538, valid_ci:0.7114261884904087,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1885 epochs:377, Train Loss: 1015.567138671875, Reg:1.4280624389648438, Calibration:14.967700004577637, Accuracy:1000.3190307617188,  CI:0.6877940899680031, Clustering:0.2803856134414673Valid Loss:2484.0520875066773, Reg:3.0514822046980896, Calibration:13.797904691125591, Accuracy:2469.618055555555, CI:0.7114261884904087, Clustering:0.6359506748680375,  

DEBUG:root:pred_surv:0.38644254207611084,  emp_surv:0.32207581400871277,  km_loss:13.137118339538574, len_unique_t:412, curr_pop_nk, min:0.0830691009759903, max:0.1537850946187973, sum:0.9999997615814209, curr_post:[0.15881094 0.27408072]  curr_lik:[0.13843577 0.23577496], train_k:6, 

DEBUG:root:valid_calibration:14.920607591286682, best_calibration:14.158502603188538, valid_ci:0.715132981188027,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1890 epochs:378, Train Loss: 1113.6612548828125, Reg:1.4281861782073975, Calibration:19.875551223754883, Accuracy:1093.5074462890625,  CI:0.6885413717247838, Clustering:0.27814236283302307Valid Loss:2472.042246761485, Reg:3.051711198611137, Calibration:14.920607591286682, Accuracy:2456.487150273771, CI:0.715132981188027, Clustering:0.634274676314786,  

DEBUG:root:pred_surv:0.3527670204639435,  emp_surv:0.30188316106796265,  km_loss:10.992668151855469, len_unique_t:417, curr_pop_nk, min:0.08315175026655197, max:0.15395615994930267, sum:0.9999997615814209, curr_post:[0.21185718 0.24166434]  curr_lik:[0.20087664 0.21220641], train_k:6, 

DEBUG:root:valid_calibration:14.087914401649408, best_calibration:14.158502603188538, valid_ci:0.7108701695857659,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1895 epochs:379, Train Loss: 1060.2470703125, Reg:1.4282920360565186, Calibration:13.991350173950195, Accuracy:1045.979248046875,  CI:0.6641569504797143, Clustering:0.27646976709365845Valid Loss:2488.2697733039527, Reg:3.051960824901222, Calibration:14.087914401649408, Accuracy:2473.549606453659, CI:0.7108701695857659, Clustering:0.6321496051600856,  

DEBUG:root:pred_surv:0.3982677161693573,  emp_surv:0.3270440101623535,  km_loss:13.609953880310059, len_unique_t:411, curr_pop_nk, min:0.08325594663619995, max:0.15389712154865265, sum:0.9999997615814209, curr_post:[0.15711352 0.21812007]  curr_lik:[0.13092892 0.17966801], train_k:6, 

DEBUG:root:valid_calibration:13.479784003689756, best_calibration:14.158502603188538, valid_ci:0.712306551756093,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1900 epochs:380, Train Loss: 1108.804443359375, Reg:1.428464412689209, Calibration:14.238091468811035, Accuracy:1094.2921142578125,  CI:0.6829817734998976, Clustering:0.2742656171321869Valid Loss:2485.8346270699785, Reg:3.0523457078852205, Calibration:13.479784003689756, Accuracy:2471.72376844618, CI:0.712306551756093, Clustering:0.6309092426911378,  

DEBUG:root:ITER:1900, Train CI:0.6736780601811276, Clustering:0.2760768532752991,Reg:1.4284977912902832, Accuracy:1069.036865234375, Calibration:9.720585823059082, Cost:1079.0335693359375
DEBUG:root:pred_surv:0.41129156947135925,  emp_surv:0.40888407826423645,  km_loss:12.282645225524902, len_unique_t:423, curr_pop_nk, min:0.08327366411685944, max:0.15402090549468994, sum:0.9999997615814209, curr_post:[0.17227048 0.21204874]  curr_lik:[0.14552839 0.21563657], train_k:6, 

DEBUG:root:valid_calibration:13.801592028039133, best_calibration:14.158502603188538, valid_ci:0.7182374200722824,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1905 epochs:381, Train Loss: 1151.212158203125, Reg:1.428591012954712, Calibration:12.026403427124023, Accuracy:1138.908203125,  CI:0.6813295980608373, Clustering:0.27758148312568665Valid Loss:2488.4523571047007, Reg:3.052575211239676, Calibration:13.801592028039133, Accuracy:2474.0201509915864, CI:0.7182374200722824, Clustering:0.6304122825973054,  

DEBUG:root:pred_surv:0.40639621019363403,  emp_surv:0.2806544601917267,  km_loss:15.216341018676758, len_unique_t:410, curr_pop_nk, min:0.08309750258922577, max:0.15394417941570282, sum:0.9999997019767761, curr_post:[0.17422734 0.21291578]  curr_lik:[0.15230958 0.19772008], train_k:6, 

DEBUG:root:valid_calibration:13.551622374444944, best_calibration:14.158502603188538, valid_ci:0.7155963302752294,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1910 epochs:382, Train Loss: 997.6594848632812, Reg:1.4287159442901611, Calibration:9.735837936401367, Accuracy:987.65185546875,  CI:0.6478962068654833, Clustering:0.27181360125541687Valid Loss:2492.7842881944443, Reg:3.0529038009480534, Calibration:13.551622374444944, Accuracy:2478.600135216346, CI:0.7155963302752294, Clustering:0.6325590686920362,  

DEBUG:root:pred_surv:0.44005781412124634,  emp_surv:0.3268221318721771,  km_loss:18.93393325805664, len_unique_t:418, curr_pop_nk, min:0.0833401083946228, max:0.15379008650779724, sum:0.9999997019767761, curr_post:[0.18049759 0.26781696]  curr_lik:[0.15811197 0.23174068], train_k:6, 

DEBUG:root:valid_calibration:12.729053823356955, best_calibration:14.158502603188538, valid_ci:0.7173107218978778,best_ci:0.7193031229728477, best_epoch:321 
 
DEBUG:root:Iteration: 1915 epochs:383, Train Loss: 1025.95068359375, Reg:1.4289648532867432, Calibration:19.68744659423828, Accuracy:1005.986083984375,  CI:0.6680294358135732, Clustering:0.2770736515522003Valid Loss:2478.2860910790596, Reg:3.0534359124990607, Calibration:12.729053823356955, Accuracy:2464.9279993823448, CI:0.7173107218978778, Clustering:0.6290549396449684,  

DEBUG:root: Final curr_post:[0.16468306 0.20274001], curr_lik:[0.17885827 0.19572389], K:6
DEBUG:root:pred_surv:0.37046441435813904,  emp_surv:0.3865683674812317,  km_loss:15.437948226928711, len_unique_t:426, curr_pop_nk, min:0.0830940306186676, max:0.1538505256175995, sum:0.9999998211860657, curr_post:[0.16468306 0.20274001]  curr_lik:[0.17885827 0.19572389], train_k:6, 

DEBUG:root:valid_calibration:11.634651412311781, best_calibration:11.634651412311781, valid_ci:0.720554165508294,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1920 epochs:384, Train Loss: 1206.6282958984375, Reg:1.429198145866394, Calibration:11.580723762512207, Accuracy:1194.7679443359375,  CI:0.6469044898650078, Clustering:0.27967900037765503Valid Loss:2462.5150240384614, Reg:3.053934400917118, Calibration:11.634651412311781, Accuracy:2450.254521818242, CI:0.720554165508294, Clustering:0.6259514225853814, * 

DEBUG:root:pred_surv:0.3539358675479889,  emp_surv:0.3799082934856415,  km_loss:12.627851486206055, len_unique_t:419, curr_pop_nk, min:0.08314937353134155, max:0.15353842079639435, sum:0.9999998211860657, curr_post:[0.17765443 0.1862628 ]  curr_lik:[0.15792918 0.1805172 ], train_k:6, 

DEBUG:root:valid_calibration:11.10698626591609, best_calibration:11.634651412311781, valid_ci:0.7187007691594848,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1925 epochs:385, Train Loss: 991.2005615234375, Reg:1.4293694496154785, Calibration:10.050057411193848, Accuracy:980.87158203125,  CI:0.7100210603799048, Clustering:0.27890366315841675Valid Loss:2464.9671244825054, Reg:3.0542785285884495, Calibration:11.10698626591609, Accuracy:2453.231681106437, CI:0.7187007691594848, Clustering:0.6286123624214759,  

DEBUG:root:pred_surv:0.4167118966579437,  emp_surv:0.4394228160381317,  km_loss:17.876911163330078, len_unique_t:417, curr_pop_nk, min:0.08311600238084793, max:0.15389575064182281, sum:0.9999998211860657, curr_post:[0.18114237 0.21079458]  curr_lik:[0.16538773 0.17508237], train_k:5, 

DEBUG:root:valid_calibration:11.778918086973011, best_calibration:11.634651412311781, valid_ci:0.7180520804374015,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1930 epochs:386, Train Loss: 1075.1192626953125, Reg:1.4295175075531006, Calibration:18.144357681274414, Accuracy:1056.7012939453125,  CI:0.6584251486533753, Clustering:0.2735615670681Valid Loss:2466.9056427784453, Reg:3.054562032732189, Calibration:11.778918086973011, Accuracy:2454.5001168536323, CI:0.7180520804374015, Clustering:0.6262256931035947,  

DEBUG:root:pred_surv:0.4502700865268707,  emp_surv:0.27845498919487,  km_loss:14.397299766540527, len_unique_t:420, curr_pop_nk, min:0.08298859000205994, max:0.15371696650981903, sum:0.9999998211860657, curr_post:[0.18076187 0.18215026]  curr_lik:[0.17661774 0.17832354], train_k:6, 

DEBUG:root:valid_calibration:12.725342033255814, best_calibration:11.634651412311781, valid_ci:0.7183300898897229,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1935 epochs:387, Train Loss: 1141.478759765625, Reg:1.4296009540557861, Calibration:12.28399658203125, Accuracy:1128.926025390625,  CI:0.654994047374687, Clustering:0.2687700688838959Valid Loss:2484.2714489015757, Reg:3.054749507170457, Calibration:12.725342033255814, Accuracy:2470.9180522168804, CI:0.7183300898897229, Clustering:0.6278732266181554,  

DEBUG:root:pred_surv:0.4015093743801117,  emp_surv:0.4070524275302887,  km_loss:16.69451332092285, len_unique_t:415, curr_pop_nk, min:0.08293604105710983, max:0.1537899374961853, sum:0.9999997615814209, curr_post:[0.17291926 0.20792708]  curr_lik:[0.15839931 0.17871962], train_k:6, 

DEBUG:root:valid_calibration:12.14002951597556, best_calibration:11.634651412311781, valid_ci:0.7199054767862108,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1940 epochs:388, Train Loss: 1148.9415283203125, Reg:1.4297380447387695, Calibration:17.284345626831055, Accuracy:1131.388916015625,  CI:0.6840106906499236, Clustering:0.268336683511734Valid Loss:2466.0362830528843, Reg:3.0550521153670087, Calibration:12.14002951597556, Accuracy:2453.2768053886216, CI:0.7199054767862108, Clustering:0.6194962905003474,  

DEBUG:root:pred_surv:0.3669421076774597,  emp_surv:0.2879665195941925,  km_loss:15.125259399414062, len_unique_t:414, curr_pop_nk, min:0.08309312164783478, max:0.1537666618824005, sum:0.9999997019767761, curr_post:[0.2098212  0.22389536]  curr_lik:[0.1817139  0.19621988], train_k:6, 

DEBUG:root:valid_calibration:13.247984087365305, best_calibration:11.634651412311781, valid_ci:0.7193957927902882,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1945 epochs:389, Train Loss: 1192.1343994140625, Reg:1.429836630821228, Calibration:9.901880264282227, Accuracy:1181.958984375,  CI:0.6189031869577822, Clustering:0.2735074758529663Valid Loss:2479.3033436832266, Reg:3.0552375520396433, Calibration:13.247984087365305, Accuracy:2465.4379298544336, CI:0.7193957927902882, Clustering:0.617058040239872,  

DEBUG:root:pred_surv:0.40549683570861816,  emp_surv:0.22004938125610352,  km_loss:13.227120399475098, len_unique_t:422, curr_pop_nk, min:0.08337719738483429, max:0.1539710909128189, sum:0.9999997615814209, curr_post:[0.16796377 0.170606  ]  curr_lik:[0.14382474 0.15197285], train_k:6, 

DEBUG:root:valid_calibration:13.634002106821434, best_calibration:11.634651412311781, valid_ci:0.7192104531554073,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1950 epochs:390, Train Loss: 1152.0943603515625, Reg:1.4299509525299072, Calibration:11.410301208496094, Accuracy:1140.420166015625,  CI:0.6672722997670094, Clustering:0.263860821723938Valid Loss:2491.4454272669605, Reg:3.055527169480283, Calibration:13.634002106821434, Accuracy:2477.1905882745723, CI:0.7192104531554073, Clustering:0.6204932673364623,  

DEBUG:root:pred_surv:0.34640660881996155,  emp_surv:0.29698601365089417,  km_loss:19.455772399902344, len_unique_t:428, curr_pop_nk, min:0.08346711099147797, max:0.15363334119319916, sum:0.9999997615814209, curr_post:[0.16971815 0.2612593 ]  curr_lik:[0.15839465 0.22836499], train_k:7, 

DEBUG:root:valid_calibration:14.889476645706045, best_calibration:11.634651412311781, valid_ci:0.7152719859141877,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1955 epochs:391, Train Loss: 1085.6697998046875, Reg:1.4301044940948486, Calibration:18.457733154296875, Accuracy:1066.938720703125,  CI:0.6563653582265515, Clustering:0.2733238637447357Valid Loss:2468.5486361511753, Reg:3.0558353815323267, Calibration:14.889476645706045, Accuracy:2453.041533119658, CI:0.7152719859141877, Clustering:0.6177400549252827,  

DEBUG:root:pred_surv:0.4151950478553772,  emp_surv:0.3479480743408203,  km_loss:15.203568458557129, len_unique_t:413, curr_pop_nk, min:0.08335945010185242, max:0.15358926355838776, sum:0.9999997019767761, curr_post:[0.16977143 0.24497466]  curr_lik:[0.1482866  0.21178705], train_k:6, 

DEBUG:root:valid_calibration:15.384156479794754, best_calibration:11.634651412311781, valid_ci:0.720971179686776,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1960 epochs:392, Train Loss: 1135.6776123046875, Reg:1.4302805662155151, Calibration:11.108014106750488, Accuracy:1124.30224609375,  CI:0.6697772075119561, Clustering:0.2673051655292511Valid Loss:2478.8223657852564, Reg:3.0562538876492753, Calibration:15.384156479794754, Accuracy:2462.823068993723, CI:0.720971179686776, Clustering:0.6151683310158232,  

DEBUG:root:pred_surv:0.3949200212955475,  emp_surv:0.3616427779197693,  km_loss:14.417708396911621, len_unique_t:414, curr_pop_nk, min:0.08334504812955856, max:0.15373757481575012, sum:0.9999998211860657, curr_post:[0.17050165 0.26592758]  curr_lik:[0.14769676 0.2277822 ], train_k:6, 

DEBUG:root:valid_calibration:14.435760995261688, best_calibration:11.634651412311781, valid_ci:0.7165693633583542,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1965 epochs:393, Train Loss: 1126.1029052734375, Reg:1.4305527210235596, Calibration:11.648781776428223, Accuracy:1114.1807861328125,  CI:0.6458432757468741, Clustering:0.273296594619751Valid Loss:2473.31303001469, Reg:3.056854264349, Calibration:14.435760995261688, Accuracy:2458.2644731570513, CI:0.7165693633583542, Clustering:0.6126166026816409,  

DEBUG:root:pred_surv:0.4156431257724762,  emp_surv:0.2408037632703781,  km_loss:13.955920219421387, len_unique_t:416, curr_pop_nk, min:0.08319973945617676, max:0.1536029577255249, sum:0.9999997019767761, curr_post:[0.19034259 0.19752477]  curr_lik:[0.17466763 0.18378875], train_k:6, 

DEBUG:root:valid_calibration:13.61298357319628, best_calibration:11.634651412311781, valid_ci:0.7226392364007043,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1970 epochs:394, Train Loss: 1126.853271484375, Reg:1.4308185577392578, Calibration:12.740381240844727, Accuracy:1113.8455810546875,  CI:0.6262961521734154, Clustering:0.26736921072006226Valid Loss:2446.3782677283652, Reg:3.0574179612673245, Calibration:13.61298357319628, Accuracy:2432.1544679821045, CI:0.7226392364007043, Clustering:0.611000718214573,  

DEBUG:root:pred_surv:0.35691213607788086,  emp_surv:0.31319499015808105,  km_loss:12.893633842468262, len_unique_t:432, curr_pop_nk, min:0.08336775749921799, max:0.1535060554742813, sum:0.9999997615814209, curr_post:[0.16755553 0.18234137]  curr_lik:[0.16395144 0.1760662 ], train_k:6, 

DEBUG:root:valid_calibration:12.493258867508326, best_calibration:11.634651412311781, valid_ci:0.7143916226485034,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1975 epochs:395, Train Loss: 1084.3612060546875, Reg:1.4310804605484009, Calibration:15.738957405090332, Accuracy:1068.35107421875,  CI:0.6764844530763864, Clustering:0.27116644382476807Valid Loss:2449.50697157118, Reg:3.0579482897734027, Calibration:12.493258867508326, Accuracy:2436.399541349492, CI:0.7143916226485034, Clustering:0.6140636710020212,  

DEBUG:root:pred_surv:0.3943668603897095,  emp_surv:0.36060580611228943,  km_loss:14.124104499816895, len_unique_t:422, curr_pop_nk, min:0.08354643732309341, max:0.1533864289522171, sum:0.9999997615814209, curr_post:[0.17227173 0.19973381]  curr_lik:[0.16831653 0.2092856 ], train_k:6, 

DEBUG:root:valid_calibration:12.678079116038786, best_calibration:11.634651412311781, valid_ci:0.7159670095449912,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1980 epochs:396, Train Loss: 1067.75048828125, Reg:1.431226134300232, Calibration:12.415871620178223, Accuracy:1055.0693359375,  CI:0.7041026184670837, Clustering:0.265296995639801Valid Loss:2471.2993915264424, Reg:3.0582078501709504, Calibration:12.678079116038786, Accuracy:2458.008595002003, CI:0.7159670095449912, Clustering:0.6129983653370131,  

DEBUG:root:pred_surv:0.35849401354789734,  emp_surv:0.3151375353336334,  km_loss:17.754566192626953, len_unique_t:416, curr_pop_nk, min:0.08330398797988892, max:0.15318796038627625, sum:0.9999997615814209, curr_post:[0.17194578 0.23653235]  curr_lik:[0.16145788 0.2210511 ], train_k:6, 

DEBUG:root:valid_calibration:14.180562435052332, best_calibration:11.634651412311781, valid_ci:0.7153646557316282,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1985 epochs:397, Train Loss: 1033.98828125, Reg:1.4313126802444458, Calibration:20.231279373168945, Accuracy:1013.4943237304688,  CI:0.6599521298002584, Clustering:0.2626354992389679Valid Loss:2484.9584856603897, Reg:3.0583884471502056, Calibration:14.180562435052332, Accuracy:2470.162155281784, CI:0.7153646557316282, Clustering:0.6157524055904812,  

DEBUG:root:pred_surv:0.400166779756546,  emp_surv:0.36835977435112,  km_loss:9.433727264404297, len_unique_t:435, curr_pop_nk, min:0.08337509632110596, max:0.15334105491638184, sum:0.9999996423721313, curr_post:[0.1900574  0.19286641]  curr_lik:[0.16893536 0.17658472], train_k:6, 

DEBUG:root:valid_calibration:14.638702074686686, best_calibration:11.634651412311781, valid_ci:0.7180057455286813,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1990 epochs:398, Train Loss: 1136.2109375, Reg:1.4313980340957642, Calibration:9.755341529846191, Accuracy:1126.18701171875,  CI:0.7026768226332971, Clustering:0.26860156655311584Valid Loss:2499.3810409154644, Reg:3.058579487678332, Calibration:14.638702074686686, Accuracy:2484.1256426949785, CI:0.7180057455286813, Clustering:0.6163188407563756,  

DEBUG:root:pred_surv:0.4029119312763214,  emp_surv:0.4523961842060089,  km_loss:12.915061950683594, len_unique_t:412, curr_pop_nk, min:0.08354520797729492, max:0.153274267911911, sum:0.9999997615814209, curr_post:[0.15720347 0.24102193]  curr_lik:[0.16333915 0.1996871 ], train_k:6, 

DEBUG:root:valid_calibration:15.307522227621485, best_calibration:11.634651412311781, valid_ci:0.7202298211472523,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 1995 epochs:399, Train Loss: 1152.3026123046875, Reg:1.4315052032470703, Calibration:10.899413108825684, Accuracy:1141.126953125,  CI:0.6598570643210555, Clustering:0.2762032449245453Valid Loss:2490.696572849893, Reg:3.0588250384371505, Calibration:15.307522227621485, Accuracy:2474.77552625868, CI:0.7202298211472523, Clustering:0.6135234083884801,  

DEBUG:root:pred_surv:0.4324926435947418,  emp_surv:0.3755645751953125,  km_loss:12.831802368164062, len_unique_t:415, curr_pop_nk, min:0.08364780247211456, max:0.15318001806735992, sum:0.9999997615814209, curr_post:[0.17993602 0.22340786]  curr_lik:[0.14987388 0.22206244], train_k:6, 

DEBUG:root:valid_calibration:14.924008622128738, best_calibration:11.634651412311781, valid_ci:0.7197201371513298,best_ci:0.720554165508294, best_epoch:384 
 
DEBUG:root:Iteration: 2000 epochs:400, Train Loss: 968.626220703125, Reg:1.4316612482070923, Calibration:15.72076416015625, Accuracy:952.6312255859375,  CI:0.6850942435048395, Clustering:0.27423083782196045Valid Loss:2489.9477184328257, Reg:3.059185977674957, Calibration:14.924008622128738, Accuracy:2474.409054487179, CI:0.7197201371513298, Clustering:0.6145920891028184,  

DEBUG:root:Time usage: 0:37:01
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=bold:stretch=normal:size=11.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal book normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-LightItalic.ttf) italic normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil Supplement' (NotoSansTamilSupplement-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Math' (NotoSansMath-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidot.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Black.ttf) normal normal black normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Smallcaps' (Go-Smallcaps.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-MediumItalic.otf) italic normal medium normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexMincho' (ipaexm.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal light normal>) = 2.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HeavyItalic.ttf) italic normal heavy normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Heavy.ttf) normal normal heavy normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnTaza' (UnTaza.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-Slanted.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Bold-Italic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Deseret' (NotoSansDeseret-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS BodoniClassic' (GFSBodoniClassic.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDinaru' (UnDinaru.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal roman normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnGungseo' (UnGungseo.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium' (Gentium-I.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Baskerville' (GFSBaskerville.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizeFourSym-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum O' (LinBiolinum_R.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tangut' (NotoSerifTangut-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond 12 All SC' (EBGaramond12-AllSC.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-CondItalic.otf) italic normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsD' (STIXIntegralsD-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL KaitiM GB' (gkai00mp.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum Keyboard O' (LinBiolinum_K.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RB.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RZI.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntegralsUpSm-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Soyombo' (NotoSansSoyombo-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizeOneSym-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDotum' (UnDotum.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Cond.otf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine Initials O' (LinLibertine_I.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RBI.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-CondItalic.otf) italic normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Italic.ttf) italic normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPilgia' (UnPilgia.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal regular normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono-Bold-Italic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 4.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Regular.ttf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Hairline.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Medium' (Go-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Symbols2' (NotoSansSymbols2-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-Roman.otf) normal normal roman normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Semibold.ttf) normal normal semibold normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizeFourSym-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnGraphic' (UnGraphic.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenicBoldIt.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sogdian' (NotoSansSogdian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Batang' (batang.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoDotum' (UnJamoDotum.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal demi normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAPMincho' (ipamp.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill2' (EBGaramond-InitialsF2.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Zanabazar Square' (NotoSansZanabazarSquare-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Complutum' (GFSPolyglot.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-SemiboldItalic.ttf) italic normal semibold normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_R.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-LightItalic.ttf) italic normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAGothic' (ipag.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAPGothic' (ipagp.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Grantha' (NotoSansGrantha-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizeFiveSym-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal book normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnBatang' (UnBatang.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Gazis' (GFSGazis.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-SemiBold.ttf) normal normal bold normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnYetgul' (UnYetgul.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.otf) oblique normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsSm' (STIXIntegralsSm-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-ExtraBoldItalic.ttf) italic normal bold normal>) = 11.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Artemisia' (GFSArtemisiaBold.otf) normal normal bold normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum O' (LinBiolinum_RI.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Olga' (GFSOlga.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Asana Math' (Asana-Math.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnBatang' (UnBatangBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans Condensed' (OpenSans-CondBold.ttf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Artemisia' (GFSArtemisiaIt.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXVariants' (STIXVariants-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAMincho' (ipam.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 5.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FoulisGreek' (FoulisGreek.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Indic Siyaq Numbers' (NotoSansIndicSiyaqNumbers-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RI.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Thin.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Black.ttf) normal normal black normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPilgi' (UnPilgiBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-ThinItalic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsD' (STIXIntegralsD-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenicIt.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDotum' (UnDotumBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenicBold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-BoldCondIt.otf) italic normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill2' (EBGaramond-InitialsF2.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal semibold normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-CondLight.ttf) normal normal light condensed>) = 10.725
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC08-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPilgi' (UnPilgi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPenheulim' (UnPenheulim.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Light.otf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Artemisia' (GFSArtemisia.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-BoldSlanted.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenic.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-MediumItalic.ttf) italic normal medium normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (lobster.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GentiumAlt' (GentiumAlt-R.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill1' (EBGaramond-InitialsF1.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Comfortaa' (Comfortaa-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Anatolian Hieroglyphs' (NotoSansAnatolianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gunjala Gondi' (NotoSansGunjalaGondi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-LightItalic.ttf) italic normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Light.ttf) normal normal light condensed>) = 10.725
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-Regular.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal book normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HairlineItalic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Thin.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDinaru' (UnDinaruBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum O' (LinBiolinum_RB.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-SemiBoldItalic.otf) italic normal semibold normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 4.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpD' (STIXIntegralsUpD-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Dogra' (NotoSerifDogra-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Solomos' (GFSSolomos.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-BoldCond.otf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Dotum' (dotum.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal medium normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-SemiBold.otf) normal normal semibold normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexGothic' (fonts-japanese-gothic.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsSm' (STIXIntegralsSm-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizeTwoSym-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri Quran Colored' (AmiriQuranColored.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RZ.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpD' (STIXIntegralsUpD-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Thin.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Semibold.ttf) normal normal semibold normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizeTwoSym-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPen' (UnPen.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Medium.ttf) normal normal medium condensed>) = 10.44
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Comfortaa' (Comfortaa-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidotItalic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Extrabold.ttf) normal normal bold normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus' (GentiumPlus-R.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Headline' (hline.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoBatang' (UnJamoBatang.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine Mono O' (LinLibertine_M.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUp' (STIXIntegralsUp-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSArtemisiaBoldIt.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Gulim' (gulim.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BlackItalic.ttf) italic normal black normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Adlam Unjoined' (NotoSansAdlamUnjoined-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-BlackItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal semibold normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-ExtraBold.otf) normal normal bold normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot Classic' (GFSDidotClassic.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Porson' (GFSPorson.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC12-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXVariants' (STIXVariants-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnShinmun' (UnShinmun.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-BoldCondItalic.otf) italic normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal book normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine Display O' (LinLibertine_DR.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnGraphic' (UnGraphicBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-BoldCond.otf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidotBold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-SemiBold.ttf) normal normal semibold normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials' (EBGaramond-Initials.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL SungtiL GB' (gbsn00lp.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Extralight.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri Quran' (AmiriQuran.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-BoldCond.otf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal demi normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC12-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 3.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond 12 All SC' (EBGaramond12-AllSC.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX Math' (STIXMath-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Sogdian' (NotoSansOldSogdian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-SemiboldItalic.ttf) italic normal semibold normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL KaitiM Big5' (bkai00mp.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizeThreeSym-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus Compact' (GentiumPlusCompact-I.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoSora' (UnJamoSora.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal roman normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Cond.otf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Bold.ttf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-LightItalic.ttf) italic normal light condensed>) = 11.725
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnVada' (UnVada.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mayan Numerals' (NotoSansMayanNumerals-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials' (EBGaramond-Initials.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 2.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntegralsUpSm-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill1' (EBGaramond-InitialsF1.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL Mingti2L Big5' (bsmi00lp.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Music' (NotoMusic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium' (Gentium-R.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Black.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-MediumItalic.ttf) italic normal medium condensed>) = 11.44
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus Compact' (GentiumPlusCompact-R.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Comfortaa' (Comfortaa-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-Roman.otf) normal normal roman normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-CondItalic.otf) italic normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizeThreeSym-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-ExtraBold.ttf) normal normal bold normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUp' (STIXIntegralsUp-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Thin.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC08-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-CondLightItalic.ttf) italic normal light condensed>) = 11.725
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal book normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro Math' (BerenisADFProMath-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizeOneSym-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Theokritos' (GFSTheokritos.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.otf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Masaram Gondi' (NotoSansMasaramGondi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Smallcaps' (Go-Smallcaps-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-BoldCondItalic.otf) italic normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GentiumAlt' (GentiumAlt-I.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Medium.otf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 5.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Cond.otf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 2.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus' (GentiumPlus-I.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoNovel' (UnJamoNovel.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-ThinItalic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal book normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexGothic' (ipaexg.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-MediumItalic.ttf) italic normal medium normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Medium' (Go-Medium-Italic.ttf) italic normal medium normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 3.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexMincho' (fonts-japanese-mincho.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidotBoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDinaru' (UnDinaruLight.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=bold:stretch=normal:size=11.0 to DejaVu Sans ('/usr/local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf') with score of 2.050000.
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-LightItalic.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil Supplement' (NotoSansTamilSupplement-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Math' (NotoSansMath-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidot.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Black.ttf) normal normal black normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Smallcaps' (Go-Smallcaps.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-MediumItalic.otf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexMincho' (ipaexm.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal light normal>) = 2.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HeavyItalic.ttf) italic normal heavy normal>) = 11.43
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Heavy.ttf) normal normal heavy normal>) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnTaza' (UnTaza.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-Slanted.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Bold-Italic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Deseret' (NotoSansDeseret-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS BodoniClassic' (GFSBodoniClassic.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDinaru' (UnDinaru.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal roman normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnGungseo' (UnGungseo.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium' (Gentium-I.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Baskerville' (GFSBaskerville.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizeFourSym-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum O' (LinBiolinum_R.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tangut' (NotoSerifTangut-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond 12 All SC' (EBGaramond12-AllSC.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-CondItalic.otf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsD' (STIXIntegralsD-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL KaitiM GB' (gkai00mp.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum Keyboard O' (LinBiolinum_K.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RB.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RZI.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntegralsUpSm-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Soyombo' (NotoSansSoyombo-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizeOneSym-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDotum' (UnDotum.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Cond.otf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine Initials O' (LinLibertine_I.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RBI.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-CondItalic.otf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPilgia' (UnPilgia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal regular normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono-Bold-Italic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 4.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Hairline.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Medium' (Go-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Symbols2' (NotoSansSymbols2-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-Roman.otf) normal normal roman normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Semibold.ttf) normal normal semibold normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizeFourSym-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnGraphic' (UnGraphic.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenicBoldIt.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sogdian' (NotoSansSogdian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Batang' (batang.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoDotum' (UnJamoDotum.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal demi normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAPMincho' (ipamp.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill2' (EBGaramond-InitialsF2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Zanabazar Square' (NotoSansZanabazarSquare-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Complutum' (GFSPolyglot.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-SemiboldItalic.ttf) italic normal semibold normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_R.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-LightItalic.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAGothic' (ipag.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAPGothic' (ipagp.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Grantha' (NotoSansGrantha-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizeFiveSym-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal book normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnBatang' (UnBatang.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Gazis' (GFSGazis.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-SemiBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnYetgul' (UnYetgul.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.otf) oblique normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsSm' (STIXIntegralsSm-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-ExtraBoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Artemisia' (GFSArtemisiaBold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum O' (LinBiolinum_RI.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Olga' (GFSOlga.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Asana Math' (Asana-Math.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnBatang' (UnBatangBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans Condensed' (OpenSans-CondBold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Artemisia' (GFSArtemisiaIt.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXVariants' (STIXVariants-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAMincho' (ipam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 5.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FoulisGreek' (FoulisGreek.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Indic Siyaq Numbers' (NotoSansIndicSiyaqNumbers-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RI.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Black.ttf) normal normal black normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPilgi' (UnPilgiBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-ThinItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsD' (STIXIntegralsD-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenicIt.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDotum' (UnDotumBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenicBold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-BoldCondIt.otf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill2' (EBGaramond-InitialsF2.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal semibold normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-CondLight.ttf) normal normal light condensed>) = 10.44
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC08-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPilgi' (UnPilgi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPenheulim' (UnPenheulim.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Light.otf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Artemisia' (GFSArtemisia.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-BoldSlanted.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenic.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-MediumItalic.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (lobster.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GentiumAlt' (GentiumAlt-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill1' (EBGaramond-InitialsF1.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Comfortaa' (Comfortaa-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Anatolian Hieroglyphs' (NotoSansAnatolianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gunjala Gondi' (NotoSansGunjalaGondi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-LightItalic.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Light.ttf) normal normal light condensed>) = 10.44
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-Regular.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal book normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HairlineItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Thin.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDinaru' (UnDinaruBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum O' (LinBiolinum_RB.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-SemiBoldItalic.otf) italic normal semibold normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 4.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpD' (STIXIntegralsUpD-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Dogra' (NotoSerifDogra-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Solomos' (GFSSolomos.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-BoldCond.otf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Dotum' (dotum.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-SemiBold.otf) normal normal semibold normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexGothic' (fonts-japanese-gothic.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsSm' (STIXIntegralsSm-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizeTwoSym-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri Quran Colored' (AmiriQuranColored.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RZ.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpD' (STIXIntegralsUpD-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Thin.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Semibold.ttf) normal normal semibold normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizeTwoSym-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPen' (UnPen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Medium.ttf) normal normal medium condensed>) = 10.344999999999999
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Comfortaa' (Comfortaa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidotItalic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Extrabold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus' (GentiumPlus-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Headline' (hline.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoBatang' (UnJamoBatang.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine Mono O' (LinLibertine_M.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUp' (STIXIntegralsUp-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSArtemisiaBoldIt.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Gulim' (gulim.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BlackItalic.ttf) italic normal black normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Adlam Unjoined' (NotoSansAdlamUnjoined-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-BlackItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal semibold normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-ExtraBold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot Classic' (GFSDidotClassic.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Porson' (GFSPorson.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC12-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXVariants' (STIXVariants-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnShinmun' (UnShinmun.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-BoldCondItalic.otf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine Display O' (LinLibertine_DR.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnGraphic' (UnGraphicBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-BoldCond.otf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidotBold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-SemiBold.ttf) normal normal semibold normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials' (EBGaramond-Initials.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL SungtiL GB' (gbsn00lp.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Extralight.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri Quran' (AmiriQuran.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-BoldCond.otf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal demi normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC12-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 3.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond 12 All SC' (EBGaramond12-AllSC.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX Math' (STIXMath-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Sogdian' (NotoSansOldSogdian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-SemiboldItalic.ttf) italic normal semibold normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL KaitiM Big5' (bkai00mp.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizeThreeSym-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus Compact' (GentiumPlusCompact-I.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoSora' (UnJamoSora.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal roman normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Cond.otf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-LightItalic.ttf) italic normal light condensed>) = 11.44
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnVada' (UnVada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mayan Numerals' (NotoSansMayanNumerals-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials' (EBGaramond-Initials.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 2.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntegralsUpSm-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill1' (EBGaramond-InitialsF1.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL Mingti2L Big5' (bsmi00lp.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Music' (NotoMusic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium' (Gentium-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Black.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-MediumItalic.ttf) italic normal medium condensed>) = 11.344999999999999
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus Compact' (GentiumPlusCompact-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Comfortaa' (Comfortaa-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-Roman.otf) normal normal roman normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-CondItalic.otf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizeThreeSym-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-ExtraBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUp' (STIXIntegralsUp-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Thin.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC08-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-CondLightItalic.ttf) italic normal light condensed>) = 11.44
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal book normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro Math' (BerenisADFProMath-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizeOneSym-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Theokritos' (GFSTheokritos.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.otf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Masaram Gondi' (NotoSansMasaramGondi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Smallcaps' (Go-Smallcaps-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-BoldCondItalic.otf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GentiumAlt' (GentiumAlt-I.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Medium.otf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 5.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Cond.otf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 2.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus' (GentiumPlus-I.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoNovel' (UnJamoNovel.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-ThinItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexGothic' (ipaexg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-MediumItalic.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Medium' (Go-Medium-Italic.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 3.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexMincho' (fonts-japanese-mincho.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidotBoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDinaru' (UnDinaruLight.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 2.050000.
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-LightItalic.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil Supplement' (NotoSansTamilSupplement-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Math' (NotoSansMath-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidot.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Black.ttf) normal normal black normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Smallcaps' (Go-Smallcaps.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-MediumItalic.otf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexMincho' (ipaexm.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal light normal>) = 2.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HeavyItalic.ttf) italic normal heavy normal>) = 11.43
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Heavy.ttf) normal normal heavy normal>) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnTaza' (UnTaza.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-Slanted.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Bold-Italic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Deseret' (NotoSansDeseret-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS BodoniClassic' (GFSBodoniClassic.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDinaru' (UnDinaru.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal roman normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnGungseo' (UnGungseo.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium' (Gentium-I.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Baskerville' (GFSBaskerville.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizeFourSym-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum O' (LinBiolinum_R.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tangut' (NotoSerifTangut-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond 12 All SC' (EBGaramond12-AllSC.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-CondItalic.otf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsD' (STIXIntegralsD-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL KaitiM GB' (gkai00mp.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum Keyboard O' (LinBiolinum_K.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RB.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RZI.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntegralsUpSm-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Soyombo' (NotoSansSoyombo-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizeOneSym-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDotum' (UnDotum.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Cond.otf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine Initials O' (LinLibertine_I.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RBI.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-CondItalic.otf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPilgia' (UnPilgia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal regular normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono-Bold-Italic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 4.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Hairline.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Medium' (Go-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Symbols2' (NotoSansSymbols2-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-Roman.otf) normal normal roman normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Semibold.ttf) normal normal semibold normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizeFourSym-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnGraphic' (UnGraphic.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenicBoldIt.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sogdian' (NotoSansSogdian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Batang' (batang.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoDotum' (UnJamoDotum.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal demi normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAPMincho' (ipamp.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill2' (EBGaramond-InitialsF2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Zanabazar Square' (NotoSansZanabazarSquare-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Complutum' (GFSPolyglot.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-SemiboldItalic.ttf) italic normal semibold normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_R.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-LightItalic.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAGothic' (ipag.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAPGothic' (ipagp.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Grantha' (NotoSansGrantha-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizeFiveSym-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal book normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnBatang' (UnBatang.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Gazis' (GFSGazis.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-SemiBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnYetgul' (UnYetgul.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.otf) oblique normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsSm' (STIXIntegralsSm-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-ExtraBoldItalic.ttf) italic normal bold normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Artemisia' (GFSArtemisiaBold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum O' (LinBiolinum_RI.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Olga' (GFSOlga.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Asana Math' (Asana-Math.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnBatang' (UnBatangBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans Condensed' (OpenSans-CondBold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Artemisia' (GFSArtemisiaIt.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXVariants' (STIXVariants-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAMincho' (ipam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 5.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FoulisGreek' (FoulisGreek.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Indic Siyaq Numbers' (NotoSansIndicSiyaqNumbers-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RI.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Black.ttf) normal normal black normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPilgi' (UnPilgiBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-ThinItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsD' (STIXIntegralsD-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenicIt.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDotum' (UnDotumBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenicBold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-BoldCondIt.otf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill2' (EBGaramond-InitialsF2.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal semibold normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-CondLight.ttf) normal normal light condensed>) = 10.44
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC08-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPilgi' (UnPilgi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPenheulim' (UnPenheulim.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Light.otf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Artemisia' (GFSArtemisia.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-BoldSlanted.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenic.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-MediumItalic.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (lobster.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GentiumAlt' (GentiumAlt-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill1' (EBGaramond-InitialsF1.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Comfortaa' (Comfortaa-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Anatolian Hieroglyphs' (NotoSansAnatolianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gunjala Gondi' (NotoSansGunjalaGondi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-LightItalic.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Light.ttf) normal normal light condensed>) = 10.44
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-Regular.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal book normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HairlineItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Thin.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDinaru' (UnDinaruBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum O' (LinBiolinum_RB.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-SemiBoldItalic.otf) italic normal semibold normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 4.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpD' (STIXIntegralsUpD-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Dogra' (NotoSerifDogra-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Solomos' (GFSSolomos.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-BoldCond.otf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Dotum' (dotum.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-SemiBold.otf) normal normal semibold normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexGothic' (fonts-japanese-gothic.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsSm' (STIXIntegralsSm-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizeTwoSym-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri Quran Colored' (AmiriQuranColored.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RZ.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpD' (STIXIntegralsUpD-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Thin.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Medium.ttf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Semibold.ttf) normal normal semibold normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizeTwoSym-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPen' (UnPen.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Medium.ttf) normal normal medium condensed>) = 10.344999999999999
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Comfortaa' (Comfortaa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidotItalic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Extrabold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus' (GentiumPlus-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Headline' (hline.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoBatang' (UnJamoBatang.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine Mono O' (LinLibertine_M.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUp' (STIXIntegralsUp-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSArtemisiaBoldIt.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Gulim' (gulim.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BlackItalic.ttf) italic normal black normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Adlam Unjoined' (NotoSansAdlamUnjoined-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-BlackItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal semibold normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-ExtraBold.otf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot Classic' (GFSDidotClassic.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Porson' (GFSPorson.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC12-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXVariants' (STIXVariants-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnShinmun' (UnShinmun.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-BoldCondItalic.otf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine Display O' (LinLibertine_DR.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnGraphic' (UnGraphicBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-BoldCond.otf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidotBold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-SemiBold.ttf) normal normal semibold normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials' (EBGaramond-Initials.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL SungtiL GB' (gbsn00lp.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal light normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Extralight.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri Quran' (AmiriQuran.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-BoldCond.otf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal demi normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC12-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 3.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond 12 All SC' (EBGaramond12-AllSC.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX Math' (STIXMath-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Sogdian' (NotoSansOldSogdian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-SemiboldItalic.ttf) italic normal semibold normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL KaitiM Big5' (bkai00mp.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizeThreeSym-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus Compact' (GentiumPlusCompact-I.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoSora' (UnJamoSora.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal roman normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Cond.otf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-LightItalic.ttf) italic normal light condensed>) = 11.44
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.otf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnVada' (UnVada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mayan Numerals' (NotoSansMayanNumerals-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials' (EBGaramond-Initials.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 2.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntegralsUpSm-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill1' (EBGaramond-InitialsF1.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL Mingti2L Big5' (bsmi00lp.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Music' (NotoMusic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium' (Gentium-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Black.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-MediumItalic.ttf) italic normal medium condensed>) = 11.344999999999999
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus Compact' (GentiumPlusCompact-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Comfortaa' (Comfortaa-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-BoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-Roman.otf) normal normal roman normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-CondItalic.otf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizeThreeSym-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-ExtraBold.ttf) normal normal bold normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUp' (STIXIntegralsUp-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Thin.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC08-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-CondLightItalic.ttf) italic normal light condensed>) = 11.44
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal book normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro Math' (BerenisADFProMath-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizeOneSym-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Regular.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Light.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Theokritos' (GFSTheokritos.otf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.otf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Masaram Gondi' (NotoSansMasaramGondi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Smallcaps' (Go-Smallcaps-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-BoldCondItalic.otf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GentiumAlt' (GentiumAlt-I.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Medium.otf) normal normal medium normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 5.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Cond.otf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 2.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus' (GentiumPlus-I.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoNovel' (UnJamoNovel.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-ThinItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal book normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexGothic' (ipaexg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-MediumItalic.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.otf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Medium' (Go-Medium-Italic.ttf) italic normal medium normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-Italic.otf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 3.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexMincho' (fonts-japanese-mincho.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidotBoldItalic.otf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal regular normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDinaru' (UnDinaruLight.ttf) normal normal light normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=18.0 to DejaVu Sans ('/usr/local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 2.050000.
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=bold:stretch=normal:size=10.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal book normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-LightItalic.ttf) italic normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil Supplement' (NotoSansTamilSupplement-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Math' (NotoSansMath-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidot.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Black.ttf) normal normal black normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Smallcaps' (Go-Smallcaps.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-MediumItalic.otf) italic normal medium normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexMincho' (ipaexm.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal light normal>) = 2.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HeavyItalic.ttf) italic normal heavy normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Heavy.ttf) normal normal heavy normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnTaza' (UnTaza.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-Slanted.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Bold-Italic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Deseret' (NotoSansDeseret-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS BodoniClassic' (GFSBodoniClassic.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDinaru' (UnDinaru.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal roman normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnGungseo' (UnGungseo.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium' (Gentium-I.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Baskerville' (GFSBaskerville.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizeFourSym-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum O' (LinBiolinum_R.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tangut' (NotoSerifTangut-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond 12 All SC' (EBGaramond12-AllSC.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-CondItalic.otf) italic normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsD' (STIXIntegralsD-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL KaitiM GB' (gkai00mp.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum Keyboard O' (LinBiolinum_K.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RB.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RZI.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntegralsUpSm-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Soyombo' (NotoSansSoyombo-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizeOneSym-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDotum' (UnDotum.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Cond.otf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine Initials O' (LinLibertine_I.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RBI.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-CondItalic.otf) italic normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Italic.ttf) italic normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPilgia' (UnPilgia.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal regular normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono-Bold-Italic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 4.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Regular.ttf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Hairline.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Medium' (Go-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Symbols2' (NotoSansSymbols2-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-Roman.otf) normal normal roman normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Semibold.ttf) normal normal semibold normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizeFourSym-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnGraphic' (UnGraphic.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenicBoldIt.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sogdian' (NotoSansSogdian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Batang' (batang.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoDotum' (UnJamoDotum.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal demi normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAPMincho' (ipamp.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill2' (EBGaramond-InitialsF2.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Zanabazar Square' (NotoSansZanabazarSquare-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Complutum' (GFSPolyglot.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-SemiboldItalic.ttf) italic normal semibold normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_R.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-LightItalic.ttf) italic normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAGothic' (ipag.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAPGothic' (ipagp.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Grantha' (NotoSansGrantha-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizeFiveSym-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal book normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnBatang' (UnBatang.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Gazis' (GFSGazis.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-SemiBold.ttf) normal normal bold normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnYetgul' (UnYetgul.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.otf) oblique normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsSm' (STIXIntegralsSm-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-ExtraBoldItalic.ttf) italic normal bold normal>) = 11.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Artemisia' (GFSArtemisiaBold.otf) normal normal bold normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum O' (LinBiolinum_RI.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Olga' (GFSOlga.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Asana Math' (Asana-Math.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnBatang' (UnBatangBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans Condensed' (OpenSans-CondBold.ttf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Artemisia' (GFSArtemisiaIt.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXVariants' (STIXVariants-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAMincho' (ipam.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 5.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FoulisGreek' (FoulisGreek.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Indic Siyaq Numbers' (NotoSansIndicSiyaqNumbers-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RI.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Thin.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Black.ttf) normal normal black normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPilgi' (UnPilgiBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-ThinItalic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsD' (STIXIntegralsD-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenicIt.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDotum' (UnDotumBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenicBold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gurmukhi' (NotoSerifGurmukhi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-BoldCondIt.otf) italic normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill2' (EBGaramond-InitialsF2.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal semibold normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-CondLight.ttf) normal normal light condensed>) = 10.725
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC08-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go' (Go-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPilgi' (UnPilgi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPenheulim' (UnPenheulim.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Light.otf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Artemisia' (GFSArtemisia.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri' (Amiri-BoldSlanted.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Mono' (Go-Mono.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Neohellenic' (GFSNeohellenic.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-MediumItalic.ttf) italic normal medium normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond12-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (lobster.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GentiumAlt' (GentiumAlt-R.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill1' (EBGaramond-InitialsF1.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Comfortaa' (Comfortaa-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Anatolian Hieroglyphs' (NotoSansAnatolianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gunjala Gondi' (NotoSansGunjalaGondi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-LightItalic.ttf) italic normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Light.ttf) normal normal light condensed>) = 10.725
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lobster Two' (LobsterTwo-Regular.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal book normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HairlineItalic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Thin.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDinaru' (UnDinaruBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Biolinum O' (LinBiolinum_RB.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-SemiBoldItalic.otf) italic normal semibold normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 4.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpD' (STIXIntegralsUpD-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Dogra' (NotoSerifDogra-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Solomos' (GFSSolomos.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-BoldCond.otf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Dotum' (dotum.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal medium normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-SemiBold.otf) normal normal semibold normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexGothic' (fonts-japanese-gothic.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsSm' (STIXIntegralsSm-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizeTwoSym-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri Quran Colored' (AmiriQuranColored.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine O' (LinLibertine_RZ.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpD' (STIXIntegralsUpD-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Thin.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Medium.ttf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Semibold.ttf) normal normal semibold normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizeTwoSym-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnPen' (UnPen.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Medium.ttf) normal normal medium condensed>) = 10.44
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Comfortaa' (Comfortaa-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidotItalic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Extrabold.ttf) normal normal bold normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus' (GentiumPlus-R.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Headline' (hline.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoBatang' (UnJamoBatang.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine Mono O' (LinLibertine_M.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUp' (STIXIntegralsUp-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSArtemisiaBoldIt.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Baekmuk Gulim' (gulim.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BlackItalic.ttf) italic normal black normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Adlam Unjoined' (NotoSansAdlamUnjoined-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-BlackItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal semibold normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-ExtraBold.otf) normal normal bold normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot Classic' (GFSDidotClassic.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Porson' (GFSPorson.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC12-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXVariants' (STIXVariants-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnShinmun' (UnShinmun.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-BoldCondItalic.otf) italic normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal book normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Linux Libertine Display O' (LinLibertine_DR.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnGraphic' (UnGraphicBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-BoldCond.otf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidotBold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-SemiBold.ttf) normal normal semibold normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials' (EBGaramond-Initials.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans' (NotoSans-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL SungtiL GB' (gbsn00lp.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal light normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Extralight.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Amiri Quran' (AmiriQuran.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-BoldCond.otf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal demi normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC12-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Universalis ADF Std' (UniversalisADFStd-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 3.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond 12 All SC' (EBGaramond12-AllSC.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX Math' (STIXMath-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No2' (AccanthisADFStdNo2-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Sogdian' (NotoSansOldSogdian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Junicode' (Junicode-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-SemiboldItalic.ttf) italic normal semibold normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL KaitiM Big5' (bkai00mp.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizeThreeSym-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus Compact' (GentiumPlusCompact-I.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoSora' (UnJamoSora.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal roman normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Cond.otf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond' (EBGaramond08-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-Bold.ttf) normal normal 700 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-LightItalic.ttf) italic normal light condensed>) = 11.725
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.otf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tibetan' (NotoSerifTibetan-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnVada' (UnVada.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Hack' (Hack-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif' (NotoSerif-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Mayan Numerals' (NotoSansMayanNumerals-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials' (EBGaramond-Initials.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 2.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntegralsUpSm-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cousine' (Cousine-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tinos' (Tinos-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond Initials Fill1' (EBGaramond-InitialsF1.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AR PL Mingti2L Big5' (bsmi00lp.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Music' (NotoMusic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium' (Gentium-R.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std' (AccanthisADFStd-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Black.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto Condensed' (RobotoCondensed-MediumItalic.ttf) italic normal medium condensed>) = 11.44
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus Compact' (GentiumPlusCompact-R.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Comfortaa' (Comfortaa-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIX' (STIX-BoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'C059' (C059-Roman.otf) normal normal roman normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Caladea' (Caladea-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-CondItalic.otf) italic normal 400 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizeThreeSym-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-ExtraBold.ttf) normal normal bold normal>) = 10.0
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXIntegralsUp' (STIXIntegralsUp-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-Thin.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'EB Garamond SC' (EBGaramondSC08-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Accanthis ADF Std No3' (AccanthisADFStdNo3-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Open Sans' (OpenSans-CondLightItalic.ttf) italic normal light condensed>) = 11.725
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal book normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro Math' (BerenisADFProMath-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizeOneSym-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cantarell' (Cantarell-Regular.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Light.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Theokritos' (GFSTheokritos.otf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.otf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Masaram Gondi' (NotoSansMasaramGondi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Smallcaps' (Go-Smallcaps-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-BoldCondItalic.otf) italic normal 700 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Italic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Carlito' (Carlito-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GentiumAlt' (GentiumAlt-I.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Medium.otf) normal normal medium normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 5.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF No2' (GilliusADFNo2-Cond.otf) normal normal 400 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 2.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif Tamil Slanted' (NotoSerifTamilSlanted-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Plus' (GentiumPlus-I.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnJamoNovel' (UnJamoNovel.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-ThinItalic.ttf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal book normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexGothic' (ipaexg.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Berenis ADF Pro' (BerenisADFPro-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gillius ADF' (GilliusADF-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-MediumItalic.ttf) italic normal medium normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.otf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Cabin' (Cabin-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Go Medium' (Go-Medium-Italic.ttf) italic normal medium normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Roboto' (Roboto-BoldItalic.ttf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUnicode-Italic.otf) italic normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.otf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 3.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'IPAexMincho' (fonts-japanese-mincho.ttf) normal normal 400 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'GFS Didot' (GFSDidotBoldItalic.otf) italic normal 700 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal regular normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'UnDinaru' (UnDinaruLight.ttf) normal normal light normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=bold:stretch=normal:size=10.0 to DejaVu Sans ('/usr/local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf') with score of 2.050000.
INFO:tensorflow:Restoring parameters from summaries/SCA_model
DEBUG:root:Test observed_death:(84,), percentage:0.3605150214592275
DEBUG:root::Test, Loss:2590.25344521191, Reg:3.067041159699403, Clustering 0.6256998864366261, Accuracy:2572.472568233637, Calibration:17.154971929067194, CI:0.7242029805697038, Observed: CI:0.5881171067738232, Correlation:SpearmanrResult(correlation=0.25693284331420463, pvalue=0.018309529741675892)
INFO:tensorflow:Restoring parameters from summaries/SCA_model
DEBUG:root:Valid observed_death:(91,), percentage:0.3888888888888889
DEBUG:root::Valid, Loss:2473.142705411992, Reg:3.053934146196414, Clustering 0.6259514862655574, Accuracy:2460.493038862179, Calibration:12.023629286350348, CI:0.7180057455286813, Observed: CI:0.6750549719032495, Correlation:SpearmanrResult(correlation=0.4831062518567875, pvalue=1.2331535336735644e-06)
INFO:tensorflow:Restoring parameters from summaries/SCA_model
DEBUG:root:Train observed_death:(648,), percentage:0.34726688102893893
DEBUG:root::Train, Loss:1085.8528161738845, Reg:1.531876935069584, Clustering 0.3171013418628983, Accuracy:1075.2353157133407, Calibration:10.300410905451637, CI:0.7345853598977483, Observed: CI:0.6458960834387456, Correlation:SpearmanrResult(correlation=0.4195143733297919, pvalue=5.20743801550787e-29)
